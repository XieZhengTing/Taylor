./ASSEMBLER.F90:	      ! DO NOTHING
./ASSEMBLER.F90:	  DOUBLE PRECISION, INTENT(IN):: LOCAL_ACL(3,LOCAL_NUMP),LOCAL_VEL(3,LOCAL_NUMP), &
./ASSEMBLER.F90:	  DOUBLE PRECISION, INTENT(INOUT):: FINT(NUMP*3)
./ASSEMBLER.F90:	  DOUBLE PRECISION, INTENT(OUT)::MODEL_ACL(3,LOCAL_NUMP),MODEL_VEL(3,LOCAL_NUMP), &
./ASSIGN_TO_NODE.f90:            DOUBLE PRECISION:: EXISTING_VAL,TRIAL_VAL
./BIN_SEARCH.F90:                    DO  M = 1, 7
./BIN_SEARCH.F90:                    END DO
./BIN_SEARCH.F90:                    END DO !LOOP OF SMOOTHING POINTS
./BIN_SEARCH.F90:                DO J=1,NODES_IN_BIN(M)
./BIN_SEARCH.F90:                DO M = 1, MMAX
./BIN_SEARCH.F90:                DO P = 1, 3
./BIN_SEARCH.F90:                END DO
./BIN_SEARCH.F90:                END DO
./BIN_SEARCH.F90:                END DO !J=1,GNUMP (NEIGHBOR NODES)
./BIN_SEARCH.F90:            DO IZ = KSEARCH_DOWN,KSEARCH_UP
./BIN_SEARCH.F90:            DO JJ=1,IP_BIN
./BIN_SEARCH.F90:            END DO
./BIN_SEARCH.F90:        DO I=1,GNUMP
./BIN_SEARCH.F90:        DO IY = JSEARCH_DOWN,JSEARCH_UP
./BIN_SEARCH.F90:        END DO
./BIN_SEARCH.F90:        END DO !I=1,GNUMP (INTEGRATION POINTS)
./BIN_SEARCH.F90:    DO I=1,NP
./BIN_SEARCH.F90:    DO IX = ISEARCH_DOWN,ISEARCH_UP
./BIN_SEARCH.F90:    DOUBLE PRECISION, INTENT(IN)::GCOO(3,GNUMP)
./BIN_SEARCH.F90:    DOUBLE PRECISION, INTENT(IN)::GWIN(3,GNUMP)
./BIN_SEARCH.F90:    DOUBLE PRECISION, INTENT(IN)::GXDIST_MAX, GYDIST_MAX, GZDIST_MAX
./BIN_SEARCH.F90:    DOUBLE PRECISION:: GSM_LEN(6,GNUMP)     !SMOOTHING LENGTHS FOR EACH NODE
./BIN_SEARCH.F90:    DOUBLE PRECISION:: LSM_PTS(3,7),LSM_LEN(6)
./BIN_SEARCH.F90:    DOUBLE PRECISION:: X,Y,Z
./BIN_SEARCH.F90:    DOUBLE PRECISION:: XI, YI, ZI, XJ, YJ, ZJ, DIST_NORM
./BIN_SEARCH.F90:    DOUBLE PRECISION:: XMIN,YMIN,ZMIN,XBIN,YBIN,ZBIN
./BIN_SEARCH.F90:    DOUBLE PRECISION:: XYZ_POS(3,NP)
./BIN_SEARCH.F90:    END DO
./BIN_SEARCH.F90:    END DO
./BIN_SEARCH.F90:    INTEGER:: ISEARCH_DOWN,JSEARCH_DOWN,ISEARCH_UP,JSEARCH_UP,IX,IY,IZ
./BIN_SEARCH.F90:    INTEGER:: KSEARCH_DOWN,KSEARCH_UP
./BIN_SEARCH.F90:    ISEARCH_DOWN = MAX(ISPACE(NODE_NO)-ISEARCH,1)
./BIN_SEARCH.F90:    JSEARCH_DOWN = MAX(JSPACE(NODE_NO)-JSEARCH,1)
./BIN_SEARCH.F90:    KSEARCH_DOWN = MAX(KSPACE(NODE_NO)-KSEARCH,1)
./BOUNDARY.F90:	  DO I=1, NUMP
./BOUNDARY.F90:	  DOUBLE PRECISION, INTENT(INOUT):: ACL(NUMP*3)
./BOUNDARY.F90:	  DOUBLE PRECISION, INTENT(INOUT):: DSP(NUMP*3)
./BOUNDARY.F90:	  DOUBLE PRECISION, INTENT(INOUT):: FRC(NUMP*3)
./BOUNDARY.F90:	  DOUBLE PRECISION, INTENT(INOUT):: VEL(NUMP*3)
./BOUNDARY.F90:	  END DO
./CONSTITUTE_DRUCKPRAG.F90:	  ! DO NOT INDUCE DAMAGE
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(IN)::	TOTAL_STRAIN(6) !TOTAL STRAIN
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(IN)::    INC_STRAIN(6) !INCREMENTAL OBJECTIVE STRAIN
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(IN)::    PROPS(30)
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(IN)::    STRESS_PREDICT(6)
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STATE(20)
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STRESS(6)
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION::  YOUNG,POISS,Q_PHI,K_PHI,Q_PSI,T_CUT,K_I,K_C,DAM_MAX, K_I_CHECK
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION:: BULK, DIFF, TAU_P, ALPHA_P, SPH_DIFF, H
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION:: ELAS_MAT(6,6)
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION:: EPS, EPS_VOL, EPS_SHEAR, DAM, DAM_SV
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION:: F_SHEAR_YEILD, MU
./CONSTITUTE_DRUCKPRAG.F90:	  DOUBLE PRECISION:: TAU_PRE,SPH_PRE,ETA,TAU, SHEAR, GAMMA, SPH
./CONSTITUTE_DRUCKPRAG.F90:      DOUBLE PRECISION:: EFF_STRESS_PREDICT(6), DEV_STRESS_PRE(6),DEV_STRESS(6)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(IN):: DLT
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(IN):: FMAT(3,3)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(IN):: PROPS(30)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(INOUT):: H_STRESS(6)! h
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(INOUT):: S_STRESS(6)! S
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION, INTENT(OUT)::LSTRESS(6) ! IT IS TOTAL STRESS
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::BULKMOD
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::ETA !VISCOSITY
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::H_WAV_STRESS(6), KIRCHHOFF_STRESS_BAR_VEC(6), KIRCHHOFF_STRESS(6),H_BAR_STRESS_VEC(6)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::J, FMAT_BAR(3,3), INV_FMAT_BAR(3,3), CMAT(3,3), CMAT_BAR(3,3), KIRCHHOFF_STRESS_BAR_MAT(3,3),BMAT_BAR(3,3),H_BAR_STRESS_MAT(3,3)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::POISS ! POISS RATIO
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::RELAX_TIME ! RELAXATION TIME	  
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::SHEARMOD
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::UNIT_VTENSOR(6)
./CONSTITUTE_VISCOELASTIC.F90:	  DOUBLE PRECISION::YOUNG ! ELASTIC MODULUS
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION, INTENT(IN)::    PROPS(30)
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION, INTENT(IN)::    STRAIN(6)
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION, INTENT(IN)::    STRESS_PREDICT(6)
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STATE(20)
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STRESS(6)
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION::  YOUNG,POISS,Q_PHI,K_PHI,Q_PSI,T_CUT,K_I,K_C,DAM_MAX
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: BULK, DIFF, TAU_P, ALPHA_P, SPH_DIFF, H
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: DELTA_GAMMA, SIG_NOT, SIG23, TNORM_DEV_STRESS_PRE, YLD_FN
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: DYLD_FN,XK,XKP,EPST,B,CE
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: EPS, EPS_VOL, EPS_SHEAR, DAM
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: F_SHEAR_YEILD, MU
./CONSTITUTE_VONMISES.F90:	  DOUBLE PRECISION:: TAU_PRE,SPH_PRE(6),ETA,TAU, SHEAR, GAMMA, SPH
./CONSTITUTE_VONMISES.F90:      DO I = 1,20  !MAX ITERATE 20 TIMES
./CONSTITUTE_VONMISES.F90:      DOUBLE PRECISION:: EFF_STRESS_PREDICT(6), DEV_STRESS_PRE(6)
./CONSTITUTE_VONMISES.F90:      END DO
./CONSTITUTE_VONMISES_DAM.F90:	  ! DO NOT INDUCE DAMAGE
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(IN)::	TOTAL_STRAIN(6) !TOTAL STRAIN
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(IN)::    INC_STRAIN(6) !INCREMENTAL OBJECTIVE STRAIN
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(IN)::    PROPS(30)
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(IN)::    STRESS_PREDICT(6)
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STATE(20)
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION, INTENT(INOUT):: STRESS(6)
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION::  YOUNG,POISS,Q_PHI,K_PHI,Q_PSI,T_CUT,K_I,K_C,DAM_MAX, K_I_CHECK
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: BULK, DIFF, TAU_P, ALPHA_P, SPH_DIFF, H
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: DELTA_GAMMA, SIG_NOT, SIG23, TNORM_DEV_STRESS_PRE, YLD_FN
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: DYLD_FN,XK,XKP,EPST,B,CE
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: ELAS_MAT(6,6)
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: EPS, EPS_VOL, EPS_SHEAR, DAM, DAM_SV
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: F_SHEAR_YEILD, MU
./CONSTITUTE_VONMISES_DAM.F90:	  DOUBLE PRECISION:: TAU_PRE,SPH_PRE(6),ETA,TAU, SHEAR, GAMMA, SPH
./CONSTITUTE_VONMISES_DAM.F90:      DO I = 1,20  !MAX ITERATE 20 TIMES
./CONSTITUTE_VONMISES_DAM.F90:      DOUBLE PRECISION:: EFF_STRESS_PREDICT(6), DEV_STRESS_PRE(6)
./CONSTITUTE_VONMISES_DAM.F90:      END DO
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT (IN):: LPROP(30)
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT (IN):: LSTRAIN(6), STRAIN(6)
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT (INOUT):: LSTATE(20)
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT (INOUT)::S_STRESS(6), H_STRESS(6) !GC 
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT (OUT):: LSTRESS(6)
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT(IN):: DLT !GC 
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT(IN):: FMAT(3,3) !GC
./CONSTITUTION.F90:	  DOUBLE PRECISION, INTENT(IN):: LSTRESS_PREDICTOR(6)
./CONTROL.F90:       DOUBLE PRECISION, SAVE:: DLT_FAC,TIME_SEARCH
./CONTROL.F90:       DOUBLE PRECISION, SAVE:: QL_COEF,QL_LEN
./CONTROL.F90:       DOUBLE PRECISION, SAVE:: RK_DILA, TIME_OUTPUT
./CONTROL.F90:       DOUBLE PRECISION, SAVE:: STABILIZATION_CONTROL_COEF
./CONTROL.F90:       DOUBLE PRECISION, SAVE::IGRAVITY(3)
./CONTROL.F90:       DOUBLE PRECISION, SAVE::PDSTIME !PERIODIC SEARCH TIME
./CONTROL.F90:       INTEGER, SAVE:: PDSEARCH   ! IN SEMI LAGLANGIAN, WILL DO SOFT_SEARCH AFTER 'PDSEARCH' TIME STEPS, BY DEFAULT =1
./CONTROL.F90:       LOGICAL, SAVE:: normalized_window_OUTPUT
./CONTROL.F90:       LOGICAL, SAVE:: physical_window_OUTPUT
./CORRECTOR.F90:	  DOUBLE PRECISION, INTENT(IN):: ACL(NUMP*3)
./CORRECTOR.F90:	  DOUBLE PRECISION, INTENT(IN):: DLT
./CORRECTOR.F90:	  DOUBLE PRECISION, INTENT(INOUT):: VEL(NUMP*3)
./DETERMINANT.F90:    DOUBLE PRECISION:: A(3,3), DET
./ECHO_CONTROL.F90:      DO I=1,MODEL_NUMP
./ECHO_CONTROL.F90:      END DO
./ECHO_MODEL.F90:	          DO J=1,MODEL_NUMEL_BLOCKS(I)
./ECHO_MODEL.F90:	        DO I=1,MODEL_NUMBLOCK
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_COO(3,*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_NSNI_FAC(3,*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_SM_AREA(3,*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_SM_LEN(6,*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_SM_VOL(*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_VOL(*)
./ECHO_MODEL.F90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_WIN(3,*)
./ECHO_MODEL.F90:              END DO
./ECHO_MODEL.F90:            END DO
./ECHO_MODEL.F90:      DO I=1,MODEL_NUMBLOCK
./ECHO_MODEL.F90:      DO I=1,MODEL_NUMP
./ECHO_MODEL.F90:      END DO
./ECHO_MODEL.F90:      END DO
./ECHO_MODEL.F90:      WRITE(50,'(A9,20A15)') 'NODE ID','X-COORDINATE','Y-COORDINATE','Z-COORDINATE', 'VOLUME','X-WINDOW','Y-WINDOW','Z-WINDOW', &
./EOM.F90:	  DO I=1,NUMP*3
./EOM.F90:	  DOUBLE PRECISION, INTENT(IN):: FEXT(NUMP*3)
./EOM.F90:	  DOUBLE PRECISION, INTENT(IN):: FINT(NUMP*3)
./EOM.F90:	  DOUBLE PRECISION, INTENT(IN):: MASS(NUMP*3)
./EOM.F90:	  DOUBLE PRECISION, INTENT(OUT):: ACL(NUMP*3)
./EOM.F90:	  END DO
./ESTIMATE_MODULI.F90:	  DOUBLE PRECISION:: STRESS_INC(6), STRAIN_INC(6), POISS, YOUNG, BULK, SHEAR,  &
./FINT.F90:						! END DO
./FINT.F90:						! END DO
./FINT.F90:					! DO L = 1, 3
./FINT.F90:					! END DO
./FINT.F90:				! DO K = 1, 3
./FINT.F90:				! END DO
./FINT.F90:			! DO J=1,3
./FINT.F90:			! END DO
./FINT.F90:			!DOESNT WORK!
./FINT.F90:		  ! DO IT THE WAY DR. YREUAX DOES
./FINT.F90:		!IF (.FALSE.) THEN !HERE'S THE OLD WAY OF DOING TIME STEP
./FINT.F90:	DOUBLE PRECISION, SAVE, ALLOCATABLE:: GWIN0(:,:)
./FINT.F90:                            ! DO J = 1, LN
./FINT.F90:                            ! END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:                            DO J = 1, LN
./FINT.F90:                            DO J = 1, LN
./FINT.F90:                            END DO 
./FINT.F90:                            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:                        ! DO L = 1, 3
./FINT.F90:                        ! DO L = 1, 3
./FINT.F90:                        ! END DO
./FINT.F90:                        DO J = 1, LN
./FINT.F90:                        DO J = 1, LN
./FINT.F90:                        DO K = 1, 3
./FINT.F90:                        DO L = 1, 3
./FINT.F90:                        DO L = 1, 3
./FINT.F90:                        END DO
./FINT.F90:                        END DO
./FINT.F90:                        END DO
./FINT.F90:                        END DO
./FINT.F90:                        END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:                    ! DO K = 1, 3
./FINT.F90:                    ! DO K = 1, 3
./FINT.F90:                    ! END DO
./FINT.F90:                    !IT DOESNT LOOK LIKE X_MOM GETS ASSIGNED ANYTHING! FIX NSNI!
./FINT.F90:                    !TODO: GET RID OF THESE ARRAYS, WE DONT DO LAGRANGIAN NSNI, SO ITS
./FINT.F90:                    DO J = 1, LN
./FINT.F90:                    DO J = 1, LN
./FINT.F90:                    DO J = 1, LN
./FINT.F90:                    DO J = 1, LN
./FINT.F90:                    DO K = 1, 3
./FINT.F90:                    DO K = 1, 3
./FINT.F90:                    DO K = 1, 3
./FINT.F90:                    DO K = 1, 6
./FINT.F90:                    DO K = 1, LN
./FINT.F90:                    DO K = 1, LN
./FINT.F90:                    DO L = 1, 3
./FINT.F90:                    DO L = 1, 3
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                    END DO
./FINT.F90:                DO J = 1, 3
./FINT.F90:                DO J = 1, 3
./FINT.F90:                DO J = 1, 6
./FINT.F90:                DO J = 1, LN
./FINT.F90:                DO J = 1, LN
./FINT.F90:                DO J = 1, LN
./FINT.F90:                DO K = 1, 3
./FINT.F90:                DO K = 1, 3
./FINT.F90:                DO K = 1, 3
./FINT.F90:                DO K = 1, 3
./FINT.F90:                DO K = 1, LN
./FINT.F90:                DO L = 1, 3
./FINT.F90:                DO L = 1, 6
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO
./FINT.F90:                END DO !J = 1, 6 (COMPUTE THE SMOOTHED GRADIENTS)
./FINT.F90:                END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:            ! DAMAGE MECHANICS INVOLVED, DO NOT USE A "TOTAL" STRESS
./FINT.F90:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT.F90:            ! UPDATE THE PSUEDO-STRESSES FOR NSNI
./FINT.F90:            DO J = 1, 6
./FINT.F90:            DO J = 1, 6
./FINT.F90:            DO J = 1, 6
./FINT.F90:            DO J = 1, 6
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO J = 1, LN
./FINT.F90:            DO K = 1, 3
./FINT.F90:            DO K = 1, 3
./FINT.F90:            DO K = 1, 3
./FINT.F90:            DO K = 1, 6
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO
./FINT.F90:            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:            END DO !J=1,GNUMP (NEIGHBOR NODES)
./FINT.F90:        !DO TIME STEP CALCS
./FINT.F90:        DO I = 1, GNUMP
./FINT.F90:        DO J = 1, 20
./FINT.F90:        DO J = 1, 20
./FINT.F90:        DO J = 1, 3
./FINT.F90:        DO J = 1, 30
./FINT.F90:        DO J = 1, 6
./FINT.F90:        DO J = 1, 6
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO J = 1, LN
./FINT.F90:        DO K = 1, 3
./FINT.F90:        DO K = 1, LN
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO
./FINT.F90:        END DO !ASSEMBLE FINT FOR STANDARD NODAL INTEGRATION PART
./FINT.F90:    !$OMP DO
./FINT.F90:    !$OMP DO
./FINT.F90:    !$OMP END DO
./FINT.F90:    !$OMP END DO
./FINT.F90:    !DOUBLE PRECISION:: FINT_TEMP(20,3,GNUMP)
./FINT.F90:    !DOUBLE PRECISION:: MODEL_BODYFORCE(3)
./FINT.F90:    !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT.F90:    DO I = 1, GNUMP
./FINT.F90:    DO I = 1, GNUMP
./FINT.F90:    DOUBLE PRECISION, ALLOCATABLE:: FINT_TEMP(:,:,:), FEXT_TEMP(:,:,:)
./FINT.F90:    DOUBLE PRECISION, ALLOCATABLE:: GINT_WORK_TEMP(:)
./FINT.F90:    DOUBLE PRECISION::  LDX_STRESS(6)
./FINT.F90:    DOUBLE PRECISION::  LDY_STRESS(6)
./FINT.F90:    DOUBLE PRECISION::  LDZ_STRESS(6)
./FINT.F90:    DOUBLE PRECISION::  LOCAL_DX_STRESS(6,GNUMP)
./FINT.F90:    DOUBLE PRECISION::  LOCAL_DY_STRESS(6,GNUMP)
./FINT.F90:    DOUBLE PRECISION::  LOCAL_DZ_STRESS(6,GNUMP)
./FINT.F90:    DOUBLE PRECISION:: BMAT(6,3)
./FINT.F90:    DOUBLE PRECISION:: BMAT_T(3,6)
./FINT.F90:    DOUBLE PRECISION:: B_TEMP(3,3), B_INV_TEMP(3,3) !GC
./FINT.F90:    DOUBLE PRECISION:: CMAT(6,6), LAMDA, MU, LAMDA_PLUS_2MU
./FINT.F90:    DOUBLE PRECISION:: D(6)
./FINT.F90:    DOUBLE PRECISION:: DET
./FINT.F90:    DOUBLE PRECISION:: DLT
./FINT.F90:    DOUBLE PRECISION:: DLT_FINT
./FINT.F90:    DOUBLE PRECISION:: DX(3), LITTLE_DX(3),LENGTH_DX,LENGTH_LITTLE_DX
./FINT.F90:    DOUBLE PRECISION:: DX_STRAIN(6), DY_STRAIN(6), DZ_STRAIN(6)
./FINT.F90:    DOUBLE PRECISION:: ELAS_MAT(6,6)
./FINT.F90:    DOUBLE PRECISION:: FBOD(3),FGRAV(3)
./FINT.F90:    DOUBLE PRECISION:: FINT(GNUMP*3), FEXT(GNUMP*3)
./FINT.F90:    DOUBLE PRECISION:: FINT3(3),FINT3_EXT(3),INVK(3,3)
./FINT.F90:    DOUBLE PRECISION:: FMAT(3,3), IFMAT(3,3),X_0(3),X_t(3), DX_t(3,1), PKSTRESS(3,3), TEMP_STRESS(3,3)
./FINT.F90:    DOUBLE PRECISION:: F_INT_C(3), MU1, MU_NEW, MU_NEW2, X2(3), X1(3), TEMP, F_N, XNORM(3), F_T1, F_T2, F_T3, F_TT, F_INT_C_TEMP(3),F_T
./FINT.F90:    DOUBLE PRECISION:: GCHAR_DIST(GNUMP),   GMAX_WVEL(GNUMP)
./FINT.F90:    DOUBLE PRECISION:: GCOO(3,GNUMP)        !COORDINATE FOR EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GCOO_CUURENT(3,GNUMP) !CUURENT COORDINATE FOR EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GDINC(3*GNUMP) ,GDINC_TOT(3*GNUMP)      !DISPLACEMENT INCREMENT (PREDICTOR) OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GINT_WORK
./FINT.F90:    DOUBLE PRECISION:: GINVK(3,3,GNUMP)
./FINT.F90:    DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
./FINT.F90:    DOUBLE PRECISION:: GPROP(30,GNUMP)     !MATERIAL PROPERTIES OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GSM_AREA(3,GNUMP)    !AREAS OF SMOOTHING ZONE SIDES
./FINT.F90:    DOUBLE PRECISION:: GSM_LEN(6,GNUMP)     !SMOOTHING LENGTHS FOR EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GSM_VOL(GNUMP)       !VOLUME OF SMOOTHING ZONE
./FINT.F90:    DOUBLE PRECISION:: GSTACK_DDSHP(6,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:    DOUBLE PRECISION:: GSTACK_DSHP(3,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:    DOUBLE PRECISION:: GSTACK_SHP(DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:    DOUBLE PRECISION:: GSTATE(20,GNUMP)     !STATE VARIABLES OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GSTRAIN(6,GNUMP)     !CAUCHY STRAIN OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GSTRAIN_EQ(GNUMP)     !EQUIVALENT PLASTIC STARIN OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GSTRESS(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GVOL(GNUMP)          !VOLUME OF EACH NODE
./FINT.F90:    DOUBLE PRECISION:: GWIN(3,GNUMP)        !WINDOWS FOR EACH NODE
./FINT.F90:    DOUBLE PRECISION:: G_H_STRESS(6,GNUMP)!GC
./FINT.F90:    DOUBLE PRECISION:: G_S_STRESS(6,GNUMP)!GC
./FINT.F90:    DOUBLE PRECISION:: G_X_MOM(GNUMP),G_Y_MOM(GNUMP),G_Z_MOM(GNUMP)
./FINT.F90:    DOUBLE PRECISION:: LBOD(3)
./FINT.F90:    DOUBLE PRECISION:: LCOO(3)    !COORDINATE AT A NODE IN INITIAL CONFIGURATION
./FINT.F90:    DOUBLE PRECISION:: LCOONE(3,GMAXN)  !ORIGINAL COORDINATES OF THE NEIGBORS
./FINT.F90:    DOUBLE PRECISION:: LCOO_CUURENT(3,GMAXN)  !CURRENT COORDINATES OF THE NEIGBORS
./FINT.F90:    DOUBLE PRECISION:: LCOO_T(3)    !COORDINATE AT A NODE IN CURRENT CONFIGURATION
./FINT.F90:    DOUBLE PRECISION:: LDINC(3,GMAXN),LDINC_TOT(3,GMAXN)       !DISPLACEMENT INCREMENT (PREDICTOR) OF A NODESTRAIN
./FINT.F90:    DOUBLE PRECISION:: LMAT(3,3) !INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP
./FINT.F90:    DOUBLE PRECISION:: LPROP(30)     !MATERIAL PROPERTIES OF A NODE
./FINT.F90:    DOUBLE PRECISION:: LSM_AOV(6)   !AREA OVER VOLUME OF SMOOTHING ZONE SIDES/ZONES
./FINT.F90:    DOUBLE PRECISION:: LSM_LEN(6)  !SMOOTHING LENGTHS A NODE
./FINT.F90:    DOUBLE PRECISION:: LSM_PTS(3,6)  !SMOOTHING POINT POSITION
./FINT.F90:    DOUBLE PRECISION:: LSM_VOL       !VOLUME OF SMOOTHING ZONE
./FINT.F90:    DOUBLE PRECISION:: LSTATE(20)      !STATE VARIABLES OF A NODE
./FINT.F90:    DOUBLE PRECISION:: LSTRAIN(6)
./FINT.F90:    DOUBLE PRECISION:: LSTRESS(6)     !CAUCHY STRESS OF A NODE
./FINT.F90:    DOUBLE PRECISION:: LSTRESS_PREDICTOR(6)     !ELASTIC PREDICTOR STRESS
./FINT.F90:    DOUBLE PRECISION:: LVOL       !VOLUME OF A NODE
./FINT.F90:    DOUBLE PRECISION:: LWIN(3) !WINDOW A NODE
./FINT.F90:    DOUBLE PRECISION:: L_H_STRESS(6)!GC: FOR VISCOELASTIC
./FINT.F90:    DOUBLE PRECISION:: L_S_STRESS(6)!GC
./FINT.F90:    DOUBLE PRECISION:: MAG_STAB_FINT,MAG_FINT
./FINT.F90:    DOUBLE PRECISION:: MODEL_BODYFORCE(3,GNUMP)
./FINT.F90:    DOUBLE PRECISION:: NSNI_LIMITER
./FINT.F90:    DOUBLE PRECISION:: PMAT(6,3)
./FINT.F90:    DOUBLE PRECISION:: ROT(6,6) !ROTATION MATRIX
./FINT.F90:    DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT.F90:    DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHPDTEMP(9) !TEMPORARY VARIABLE FOR SHAPES FOR STABILZIATION
./FINT.F90:    DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SM_COO(3)     !TEMPORARY SMOOTHING POINT POSITION
./FINT.F90:    DOUBLE PRECISION:: STRAIN(6)       !INCREMENTALLY OBJECTIVE STRAIN
./FINT.F90:    DOUBLE PRECISION:: STRESS_INC(6), STRAIN_INC(6), POISS, YOUNG, BULK, SHEAR,  &
./FINT.F90:    DOUBLE PRECISION:: TEMP_DEBUG(3)
./FINT.F90:    DOUBLE PRECISION:: VOL !NODAL VOLUME (ACTUAL INTEGRATION WEIGHT
./FINT.F90:    DOUBLE PRECISION:: XBMAT(6,3), XBMAT_T(3,6), XFINT3(GMAXN,3)
./FINT.F90:    DOUBLE PRECISION:: YBMAT(6,3), YBMAT_T(3,6), YFINT3(GMAXN,3)
./FINT.F90:    DOUBLE PRECISION:: ZBMAT(6,3), ZBMAT_T(3,6), ZFINT3(GMAXN,3)
./FINT.F90:    DOUBLE PRECISION::XLMAT(3,3),YLMAT(3,3),ZLMAT(3,3)
./FINT.F90:    END DO
./FINT.F90:    END DO !INTEGRATION POINT (NODE) LOOP
./FINT.F90:   ! DO KERNEL CONTACT
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION FUNCTION FORM_CMAT(LPROP)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: BULK,SHEAR
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: LPROP(30)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: TENSOR(3,3)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: YOUNG,POISS
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION, INTENT(IN):: YOUNG,POISS
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION:: DEV_VTENSOR(6)
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION:: SIGKK
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION:: SIGKK
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION:: SIJSIJ
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION:: SIJSIJ
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION BULK_MOD(YOUNG,POISS)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION DEV_PROJ(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION J2(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION LAMDA_MOD(BULK,SHEAR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION SHEAR_MOD(YOUNG,POISS)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION SPHR_PROJ(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_2_VTENSOR(TENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_NORM(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_NORM_STRAIN(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION VTENSOR_2_TENSOR(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION:: LAMDA,MU,LAMDA_PLUS_2MU
./FINT_PD.F90:			!#TODO: GET RID OF REDUNDANT CALCS
./FINT_PD.F90:			!WE NEED TO GRAM ALL THE K VALUES BEFORE WE DO ANYTHING
./FINT_PD.F90:		        DO J = 1, LN
./FINT_PD.F90:		        DO J = 1, LN
./FINT_PD.F90:		        END DO
./FINT_PD.F90:		        END DO
./FINT_PD.F90:		       DO J = 1, LN
./FINT_PD.F90:		       DO K = 1, 3
./FINT_PD.F90:		       DO K = 1, 3
./FINT_PD.F90:		       END DO     
./FINT_PD.F90:		       END DO     
./FINT_PD.F90:		       END DO !J=1,GNUMP (NEIGHBOR NODES)
./FINT_PD.F90:		    END DO
./FINT_PD.F90:		   !which is the first PK transposed. But this doesnt
./FINT_PD.F90:		DO J = 1, 20
./FINT_PD.F90:		DO J = 1, 6
./FINT_PD.F90:		DO J = 1, 6
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		DO J = 1, LN
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO
./FINT_PD.F90:		END DO    
./FINT_PD.F90:		END DO        
./FINT_PD.F90:		END DO        
./FINT_PD.F90:	  !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT_PD.F90:	  DO I = 1, GNUMP
./FINT_PD.F90:	  DO I = 1, GNUMP
./FINT_PD.F90:	  DOUBLE PRECISION, ALLOCATABLE:: FINT_TEMP(:,:,:)
./FINT_PD.F90:	  DOUBLE PRECISION:: BMAT(6,3)
./FINT_PD.F90:	  DOUBLE PRECISION:: BMAT_T(3,6)
./FINT_PD.F90:	  DOUBLE PRECISION:: DET      
./FINT_PD.F90:	  DOUBLE PRECISION:: DLT_FINT
./FINT_PD.F90:	  DOUBLE PRECISION:: ELAS_MAT(6,6)
./FINT_PD.F90:	  DOUBLE PRECISION:: FBOD(3),FGRAV(3) ! TO DO
./FINT_PD.F90:	  DOUBLE PRECISION:: FINT(GNUMP*3)
./FINT_PD.F90:	  DOUBLE PRECISION:: FINT3(3),FINT3_J(3),INVK(3,3),INVK_J(3,3)
./FINT_PD.F90:	  DOUBLE PRECISION:: FMAT(3,3), IFMAT(3,3),X_0(3),X_t(3), DX_t(3,1), PKSTRESS(3,3), TEMP_STRESS(3,3), DX_t_J(3,1)
./FINT_PD.F90:	  DOUBLE PRECISION:: GCHAR_DIST(GNUMP),   GMAX_WVEL(GNUMP)
./FINT_PD.F90:	  DOUBLE PRECISION:: GCOO(3,GNUMP)        !COORDINATE FOR EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GCOO_CUURENT(3,GNUMP) !CUURENT COORDINATE FOR EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GDINC(3*GNUMP) ,GDINC_TOT(3*GNUMP)      !DISPLACEMENT INCREMENT (PREDICTOR) OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GINT_WORK !NOT USED
./FINT_PD.F90:	  DOUBLE PRECISION:: GINVK(3,3,GNUMP) 
./FINT_PD.F90:	  DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
./FINT_PD.F90:	  DOUBLE PRECISION:: GPROP(30,GNUMP)     !MATERIAL PROPERTIES OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GSM_AREA(3,GNUMP)    !AREAS OF SMOOTHING ZONE SIDES
./FINT_PD.F90:	  DOUBLE PRECISION:: GSM_LEN(6,GNUMP)     !SMOOTHING LENGTHS FOR EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GSM_VOL(GNUMP)       !VOLUME OF SMOOTHING ZONE
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTACK_DDSHP(6,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTACK_DSHP(3,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTACK_SHP(DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTATE(20,GNUMP)     !STATE VARIABLES OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTRAIN(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GSTRESS(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GVOL(GNUMP)          !VOLUME OF EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: GWIN(3,GNUMP)        !WINDOWS FOR EACH NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: G_H_STRESS(6,GNUMP)!GC
./FINT_PD.F90:	  DOUBLE PRECISION:: G_S_STRESS(6,GNUMP)!GC
./FINT_PD.F90:	  DOUBLE PRECISION:: LCOO(3)    !COORDINATE AT A NODE IN INITIAL CONFIGURATION
./FINT_PD.F90:	  DOUBLE PRECISION:: LCOO_CUURENT(3,GMAXN)  !CURRENT COORDINATES OF THE NEIGBORS
./FINT_PD.F90:	  DOUBLE PRECISION:: LCOO_T(3)    !COORDINATE AT A NODE IN CURRENT CONFIGURATION      
./FINT_PD.F90:	  DOUBLE PRECISION:: LDINC(3,GMAXN),LDINC_TOT(3,GMAXN)       !DISPLACEMENT INCREMENT (PREDICTOR) OF A NODESTRAIN
./FINT_PD.F90:	  DOUBLE PRECISION:: LPROP(30)     !MATERIAL PROPERTIES OF A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: LSM_AOV(6)   !AREA OVER VOLUME OF SMOOTHING ZONE SIDES/ZONES
./FINT_PD.F90:	  DOUBLE PRECISION:: LSM_LEN(6)  !SMOOTHING LENGTHS A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: LSM_PTS(3,6)  !SMOOTHING POINT POSITION
./FINT_PD.F90:	  DOUBLE PRECISION:: LSM_VOL       !VOLUME OF SMOOTHING ZONE
./FINT_PD.F90:	  DOUBLE PRECISION:: LSTATE(20)      !STATE VARIABLES OF A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: LSTRESS(6)     !CAUCHY STRESS OF A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: LSTRESS_PREDICTOR(6)     !ELASTIC PREDICTOR STRESS
./FINT_PD.F90:	  DOUBLE PRECISION:: LVOL       !VOLUME OF A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: LWIN(3) !WINDOW A NODE
./FINT_PD.F90:	  DOUBLE PRECISION:: L_S_STRESS(6)!GC
./FINT_PD.F90:	  DOUBLE PRECISION:: ROT(6,6) !ROTATION MATRIX
./FINT_PD.F90:	  DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPDTEMP(9) !TEMPORARY VARIABLE FOR SHAPES FOR STABILZIATION
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SM_COO(3)     !TEMPORARY SMOOTHING POINT POSITION
./FINT_PD.F90:	  DOUBLE PRECISION:: STRAIN(6)       !INCREMENTALLY OBJECTIVE STRAIN
./FINT_PD.F90:	  DOUBLE PRECISION:: STRESS_INC(6), STRAIN_INC(6), POISS, YOUNG, BULK, SHEAR,  &
./FINT_PD.F90:	  DOUBLE PRECISION:: VOL !NODAL VOLUME (ACTUAL INTEGRATION WEIGHT
./FINT_PD.F90:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT_PD.F90:            DO J = 1, LN
./FINT_PD.F90:        DO J = 1, 20
./FINT_PD.F90:        DO J = 1, 30
./FINT_PD.F90:        DO J = 1, LN
./FINT_PD.F90:        DO K = 1, 3
./FINT_PD.F90:        END DO
./FINT_PD.F90:        END DO
./FINT_PD.F90:        END DO 
./FINT_PD.F90:      !$OMP DO   
./FINT_PD.F90:      !$OMP DO   
./FINT_PD.F90:      !$OMP DO      
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90:      !DO TIME STEP CALCS
./FINT_PD.F90:      !DOUBLE PRECISION:: FINT_TEMP(20,3,GNUMP)
./FINT_PD.F90:      DO I = 1, GNUMP
./FINT_PD.F90:      DO I = 1, GNUMP
./FINT_PD.F90:      DOUBLE PRECISION::  LDX_STRESS(6)
./FINT_PD.F90:      DOUBLE PRECISION::  LDY_STRESS(6)
./FINT_PD.F90:      DOUBLE PRECISION::  LDZ_STRESS(6)
./FINT_PD.F90:      DOUBLE PRECISION::  LOCAL_DX_STRESS(6,GNUMP)
./FINT_PD.F90:      DOUBLE PRECISION::  LOCAL_DY_STRESS(6,GNUMP)
./FINT_PD.F90:      DOUBLE PRECISION::  LOCAL_DZ_STRESS(6,GNUMP)
./FINT_PD.F90:      DOUBLE PRECISION:: CMAT(6,6), LAMDA, MU, LAMDA_PLUS_2MU
./FINT_PD.F90:      DOUBLE PRECISION:: D(6)
./FINT_PD.F90:      DOUBLE PRECISION:: DX_STRAIN(6), DY_STRAIN(6), DZ_STRAIN(6)
./FINT_PD.F90:      DOUBLE PRECISION:: G_X_MOM(GNUMP),G_Y_MOM(GNUMP),G_Z_MOM(GNUMP)
./FINT_PD.F90:      DOUBLE PRECISION:: LMAT(3,3) !INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP      
./FINT_PD.F90:      DOUBLE PRECISION:: LSTRAIN(6)
./FINT_PD.F90:      DOUBLE PRECISION:: L_H_STRESS(6)!GC: FOR VISCOELASTIC
./FINT_PD.F90:      DOUBLE PRECISION:: MODEL_BODYFORCE(3,GNUMP)
./FINT_PD.F90:      DOUBLE PRECISION:: PMAT(6,3)
./FINT_PD.F90:      DOUBLE PRECISION:: TEMP_DEBUG(3)
./FINT_PD.F90:      DOUBLE PRECISION:: XBMAT(6,3), XBMAT_T(3,6), XFINT3(3)
./FINT_PD.F90:      DOUBLE PRECISION:: YBMAT(6,3), YBMAT_T(3,6), YFINT3(3)
./FINT_PD.F90:      DOUBLE PRECISION:: ZBMAT(6,3), ZBMAT_T(3,6), ZFINT3(3)
./FINT_PD.F90:      DOUBLE PRECISION::DLT !GC
./FINT_PD.F90:      DOUBLE PRECISION::XLMAT(3,3),YLMAT(3,3),ZLMAT(3,3)
./FINT_PD.F90:      END DO         
./GHOST.F90:      DO I=1,K
./GHOST.F90:      DO I=1,LOCAL_NUMP
./GHOST.F90:      END DO
./GHOST.F90:      END DO
./HANDELER.F90:						  DO_INTERP, GDINC_PHY, GVEL_PHY, GVEL, GACL, GACL_PHY, &
./HANDELER.F90:		 ! AND MAX SMOOTHING SIZE, AND BOUNDING BOX FOR THE DOMAIN.
./HANDELER.F90:		 ! GET THE BIN SIZE, CONSIDERING THE MAX WINDOW SIZE, 
./HANDELER.F90:		 ! SINCE WE DONT REGENERATE THE BINS, JUST DO THIS ONCE!
./HANDELER.F90:		 END DO
./HANDELER.F90:	  DOUBLE PRECISION,ALLOCATABLE, SAVE:: GINVK(:,:,:)      
./HANDELER.F90:	  DOUBLE PRECISION,ALLOCATABLE, SAVE:: GSTACK_DDSHP(:,:)                 !NEIGHBORS FOR EACH NODE (STACKED)
./HANDELER.F90:	  DOUBLE PRECISION,ALLOCATABLE, SAVE:: GSTACK_DSHP(:,:)                 !NEIGHBORS FOR EACH NODE (STACKED)
./HANDELER.F90:	  DOUBLE PRECISION,ALLOCATABLE, SAVE:: GSTACK_SHP(:)                 !NEIGHBORS FOR EACH NODE (STACKED)
./HANDELER.F90:	  DOUBLE PRECISION:: GCHAR_DIST(GNUMP),   GMAX_WVEL(GNUMP)
./HANDELER.F90:	  DOUBLE PRECISION:: GCOO(3,GSIZE)
./HANDELER.F90:	  DOUBLE PRECISION:: GCOO_CUURENT(3,GSIZE)
./HANDELER.F90:	  DOUBLE PRECISION:: GVOL(GNUMP)
./HANDELER.F90:	  DOUBLE PRECISION:: GWIN(3,GNUMP)
./HANDELER.F90:	  DOUBLE PRECISION:: MODEL_BODYFORCE(3,GNUMP)
./HANDELER.F90:	  DOUBLE PRECISION:: SHPT
./HANDELER.F90:	  IF (.TRUE.) THEN !THE TIMED BIN SEARCH (INTERMIETENT) DOESN'T WORK!
./HANDELER.F90:	  LOGICAL:: DO_INTERP
./HANDELER.F90:            DO J = 1, GN(I)
./HANDELER.F90:            END DO 
./HANDELER.F90:          DO K = 1, 3
./HANDELER.F90:          END DO
./HANDELER.F90:         DO I=1,GNUMP
./HANDELER.F90:         DO I=1,GNUMP
./HANDELER.F90:         DOM_XLENGTH = XMAX - XMIN
./HANDELER.F90:         DOM_YLENGTH = YMAX - YMIN
./HANDELER.F90:         DOM_ZLENGTH = ZMAX - ZMIN
./HANDELER.F90:         END DO
./HANDELER.F90:         NBINSX = CEILING(DOM_XLENGTH/XBIN) !+1
./HANDELER.F90:         NBINSY = CEILING(DOM_YLENGTH/YBIN) !+1
./HANDELER.F90:         NBINSZ = CEILING(DOM_ZLENGTH/ZBIN) !+1
./HANDELER.F90:        DO I=1,GNUMP
./HANDELER.F90:        END DO		
./HANDELER.F90:       DOUBLE PRECISION:: GSTRAIN_EQ(GSIZE)
./HANDELER.F90:      DOUBLE PRECISION, INTENT(IN)::GXDIST_MAX, GYDIST_MAX, GZDIST_MAX
./HANDELER.F90:      DOUBLE PRECISION, INTENT(IN)::G_X_MOM(GNUMP),G_Y_MOM(GNUMP),G_Z_MOM(GNUMP)
./HANDELER.F90:      DOUBLE PRECISION, SAVE:: CNT_SEARCH
./HANDELER.F90:      DOUBLE PRECISION,SAVE:: XBIN,YBIN,ZBIN,XMAX,YMAX,ZMAX,XMIN,YMIN,ZMIN,XBIN_TEMP,YBIN_TEMP,ZBIN_TEMP
./HANDELER.F90:      DOUBLE PRECISION,SAVE::DOM_XLENGTH,DOM_YLENGTH,DOM_ZLENGTH
./HANDELER.F90:      DOUBLE PRECISION::  GINT_WORK
./HANDELER.F90:      DOUBLE PRECISION::  LOCAL_DX_STRESS(6,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION::  LOCAL_DY_STRESS(6,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION::  LOCAL_DZ_STRESS(6,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: DLT_FINT
./HANDELER.F90:      DOUBLE PRECISION:: GACL(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GACL_PHY(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GDINC(3*GSIZE),GDINC_TOT(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GDINC_PHY(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GFINT(3*GSIZE), GFEXT(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
./HANDELER.F90:      DOUBLE PRECISION:: GPROP(30,GNUMP)
./HANDELER.F90:      DOUBLE PRECISION:: GSM_AREA(3,GNUMP)
./HANDELER.F90:      DOUBLE PRECISION:: GSM_LEN(6,GNUMP)
./HANDELER.F90:      DOUBLE PRECISION:: GSM_VOL(GNUMP)
./HANDELER.F90:      DOUBLE PRECISION:: GSTATE(20,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GSTRAIN(6,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GSTRESS(6,GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GVEL(3*GSIZE)
./HANDELER.F90:      DOUBLE PRECISION:: GVEL_PHY(3*GSIZE)
./HANDELER.F90:      IF (DO_INTERP) THEN
./HANDELER.F90:    DOUBLE PRECISION:: DLT
./HANDELER.F90:    DOUBLE PRECISION:: G_H_STRESS(6,GNUMP)!GC
./HANDELER.F90:    DOUBLE PRECISION:: G_S_STRESS(6,GNUMP)!GC
./HARD_SEARCH.F90:      DO J=1,GNUMP
./HARD_SEARCH.F90:      DOUBLE PRECISION, INTENT(IN)::GCOO(3,GNUMP)
./HARD_SEARCH.F90:      DOUBLE PRECISION, INTENT(IN)::GWIN(3,GNUMP)
./HARD_SEARCH.F90:      DOUBLE PRECISION, INTENT(IN)::GXDIST_MAX, GYDIST_MAX, GZDIST_MAX
./HARD_SEARCH.F90:      END DO !J=1,GNUMP (NEIGHBOR NODES)
./HARD_SEARCH.F90:     END DO !I=1,GNUMP (INTEGRATION POINTS)
./HARD_SEARCH.F90:    DO I=1,GNUMP
./HARD_SEARCH.F90:    DOUBLE PRECISION:: XI, YI, ZI, XJ, YJ, ZJ, DIST_NORM
./HUGHES_WINGET.F90:	  DOUBLE PRECISION, INTENT(IN):: DLMAT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION, INTENT(IN):: LMAT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION, INTENT(IN):: LMAT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION, INTENT(OUT):: ROT(3,3),DSTRAIN(6)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION, INTENT(OUT):: ROT(3,3),STRAIN(6)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: A(3,3),IW(3,3),IW_INV(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: A(3,3),IW(3,3),IW_INV(3,3),DA(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: A_INV(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: A_INV(3,3), IDA(3,3), TEMP1(3,3), TEMP2(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: DE(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: DG(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: DG_T(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: E(3,3),W(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: G(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: G_T(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: IDENT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: IDENT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: INV_LMAT(3,3)
./HUGHES_WINGET.F90:	  DOUBLE PRECISION:: INV_LMAT(3,3)
./HUGHES_WINGET.F90:      DOUBLE PRECISION:: D(6)
./HYPERELASTIC.F90:        DO J=1,3
./HYPERELASTIC.F90:        END DO
./HYPERELASTIC.F90:    DO I=1,3
./HYPERELASTIC.F90:    DOUBLE PRECISION, INTENT (IN):: LPROP(30)
./HYPERELASTIC.F90:    DOUBLE PRECISION:: FTEN(3,3),C(3,3),FT(3,3),CINV(3,3),DET
./HYPERELASTIC.F90:    DOUBLE PRECISION:: FTEN(3,3),FT(3,3),DET
./HYPERELASTIC.F90:    DOUBLE PRECISION:: I1,I2,I3,I3T1,I3T2,JT
./HYPERELASTIC.F90:    DOUBLE PRECISION:: IDENT(3,3)
./HYPERELASTIC.F90:    DOUBLE PRECISION:: LSTRESS(6),LSTRESSTEN(3,3),LSTRAIN(6)
./HYPERELASTIC.F90:    DOUBLE PRECISION:: LSTRESSTEN(3,3),LSTEMP(3,3)
./HYPERELASTIC.F90:    DOUBLE PRECISION:: Q1,PTEMP
./HYPERELASTIC.F90:    END DO
./INVERSE.F90:			DO 110 J=1,N
./INVERSE.F90:			DO 60 J=1,N
./INVERSE.F90:		DO 10 I=K,N
./INVERSE.F90:		DO 10 J=K,N
./INVERSE.F90:		DO 120 I=1,N
./INVERSE.F90:		DO 130 K=N,1,-1
./INVERSE.F90:		DO 30 J=1,N
./INVERSE.F90:		DO 40 I=1,N
./INVERSE.F90:		DO 50 J=1,N
./INVERSE.F90:		DO 70 I=1,N
./INVERSE.F90:		DO 80 I=1,N
./INVERSE.F90:	DO 100 K=1,N
./INVERSE.F90:	DOUBLE PRECISION T,D
./INVERSE.F90:	DOUBLE PRECISION, INTENT(IN):: A(N,N)
./INVERSE.F90:	DOUBLE PRECISION, INTENT(OUT):: AINV(N,N)
./INVERSE.F90:      DOUBLE PRECISION :: DET
./INVERSE.F90:      DOUBLE PRECISION, DIMENSION(4,4) :: COFACTOR
./INVERSE.F90:      DOUBLE PRECISION, DIMENSION(4,4), INTENT(IN)  :: A
./INVERSE.F90:      DOUBLE PRECISION, DIMENSION(4,4), INTENT(OUT) :: AINV
./INVERSE.F90:      DOUBLE PRECISION, INTENT(IN):: A(3,3)
./INVERSE.F90:      DOUBLE PRECISION, INTENT(OUT):: AINV(3,3)
./INVERSE.F90:      DOUBLE PRECISION:: DET
./INVERSE.F90:   !!!   DOUBLE PRECISION, INTENT(IN):: A(3,3)
./INVERSE.F90:   !!!   DOUBLE PRECISION, INTENT(OUT):: DET
./KERNEL.F90:      DO I=1, INTEG
./KERNEL.F90:      DOUBLE PRECISION:: AJ,PHI,PHI_X
./KERNEL.F90:      DOUBLE PRECISION:: XS
./KERNEL.F90:      DOUBLE PRECISION::XSA
./KERNEL.F90:      END DO
./MAIN.F90:	DOUBLE PRECISION:: MPDC !MASS PROPORTIAL DAMPING MATRIX (DIAG)
./MAIN.F90:                    DO I_STEP = 1, FIXITY2_STEPS
./MAIN.F90:                    END DO
./MAIN.F90:                DO_INTERP,       LOCAL_DINC_PHY, LOCAL_VEL_PHY, LOCAL_VEL, LOCAL_ACL, LOCAL_ACL_PHY, &
./MAIN.F90:            !  (COMMENT THE FOLLOWING IF EXODUS NOT INSTALLED, DO NOT INCLUDE OUTPUT.F90) #NOEXODUS
./MAIN.F90:            !WE DONT HAVE A TIME STEP ESTIMATE YET
./MAIN.F90:            DO J=1,3
./MAIN.F90:            DO J=1,3
./MAIN.F90:            DO_INTERP = .FALSE.
./MAIN.F90:            DO_INTERP,       LOCAL_DINC_PHY, LOCAL_VEL_PHY, LOCAL_VEL, LOCAL_ACL, LOCAL_ACL_PHY, &
./MAIN.F90:            DO_INTERP,       LOCAL_DINC_PHY, LOCAL_VEL_PHY, LOCAL_VEL, LOCAL_ACL, LOCAL_ACL_PHY, &
./MAIN.F90:            END DO
./MAIN.F90:            END DO
./MAIN.F90:        ! #TODO
./MAIN.F90:        ! ASSIGN NEW GHOSTS (RIGHT NOW, THIS SUBROUTINE DOES NOTHING)
./MAIN.F90:        ! LIKELY HAVE TO DO IT FOR ALL GHOSTS AS WELL #TODO
./MAIN.F90:        ! NEED TO CALCULATE THE EXTERNAL ENERGY SO THAT THE ENERGIES ADD UP #TODO
./MAIN.F90:        ! SHOULD BE DIFFERENT SIZES THEN #TODO
./MAIN.F90:        !BELOW IS THE WORK WITH INTEGRATION IN THE INTERNAL FORCE ROUTINE, DOES NOT WORK ATM, CHECK
./MAIN.F90:        !BELYSCHKO'S BOOK. THIS SHOULD BE THE CORRECT WAY TO DO IT FOR FINITE-STRAIN NONLINEAR PROBLEMS
./MAIN.F90:        !DO I=1,LOCAL_NUMP
./MAIN.F90:        DO I=1,LOCAL_NUMP
./MAIN.F90:        DO I=1,LOCAL_NUMP
./MAIN.F90:        DO I=1,TOTAL_LOCAL_NUMP*3
./MAIN.F90:        DO_INTERP = .FALSE.
./MAIN.F90:        DO_INTERP = .TRUE.
./MAIN.F90:        END DO
./MAIN.F90:        END DO
./MAIN.F90:        END DO
./MAIN.F90:    ! DEALLOCATE MODEL ARRAYS (IF LOCALLY OWNED NODES CHANGE, DO NOT DO THIS)
./MAIN.F90:    !(COMMENT THE FOLLOWING IF EXODUS NOT INSTALLED, DO NOT INCLUDE OUTPUT.F90) #NOEXODUS
./MAIN.F90:    DO
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_CHAR_DIST(:)     !NODAL CHARACTERISTIC DISTANCE
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_NONZERO_EBC(:,:) !NODAL NON-ZERO BOUNDARY CONDITIONS
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_NSNI_FAC(:,:)    !
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_PROP(:,:)        !NODAL MATERIAL PROPERTIES
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_SM_AREA(:,:)     !NODAL SMOOTHING AREAS
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_SM_LEN(:,:)      !NODAL SMOOTHING LENGTHS
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_SM_VOL(:)        !NODAL SMOOTHING VOLUMES
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_VINIT(:,:)       !NODAL INITIAL VELOCITIES
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_VOL(:)           !NODAL VOLUMES
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_WAVE_VEL(:)      !NODAL WAVE VELOCITY ESTIMATE
./MAIN.F90:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_WIN(:,:)         !NODAL WINDOWS
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_ACL(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_ACL_PHY(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_COO(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_COO_CURRENT(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DINC_PHY(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DSP(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DSP_TOT(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DSP_TOT_PHY(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DX_STRAIN(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DX_STRESS(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DY_STRAIN(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DY_STRESS(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DZ_STRAIN(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_DZ_STRESS(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_FEXT(:),LOCAL_FEXT_NMO(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_FINT(:),LOCAL_FINT_NMO(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_H_STRESS(:,:)!GC
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_MASS(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_PRFORCE(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_STATE(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_STRAIN(:,:), LOCAL_STRAIN_EQ(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_STRESS(:,:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_S_STRESS(:,:)!GC
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_VEL(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_VEL_PHY(:)
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_X_MOM(:), LOCAL_Y_MOM(:), LOCAL_Z_MOM(:) !NODAL MOMENTS FOR NSNI
./MAIN.F90:    DOUBLE PRECISION, ALLOCATABLE:: TOTAL_FORCE(:,:) !KC
./MAIN.F90:    DOUBLE PRECISION:: LOCAL_DLT
./MAIN.F90:    DOUBLE PRECISION:: LOCAL_XDIST_MAX                      !MAX SMOOTHING DISTANCE IN X DIRECTION
./MAIN.F90:    DOUBLE PRECISION:: LOCAL_YDIST_MAX                      !MAX SMOOTHING DISTANCE IN Y DIRECTION
./MAIN.F90:    DOUBLE PRECISION:: LOCAL_ZDIST_MAX                      !MAX SMOOTHING DISTANCE IN Z DIRECTION
./MAIN.F90:    DOUBLE PRECISION:: SIM_TIME_1, SIM_TIME_2, SIM_TIME_TEMP
./MAIN.F90:    DOUBLE PRECISION:: SPEED, SIM_TIME_LEFT, REAL_TIME_REMAINING
./MAIN.F90:    DOUBLE PRECISION:: TIME_COUNTER,DLOCAL_INT_ENERGY,DLOCAL_KIN_ENERGY,DLOCAL_TOTAL_ENERGY, &
./MAIN.F90:    DOUBLE PRECISION:: TOTAL_REAL_TIME
./MAIN.F90:    END DO
./MAIN.F90:    LOGICAL:: DO_INTERP
./MODEL.F90:	  !FOR OUTPUT... TRANSFER LOCAL TO GLOBAL MODEL-SIZE ARRAYS... PROBABLY NOT THE BEST WAY TO DO THINGS!
./MODEL.F90:	  DOUBLE PRECISION, ALLOCATABLE:: MODEL_BODYFORCE(:,:)
./MODEL.F90:	  DOUBLE PRECISION, ALLOCATABLE:: MODEL_COO(:,:)
./MODEL.F90:	  DOUBLE PRECISION, ALLOCATABLE:: MODEL_VOL(:)
./MODEL.F90:	  DOUBLE PRECISION, ALLOCATABLE:: MODEL_WIN(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_ACL(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_COO_CURRENT(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_DSP(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_DSP_TOT(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_FINT(:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_MASS(:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_NONZERO_EBC(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_NORM_WIN(:) 
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_NSNI_FAC(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_PROP(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_SM_AREA(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_SM_LEN(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_SM_VOL(:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_VEL(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_VINIT(:,:)
./MODEL.F90:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_X_MOM(:),MODEL_Y_MOM(:),MODEL_Z_MOM(:)       
./MODEL.F90:      DOUBLE PRECISION, SAVE:: MODEL_XDIST_MAX, MODEL_YDIST_MAX,MODEL_ZDIST_MAX
./MODEL.F90:      DOUBLE PRECISION, SAVE:: TIME, TIME_END, DLT
./MODEL.F90:      DOUBLE PRECISION,ALLOCATABLE::FIXITY2_TIME(:,:),FIXITY2_NONZERO_EBC(:,:)
./MODEL.F90:     ! DOUBLE PRECISION, ALLOCATABLE:: MODEL_BODYFORCE(:)
./PARALLEL.F90:      DO I = 1, LOCAL_NUMP
./PARALLEL.F90:      DO I=1,LOCAL_NUMP
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_NSNI_FAC(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_PROP(30,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_AREA(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_LEN(6,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_VOL(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_VINIT(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_VOL(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_WIN(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_XDIST_MAX, MODEL_YDIST_MAX, MODEL_ZDIST_MAX 
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_X_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_Y_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_Z_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_NSNI_FAC(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_PROP(30,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_AREA(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_LEN(6,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_VOL(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_VINIT(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_VOL(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_WIN(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_XDIST_MAX, LOCAL_YDIST_MAX, LOCAL_ZDIST_MAX   
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_X_MOM(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_Y_MOM(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_Z_MOM(LOCAL_NUMP)
./PARALLEL.F90:      END DO
./PARALLEL.F90:      END DO
./PREDICTOR.F90:	  DOUBLE PRECISION, INTENT(IN):: ACL(TOTAL_LOCAL_SIZE*3)
./PREDICTOR.F90:	  DOUBLE PRECISION, INTENT(IN):: DLT
./PREDICTOR.F90:	  DOUBLE PRECISION, INTENT(INOUT):: DSP(TOTAL_LOCAL_SIZE*3)
./PREDICTOR.F90:	  DOUBLE PRECISION, INTENT(INOUT):: VEL(TOTAL_LOCAL_SIZE*3)
./PRE_CONTROL.F90:	      !TODO FOR ALL CONTROL CARDS: CHECK THE VALUES OF INPUT FOR ALL CONTROL CARDS #TODO
./PRE_CONTROL.F90:	      !TODO FOR ALL CONTROL CARDS: GIVE THE LINE IN THE ERROR FOR WHICH MEGA COULD NOT READ #TODO
./PRE_CONTROL.F90:	      DO WHILE(.TRUE.)
./PRE_CONTROL.F90:	  DO 
./PRE_CONTROL.F90:	  DO 
./PRE_CONTROL.F90:	  DOUBLE PRECISION:: DLT_VAL
./PRE_CONTROL.F90:	  END DO !READ FILE WITH ARBITRARY DO
./PRE_CONTROL.F90:    	  END DO
./PRE_CONTROL.F90:              DO J=1,IMWID2
./PRE_CONTROL.F90:              END DO
./PRE_CONTROL.F90:              normalized_window_OUTPUT = .TRUE.
./PRE_CONTROL.F90:              physical_window_OUTPUT= .TRUE.
./PRE_CONTROL.F90:            IF (CTEMP.eq.'normalized_window') normalized_window_OUTPUT = .TRUE.
./PRE_CONTROL.F90:            IF (CTEMP.eq.'physical_window') physical_window_OUTPUT = .TRUE.
./PRE_CONTROL.F90:          DO I=1, MODEL_NUMP
./PRE_CONTROL.F90:          DO I=1,2
./PRE_CONTROL.F90:          DO I=1,IMWID2
./PRE_CONTROL.F90:          DO I=1,MODEL_NUMP
./PRE_CONTROL.F90:          END DO
./PRE_CONTROL.F90:          END DO
./PRE_CONTROL.F90:          END DO
./PRE_CONTROL.F90:          END DO
./PRE_CONTROL.F90:        ! FOR NOW, DEFAULT TO LAGRANGIAN AND INFINTESIMAL STRAIN. IN THE FUTURE, DEFAULT TO THE OPOSITE #TODO
./PRE_CONTROL.F90:        !dont bother to spit out warnings if QL is not used
./PRE_CONTROL.F90:        DO I=1, MODEL_NUMP
./PRE_CONTROL.F90:        DO I=1, MODEL_NUMP
./PRE_CONTROL.F90:        END DO
./PRE_CONTROL.F90:        END DO
./PRE_CONTROL.F90:      !DOUBLE PRECISION:: BODYFORCE(3)
./PRE_CONTROL.F90:      !TEMPORARY DOUBLES TO ASSIGN VALUSE MEGA USES
./PRE_CONTROL.F90:      DO I=1, MODEL_NUMP
./PRE_CONTROL.F90:      DO I=1, MODEL_NUMP
./PRE_CONTROL.F90:      DOUBLE PRECISION, ALLOCATABLE:: XIM(:), YIM(:)
./PRE_CONTROL.F90:      DOUBLE PRECISION:: CMAT_TYPE(2)
./PRE_CONTROL.F90:      DOUBLE PRECISION:: CPROPS(2,30)
./PRE_CONTROL.F90:      DOUBLE PRECISION:: DIST, DIST_MIN
./PRE_CONTROL.F90:      DOUBLE PRECISION:: EPOISS, EYOUNG, LAMDA, MU, LAMDA_PLUS_2MU
./PRE_CONTROL.F90:      DOUBLE PRECISION:: QL_LEN_REDUCE_AUTO
./PRE_CONTROL.F90:      DOUBLE PRECISION::PHI,C,PSI,PHI_RAD,PSI_RAD,SRT32,Q_PHI,K_PHI,Q_PSI
./PRE_CONTROL.F90:      END DO
./PRE_CONTROL.F90:      END DO
./PRE_CONTROL.F90:      END DO
./PRE_CONTROL.F90:      normalized_window_OUTPUT = .FALSE.
./PRE_CONTROL.F90:      physical_window_OUTPUT=.FALSE.
./PRE_MODEL.F90:	          DO J=1,MODEL_NUMEL_BLOCKS(I)
./PRE_MODEL.F90:	        DO 
./PRE_MODEL.F90:	        DO I=1,MODEL_NUMBLOCK
./PRE_MODEL.F90:	      DO I=1,MODEL_NUMP
./PRE_MODEL.F90:	      END DO
./PRE_MODEL.F90:	  !FOR OUTPUT... TRANSFER LOCAL TO GLOBAL MODEL-SIZE ARRAYS... PROBABLY NOT THE BEST WAY TO DO THINGS!
./PRE_MODEL.F90:	  DO 
./PRE_MODEL.F90:	  DO 
./PRE_MODEL.F90:	  END DO
./PRE_MODEL.F90:	  END DO !READ FILE WITH ARBITRARY DO
./PRE_MODEL.F90:      	        DO I=1,MODEL_NUMBLOCK
./PRE_MODEL.F90:                END DO
./PRE_MODEL.F90:              END DO
./PRE_MODEL.F90:            END DO
./PRE_MODEL.F90:            END DO
./PRE_MODEL.F90:      ! GET THE DILATIONS (WINDOWS)
./PRE_MODEL.F90:      DO I=1,MODEL_NUMP
./PRE_MODEL.F90:      DOUBLE PRECISION:: D5_TEMP(5), D6_TEMP(6), D7_TEMP(7), D8_TEMP(8)
./PRE_MODEL.F90:      DOUBLE PRECISION:: D_TEMP, D2_TEMP(2), D3_TEMP(3), D4_TEMP(4)
./PRE_MODEL.F90:      END DO
./PRE_MODEL_ADIAL.F90:	  ! GENERATE THE WINDOW FUNCTIONS (NORMALIZED TO ONE)
./PRE_MODEL_ADIAL.F90:              DO K=1,4
./PRE_MODEL_ADIAL.F90:         DO J=1,4
./PRE_MODEL_ADIAL.F90:         DO J=1,8
./PRE_MODEL_ADIAL.F90:         DO K=1,8
./PRE_MODEL_ADIAL.F90:         END DO
./PRE_MODEL_ADIAL.F90:         END DO
./PRE_MODEL_ADIAL.F90:         END DO
./PRE_MODEL_ADIAL.F90:       DO J=1,3
./PRE_MODEL_ADIAL.F90:       DO K=1,4
./PRE_MODEL_ADIAL.F90:       DO K=1,8
./PRE_MODEL_ADIAL.F90:       DO K=1,8
./PRE_MODEL_ADIAL.F90:       END DO
./PRE_MODEL_ADIAL.F90:       END DO
./PRE_MODEL_ADIAL.F90:       END DO
./PRE_MODEL_ADIAL.F90:       END DO
./PRE_MODEL_ADIAL.F90:       END DO
./PRE_MODEL_ADIAL.F90:     END DO
./PRE_MODEL_ADIAL.F90:    DO I=1,NUMELS
./PRE_MODEL_ADIAL.F90:    DOUBLE PRECISION:: ADIAL(3,NUMPTS)
./PRE_MODEL_ADIAL.F90:    DOUBLE PRECISION:: DIST_TEMP
./PRE_MODEL_ADIAL.F90:    DOUBLE PRECISION:: XDIST_MAX, YDIST_MAX, ZDIST_MAX 
./PRE_MODEL_ADIAL.F90:    DOUBLE PRECISION:: XYZ(3,NUMPTS)
./PRE_MODEL_ADIAL.F90:    DOUBLE PRECISION:: XYZEL(3,8)
./PRE_MODEL_COUNT.f90:	        DO 
./PRE_MODEL_COUNT.f90:	        DO 
./PRE_MODEL_COUNT.f90:	        DO 
./PRE_MODEL_COUNT.f90:	  DO 
./PRE_MODEL_COUNT.f90:	  DO 
./PRE_MODEL_COUNT.f90:	  DO 
./PRE_MODEL_COUNT.f90:	  END DO !READ FILE WITH ARBITRARY DO
./PRE_MODEL_COUNT.f90:	  END DO !READ FILE WITH ARBITRARY DO
./PRE_MODEL_COUNT.f90:	  END DO !READ FILE WITH ARBITRARY DO
./PRE_MODEL_COUNT.f90:            END DO
./PRE_MODEL_COUNT.f90:            END DO
./PRE_MODEL_COUNT.f90:            END DO
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D5_TEMP(5), D6_TEMP(6), D7_TEMP(7), D8_TEMP(8)
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D5_TEMP(5), D6_TEMP(6), D7_TEMP(7), D8_TEMP(8)
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D5_TEMP(5), D6_TEMP(6), D7_TEMP(7), D8_TEMP(8)
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D_TEMP, D2_TEMP(2), D3_TEMP(3), D4_TEMP(4)
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D_TEMP, D2_TEMP(2), D3_TEMP(3), D4_TEMP(4)
./PRE_MODEL_COUNT.f90:      DOUBLE PRECISION:: D_TEMP, D2_TEMP(2), D3_TEMP(3), D4_TEMP(4)
./PRE_MODEL_COUNT.f90:    DO 
./PRE_MODEL_COUNT.f90:    END DO !READ FILE WITH ARBITRARY DO
./PRE_MODEL_SECOND_MOMENT.F90:      DO I=1,NUMP
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION, INTENT(IN):: COO(3,*)
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION, INTENT(IN):: VOL(*)
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION, INTENT(IN):: WIN(3,*)
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION, INTENT(OUT):: NSNI_FAC(3,*)
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION:: DIM_1, DIM_2, DIM_3, DIM_RATIO, VOL_WIN
./PRE_MODEL_SECOND_MOMENT.F90:      DOUBLE PRECISION:: THRD
./PRE_MODEL_SECOND_MOMENT.F90:      END DO
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DO I=1,NUMP
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(IN):: COO(3,NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(IN):: VOL(NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(IN):: WIN(3,NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(OUT):: SM_AREA(3,NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(OUT):: SM_LEN(6,NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(OUT):: SM_VOL(NUMP)
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(OUT):: XDIST_MAX, YDIST_MAX,ZDIST_MAX   
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION, INTENT(OUT):: X_MOM(NUMP), Y_MOM(NUMP), Z_MOM(NUMP)       
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION:: CRTV
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION:: DIM_1, DIM_2, DIM_3, DIM_RATIO, VOL_WIN
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      DOUBLE PRECISION:: THRD
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      END DO
./PRE_MODEL_VOL.F90:      DO J=1,3
./PRE_MODEL_VOL.F90:      END DO
./PRE_MODEL_VOL.F90:    DO I=1,12
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: A,B,C,D
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: AMD(3), BMD(3), CMD(3)
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: DVOL
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: DVOL_TET
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: M(3,3)
./PRE_MODEL_VOL.F90:    DOUBLE PRECISION:: XYZEL(3,9)
./PRE_MODEL_VOL.F90:    END DO
./PRE_MODEL_VOL1.f90:    DO I=1,3
./PRE_MODEL_VOL1.f90:    DOUBLE PRECISION:: A(3,3)
./PRE_MODEL_VOL1.f90:    DOUBLE PRECISION:: AD
./PRE_MODEL_VOL1.f90:    DOUBLE PRECISION:: DVOL
./PRE_MODEL_VOL1.f90:    DOUBLE PRECISION:: XYZEL(3,9)
./PRE_MODEL_VOL1.f90:    END DO
./PRE_MODEL_VOL2.F90:    DOUBLE PRECISION:: A(3,3),B(3,3),C(3,3)
./PRE_MODEL_VOL2.F90:    DOUBLE PRECISION:: AD,BD,CD
./PRE_MODEL_VOL2.F90:    DOUBLE PRECISION:: DVOL
./PRE_MODEL_VOL2.F90:    DOUBLE PRECISION:: XYZEL(3,9)
./PRE_MODEL_VOLUMES.F90:         DO K=1,4
./PRE_MODEL_VOLUMES.F90:         DO K=1,8
./PRE_MODEL_VOLUMES.F90:         DO K=1,8
./PRE_MODEL_VOLUMES.F90:         END DO
./PRE_MODEL_VOLUMES.F90:         END DO
./PRE_MODEL_VOLUMES.F90:         END DO
./PRE_MODEL_VOLUMES.F90:       DO J=1,3
./PRE_MODEL_VOLUMES.F90:       DO J=1,3
./PRE_MODEL_VOLUMES.F90:       DO J=1,3
./PRE_MODEL_VOLUMES.F90:       DO K=1,4
./PRE_MODEL_VOLUMES.F90:       DO K=1,8
./PRE_MODEL_VOLUMES.F90:       END DO
./PRE_MODEL_VOLUMES.F90:       END DO
./PRE_MODEL_VOLUMES.F90:       END DO
./PRE_MODEL_VOLUMES.F90:       END DO
./PRE_MODEL_VOLUMES.F90:       END DO
./PRE_MODEL_VOLUMES.F90:    DO I=1,NUMELS
./PRE_MODEL_VOLUMES.F90:    DOUBLE PRECISION:: DVOL
./PRE_MODEL_VOLUMES.F90:    DOUBLE PRECISION:: VOLUME(NUMPTS)
./PRE_MODEL_VOLUMES.F90:    DOUBLE PRECISION:: XYZ(3,NUMPTS)
./PRE_MODEL_VOLUMES.F90:    DOUBLE PRECISION:: XYZEL(3,9)
./PRE_MODEL_VOLUMES.F90:    END DO
./PRE_MODEL_VOLUMES_HEX.F90:         DO K=1,8
./PRE_MODEL_VOLUMES_HEX.F90:         DO K=1,8
./PRE_MODEL_VOLUMES_HEX.F90:         END DO
./PRE_MODEL_VOLUMES_HEX.F90:         END DO
./PRE_MODEL_VOLUMES_HEX.F90:       DO J=1,3
./PRE_MODEL_VOLUMES_HEX.F90:       DO J=1,3
./PRE_MODEL_VOLUMES_HEX.F90:       DO K=1,8
./PRE_MODEL_VOLUMES_HEX.F90:       END DO
./PRE_MODEL_VOLUMES_HEX.F90:       END DO
./PRE_MODEL_VOLUMES_HEX.F90:       END DO
./PRE_MODEL_VOLUMES_HEX.F90:    DO I=1,NUMELS
./PRE_MODEL_VOLUMES_HEX.F90:    DOUBLE PRECISION:: DVOL
./PRE_MODEL_VOLUMES_HEX.F90:    DOUBLE PRECISION:: VOLUME(NUMPTS)
./PRE_MODEL_VOLUMES_HEX.F90:    DOUBLE PRECISION:: XYZ(3,NUMPTS)
./PRE_MODEL_VOLUMES_HEX.F90:    DOUBLE PRECISION:: XYZEL(3,9)
./PRE_MODEL_VOLUMES_HEX.F90:    END DO
./PRE_OMP.F90:	    !DONT USE OMP
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE NORM_WINDOW IN THE CARD *WINDOW DEFINITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	  DO 
./READ.F90:	  DO 
./READ.F90:	  DOUBLE PRECISION:: PROPS(30)
./READ.F90:	  DOUBLE PRECISION:: VELOCITIES(3), NORM_WINDOW
./READ.F90:	  END DO !READ FILE WITH ARBITRARY DO
./READ.F90:	  END DO !READ FILE WITH ARBITRARY DO
./READ.F90:                 !DOES NOT ALLOW DILATATION FOR NOW
./READ.F90:                DO J = 1,2
./READ.F90:                END DO
./READ.F90:              DO I = 1,FIXITY2_STEPS
./READ.F90:              DO I = 1,FIXITY2_STEPS                
./READ.F90:              DO I = 1,FIXITY2_STEPS                
./READ.F90:              DO I = 1,FIXITY2_STEPS                
./READ.F90:              DO I = 1,FIXITY2_STEPS                
./READ.F90:              DO I=1,NUM_NODESET
./READ.F90:              END DO
./READ.F90:              END DO
./READ.F90:              END DO
./READ.F90:              END DO
./READ.F90:              END DO
./READ.F90:              END DO             
./READ.F90:            'INPUT ERROR: MULTIPLE VALUES OF A NORMALIZED WINDOW WAS ASSIGNED TO SINGLE NODE')
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_NORM_WIN(NODE_ID),NORM_WINDOW, &
./READ.F90:            DO I=1,1000
./READ.F90:            END DO
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*WINDOW DEFINITION')
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I = 1,MODEL_NODE_SET_LENGTH(SET_INDEX)
./READ.F90:          DO I=1,NUM_NODESET
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          END DO
./READ.F90:          READ(10,*,iostat=IERROR) NORM_WINDOW
./READ.F90:        CALL EXIT_PROGRAM('BODY ID DEFINITIONS ARE IS MISSING FOR PART OF THE MODEL, THEY MUST BE SPECIFIED (OPTIONS:SPECIFY VALUES FOR ALL NODES, OR DONT SPECIFY AT ALL)',2)
./READ.F90:        CALL EXIT_PROGRAM('WINDOW DEFINITIONS ARE IS MISSING FOR PART OF THE MODEL, THEY MUST BE SPECIFIED (ALL NODES OR NONE)',2)
./READ.F90:        CALL LOG_APPEND('WINDOW DEFINITIONS ARE MISSING FOR PART OF THE MODEL, NUMBER MISSING =')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOF NORMALIZED WINDOWS = 1.8')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = AT REST')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = BODY 1')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = FREE')
./READ.F90:        CALL LOG_APPEND_SPACE('NODE DOFS WITH UNASSIGNED ESSENTIAL BOUNDARY CONDITIONS = FREE')
./READ.F90:        CALL WARN('WINDOW DEFINITIONS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./READ.F90:        DO J=1,3
./READ.F90:        ELSEIF (CTEMP.eq.'*WINDOW DEFINITION') THEN
./READ.F90:        END DO
./READ.F90:        IF (NORM_WINDOW.LT.(0.00001d0)) THEN
./READ.F90:        NORM_WINDOW = MODEL_NORM_WIN(I)
./READ.F90:        WRITE(*,*) 'ALL DOF NORMALIZED WINDOWS = 1.8'
./READ.F90:        WRITE(*,*) 'ALL DOFS = AT REST'
./READ.F90:        WRITE(*,*) 'ALL DOFS = BODY 1'
./READ.F90:        WRITE(*,*) 'ALL DOFS = FREE'
./READ.F90:      !DOUBLE PRECISION, INTENT(OUT):: MODEL_BODYFORCE(3)
./READ.F90:      DO I=1, NUMP
./READ.F90:      DO I=1, NUMP
./READ.F90:      DO I=1, NUMP
./READ.F90:      DO I=1, NUMP
./READ.F90:      DOUBLE PRECISION, INTENT(OUT):: MODEL_BODYFORCE(3,NUMP)
./READ.F90:      DOUBLE PRECISION, INTENT(OUT):: MODEL_NORM_WIN(NUMP)
./READ.F90:      DOUBLE PRECISION, INTENT(OUT):: MODEL_PROP(30,NUMP)
./READ.F90:      DOUBLE PRECISION, INTENT(OUT):: MODEL_VINIT(3,NUMP)
./READ.F90:      DOUBLE PRECISION, INTENT(OUT)::FIXITY2_TIME(FIXITY2_STEPS,2),FIXITY2_NONZERO_EBC(FIXITY2_STEPS,3) !GC
./READ.F90:      DOUBLE PRECISION, INTENT(OUT)::MODEL_NONZERO_EBC(3,NUMP)
./READ.F90:      DOUBLE PRECISION,INTENT(IN)::TIME_END
./READ.F90:      DOUBLE PRECISION:: BODYFORCE(3)
./READ.F90:      DOUBLE PRECISION:: D5_TEMP(5), D6_TEMP(6), D7_TEMP(7), D8_TEMP(8)
./READ.F90:      DOUBLE PRECISION:: D_TEMP, D2_TEMP(2), D3_TEMP(3), D4_TEMP(4)
./READ.F90:      DOUBLE PRECISION:: EPOISS, EYOUNG, LAMDA, MU, LAMDA_PLUS_2MU
./READ.F90:      DOUBLE PRECISION::PHI,C,PSI,PHI_RAD,PSI_RAD,SRT32,Q_PHI,K_PHI,Q_PSI
./READ.F90:      END DO
./READ.F90:      END DO
./READ.F90:      END DO
./READ.F90:      END DO
./RK.f90:                DO K = 1, MSIZE
./RK.f90:                END DO
./RK.f90:                PHI(I) = PHI(I)*WINDOW_MOD
./RK.f90:                PHI_X(I) = PHI_X(I)*WINDOW_MOD - PHI(I)*WINDOW_MOD*WINDOW_MOD*WINDOW_MOD*XMXI_OA(I)/GWIN(1,II)  ! x
./RK.f90:                PHI_Y(I) = PHI_Y(I)*WINDOW_MOD - PHI(I)*WINDOW_MOD*WINDOW_MOD*WINDOW_MOD*YMYI_OA(I)/GWIN(2,II)  ! y
./RK.f90:                PHI_Z(I) = PHI_Z(I)*WINDOW_MOD - PHI(I)*WINDOW_MOD*WINDOW_MOD*WINDOW_MOD*ZMZI_OA(I)/GWIN(3,II)  ! z
./RK.f90:                WINDOW_MOD = 1.0d0/(DSQRT(XMXI_OA(I)**2 + YMYI_OA(I)**2 + ZMZI_OA(I)**2) + 1.0E-015)
./RK.f90:            ! #TODO
./RK.f90:            DO J = 1, MSIZE
./RK.f90:            DO K = 1, MSIZE
./RK.f90:            DO K = 1,MSIZE-1
./RK.f90:            DO K = 1,MSIZE-1
./RK.f90:            DO M = 1, 6
./RK.f90:            END DO
./RK.f90:            END DO
./RK.f90:            END DO
./RK.f90:            ENDDO
./RK.f90:            ENDDO
./RK.f90:        !TODO: MAKE NORMALIZED
./RK.f90:        !TODO: MAKE NORMALIZED
./RK.f90:        !TODO: MAKE NORMALIZED
./RK.f90:        !TODO: MAKE NORMALIZED
./RK.f90:        DO I=1,LN
./RK.f90:        DO I=1,LN
./RK.f90:        DO J = 1, MSIZE
./RK.f90:        DO J = 1,MSIZE-1
./RK.f90:        DO J = 1,MSIZE-1
./RK.f90:        DO M = 1, 6
./RK.f90:        END DO
./RK.f90:        END DO
./RK.f90:        END DO
./RK.f90:        END DO
./RK.f90:        ENDDO
./RK.f90:        ENDDO
./RK.f90:    ! #TODO
./RK.f90:    ! #TODO
./RK.f90:    DO I = 1, LN
./RK.f90:    DO I=1, LN
./RK.f90:    DO I=1,LN
./RK.f90:    DO I=1,LN
./RK.f90:    DO I=1,LN
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: GCOO(3,GNUMP),GWIN(3,GNUMP)
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: GCOO(3,GNUMP),GWIN(3,GNUMP),GVOL(GNUMP)
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: GCOO(3,GNUMP),GWIN(3,GNUMP),GVOL(GNUMP),LCOO_CUURENT(3,LNMAX)
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: QL_COEF,QL_LEN
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: QL_COEF,QL_LEN
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: X(3)
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: X(3)
./RK.f90:    DOUBLE PRECISION, INTENT(IN):: X_0(3),X_t(3)
./RK.f90:    DOUBLE PRECISION, INTENT(IN)::XMXI_OA,YMYI_OA,ZMZI_OA
./RK.f90:    DOUBLE PRECISION, INTENT(IN)::XMXI_OA,YMYI_OA,ZMZI_OA
./RK.f90:    DOUBLE PRECISION, INTENT(OUT):: INVK_MATX(MSIZE-1,MSIZE-1)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT):: SHP(LNMAX)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT):: SHP(LNMAX)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT):: SHP(LNMAX)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT):: SHPD(3,LNMAX)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT)::H_FULL(MSIZE,1)
./RK.f90:    DOUBLE PRECISION, INTENT(OUT)::H_X(MSIZE,1),H_Y(MSIZE,1),H_Z(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: B(1,MSIZE),H0(1,MSIZE),C(1,1)
./RK.f90:    DOUBLE PRECISION:: B(1,MSIZE),H0(1,MSIZE),C(1,1)
./RK.f90:    DOUBLE PRECISION:: BX(1,MSIZE),H0X(1,MSIZE),CX(1,1)
./RK.f90:    DOUBLE PRECISION:: BX(1,MSIZE),H0X(1,MSIZE),CX(1,1)
./RK.f90:    DOUBLE PRECISION:: BY(1,MSIZE),H0Y(1,MSIZE),CY(1,1)
./RK.f90:    DOUBLE PRECISION:: BY(1,MSIZE),H0Y(1,MSIZE),CY(1,1)
./RK.f90:    DOUBLE PRECISION:: BZ(1,MSIZE),H0Z(1,MSIZE),CZ(1,1)
./RK.f90:    DOUBLE PRECISION:: BZ(1,MSIZE),H0Z(1,MSIZE),CZ(1,1)
./RK.f90:    DOUBLE PRECISION:: C_STAR(1,1),WINDOW_MOD
./RK.f90:    DOUBLE PRECISION:: DENOM
./RK.f90:    DOUBLE PRECISION:: DENOM
./RK.f90:    DOUBLE PRECISION:: DIA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: DRDX, DRDY, DRDZ
./RK.f90:    DOUBLE PRECISION:: DRDX, DRDY, DRDZ
./RK.f90:    DOUBLE PRECISION:: H(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL_STAR(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL_STAR(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL_STAR(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL_TEMP(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_FULL_TEMP(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_X(MSIZE,1),H_Y(MSIZE,1),H_Z(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: H_X(MSIZE,1),H_Y(MSIZE,1),H_Z(MSIZE,1)
./RK.f90:    DOUBLE PRECISION:: K_MATX(MSIZE-1,MSIZE-1)
./RK.f90:    DOUBLE PRECISION:: MINV(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: MINV(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: MINV_X(MSIZE,MSIZE),MINV_Y(MSIZE,MSIZE),MINV_Z(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: MINV_X(MSIZE,MSIZE),MINV_Y(MSIZE,MSIZE),MINV_Z(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: MINV_X1(MSIZE,MSIZE),MINV_Y1(MSIZE,MSIZE),MINV_Z1(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: MINV_X1(MSIZE,MSIZE),MINV_Y1(MSIZE,MSIZE),MINV_Z1(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_FULL(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_FULL(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_FULL_STAR(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_FULL_STAR(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_X(MSIZE,MSIZE),M_Y(MSIZE,MSIZE),M_Z(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: M_X(MSIZE,MSIZE),M_Y(MSIZE,MSIZE),M_Z(MSIZE,MSIZE)
./RK.f90:    DOUBLE PRECISION:: PHI(LNMAX)
./RK.f90:    DOUBLE PRECISION:: PHI(LNMAX)
./RK.f90:    DOUBLE PRECISION:: PHI(LNMAX)
./RK.f90:    DOUBLE PRECISION:: PHIX, PHIY, PHIZ
./RK.f90:    DOUBLE PRECISION:: PHIX, PHIY, PHIZ
./RK.f90:    DOUBLE PRECISION:: PHI_SUM,QL_PTS(3,6), QLX(3)
./RK.f90:    DOUBLE PRECISION:: PHI_SUM,QL_PTS(3,6), QLX(3)
./RK.f90:    DOUBLE PRECISION:: PHI_X(LNMAX), PHI_Y(LNMAX), PHI_Z(LNMAX), PHIX_X, PHIY_Y, PHIZ_Z
./RK.f90:    DOUBLE PRECISION:: PHI_X(LNMAX), PHI_Y(LNMAX), PHI_Z(LNMAX), PHIX_X, PHIY_Y, PHIZ_Z
./RK.f90:    DOUBLE PRECISION:: PHI_X(LNMAX), PHI_Y(LNMAX), PHI_Z(LNMAX), PHIX_X, PHIY_Y, PHIZ_Z
./RK.f90:    DOUBLE PRECISION:: S_MATX(MSIZE-1,MSIZE-1)
./RK.f90:    DOUBLE PRECISION:: TEST
./RK.f90:    DOUBLE PRECISION:: TEST
./RK.f90:    DOUBLE PRECISION:: XMXI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: XMXI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: XMXI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: XM_QLX,YM_QLY,ZM_QLZ
./RK.f90:    DOUBLE PRECISION:: XM_QLX,YM_QLY,ZM_QLZ
./RK.f90:    DOUBLE PRECISION:: YMYI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: YMYI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: YMYI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: ZMZI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: ZMZI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION:: ZMZI_OA(LNMAX)
./RK.f90:    DOUBLE PRECISION::C_STAR(1,1)
./RK.f90:    END DO
./RK.f90:    END DO
./RK.f90:    END DO
./RK.f90:    END DO
./RK.f90:    ENDDO
./ROTATE_TENSOR.F90:	  DOUBLE PRECISION, INTENT(IN):: ROT(3,3)
./ROTATE_TENSOR.F90:	  DOUBLE PRECISION, INTENT(INOUT):: VTENSOR(6)
./ROTATE_TENSOR.F90:	  DOUBLE PRECISION:: ROT_T(3,3), TENSOR(3,3)
./ROTATE_TENSOR.F90:	  DOUBLE PRECISION:: TEMP(3,3)
./ROTATE_TENSOR.F90:	  DOUBLE PRECISION:: TENSOR_ROTATED(3,3)
./STATE_INIT.f90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_COO(3,MODEL_NUMP)
./STATE_INIT.f90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_MASS(3*MODEL_NUMP)
./STATE_INIT.f90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_NONZERO_EBC(3,MODEL_NUMP)
./STATE_INIT.f90:	  DOUBLE PRECISION, INTENT(IN):: MODEL_VINIT(3,MODEL_NUMP)
./STATE_INIT.f90:          DO J=1,3
./STATE_INIT.f90:          END DO
./STATE_INIT.f90:      DO I=1, TOTAL_LOCAL_NUMP
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DX_STRAIN(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DX_STRESS(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DY_STRAIN(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DY_STRESS(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DZ_STRAIN(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::  LOCAL_DZ_STRESS(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_ACL(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_COO(3,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_COO_CURRENT(3,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_DSP(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_DSP_TOT(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_DSP_TOT_PHY(3*TOTAL_LOCAL_SIZE)      
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_FEXT(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_FINT(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_H_STRESS(6,TOTAL_LOCAL_SIZE)!GC
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_MASS(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_PRFORCE(3,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_STATE(20,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_STRAIN(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_STRAIN_EQ(TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_STRESS(6,TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_S_STRESS(6,TOTAL_LOCAL_SIZE)!GC
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_VEL(3*TOTAL_LOCAL_SIZE)
./STATE_INIT.f90:      DOUBLE PRECISION, INTENT(OUT)::LOCAL_NONZERO_EBC(3,MODEL_NUMP)
./STATE_INIT.f90:      END DO
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LN
./TEST.F90:    DO I=1, LOCAL_NUMP
./TEST.F90:    DOUBLE PRECISION :: W,X,Y,T
./TEST.F90:    DOUBLE PRECISION ::TIME_COUNTER,DLT  
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: GCOO(3,*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: GCOO(3,*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: SHP(*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: SHP(*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: SHPD(3,*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: SHPD(3,*)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: X(3)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN):: X(3)
./TEST.F90:    DOUBLE PRECISION, INTENT(IN)::LOCAL_COO(3,LOCAL_NUMP) 
./TEST.F90:    DOUBLE PRECISION, INTENT(OUT)::LOCAL_DSP(3*LOCAL_NUMP)
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TEST.F90:    END DO
./TIMERS.F90:          DOUBLE PRECISION:: REAL_TIME_REMAINING
./TIMERS.F90:          DOUBLE PRECISION:: REAL_TIME_TEMP, SIM_TIME_TEMP, SPEED
./TIMERS.F90:          DOUBLE PRECISION::SIM_TIME_1,SIM_TIME_2, TIME_END
./TIMERS.F90:          DOUBLE PRECISION::TIME, SIM_TIME_LEFT, REAL_TIME_REMAINING
./VTK_OUTPUT.F90:	    DO I=1,MODEL_NUMEL
./VTK_OUTPUT.F90:	    DO I=1,MODEL_NUMEL ! NUMBER OF ELEMENTS FOR THE BLOCK WITH THE ELE_INDEX
./VTK_OUTPUT.F90:	    END DO
./VTK_OUTPUT.F90:	    END DO
./VTK_OUTPUT.F90:	  ! WRITE A DOUBLE TO THE VTK FILE
./VTK_OUTPUT.F90:	  ! WRITE A DOUBLE TO THE VTK FILE
./VTK_OUTPUT.F90:	  ! WRITE A DOUBLE TO THE VTK FILE WITH A STACKED FORMAT FOR DOFS
./VTK_OUTPUT.F90:	  ! WRITE A DOUBLE TO THE VTK FILE WITH A STACKED FORMAT FOR DOFS
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          END DO
./VTK_OUTPUT.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'Poissons_ratio',     'double 1'
./VTK_OUTPUT.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'Youngs_modulus',     'double 1'
./VTK_OUTPUT.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'density',     'double 1'
./VTK_OUTPUT.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'nodal_mass',     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_X,     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_X,     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_Y,     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_Y,     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',  VARIABLE_NAME_Z,     'double 1'
./VTK_OUTPUT.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',  VARIABLE_NAME_Z,     'double 1'
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_x', MODEL_WIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_y', MODEL_WIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_z', MODEL_WIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      !DO NODAL MASSES
./VTK_OUTPUT.F90:      !DOUBLES SIZE (3*NUMNP)
./VTK_OUTPUT.F90:      !DOUBLES SIZE (NUMNP)
./VTK_OUTPUT.F90:      DO I=1, 9999
./VTK_OUTPUT.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT.F90:      DOUBLE PRECISION, INTENT(IN):: VARIABLE(3*MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION, INTENT(IN):: VARIABLE(MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION:: LOCAL_PRFORCE(3,MODEL_NUMP),LOCAL_STRESS(6,MODEL_NUMP),LOCAL_STRAIN(6,MODEL_NUMP), LOCAL_STRAIN_EQ(MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION:: LPROP(30)
./VTK_OUTPUT.F90:      DOUBLE PRECISION::LOCAL_CHAR_DIST(MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION::LOCAL_STATE(20,MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION::LOCAL_WAVE_VEL(MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION::MODEL_COO_CURRENT(3,MODEL_NUMP), MODEL_COO(3,MODEL_NUMP), MODEL_VINIT (3,MODEL_NUMP),MODEL_NORM_WIN(MODEL_NUMP), &
./VTK_OUTPUT.F90:      DOUBLE PRECISION::MODEL_DSP_TOT(3*MODEL_NUMP),MODEL_VEL(3*MODEL_NUMP),MODEL_ACL(3*MODEL_NUMP),MODEL_FINT(3*MODEL_NUMP), &
./VTK_OUTPUT.F90:      DOUBLE PRECISION::MODEL_PROP(30,MODEL_NUMP)
./VTK_OUTPUT.F90:      DOUBLE PRECISION::MODEL_VOL(MODEL_NUMP)
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      END DO
./VTK_OUTPUT.F90:      IF (physical_window_OUTPUT) THEN
./VTK_OUTPUT.F90:      IF(normalized_window_OUTPUT) CALL VTK_WRITE_DBL('normalized_window', MODEL_NORM_WIN, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      WRITE(VTKIOUNIT,'(A7,I10,A10)') 'POINTS ', MODEL_NUMP, 'double'
./VTK_OUTPUT.F90:      WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME,     'double 1'
./VTK_OUTPUT.F90:      WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:	    DO I=1,MODEL_NUMEL
./VTK_OUTPUT_UNFORMATTED.F90:	    DO I=1,MODEL_NUMEL ! NUMBER OF ELEMENTS FOR THE BLOCK WITH THE ELE_INDEX
./VTK_OUTPUT_UNFORMATTED.F90:	    END DO
./VTK_OUTPUT_UNFORMATTED.F90:	    END DO
./VTK_OUTPUT_UNFORMATTED.F90:	  ! WRITE A DOUBLE TO THE VTK FILE
./VTK_OUTPUT_UNFORMATTED.F90:	  ! WRITE A DOUBLE TO THE VTK FILE
./VTK_OUTPUT_UNFORMATTED.F90:	  ! WRITE A DOUBLE TO THE VTK FILE WITH A STACKED FORMAT FOR DOFS
./VTK_OUTPUT_UNFORMATTED.F90:	  ! WRITE A DOUBLE TO THE VTK FILE WITH A STACKED FORMAT FOR DOFS
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          END DO
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'Poissons_ratio',     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'Youngs_modulus',     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'density',     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(50,'(A8, A30, A10)')    'SCALARS ',   'nodal_mass',     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_X,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_X,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_Y,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME_Y,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',  VARIABLE_NAME_Z,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:          WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',  VARIABLE_NAME_Z,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_x', MODEL_WIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_y', MODEL_WIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_z', MODEL_WIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      !DO NODAL MASSES
./VTK_OUTPUT_UNFORMATTED.F90:      !DOUBLES SIZE (3*NUMNP)
./VTK_OUTPUT_UNFORMATTED.F90:      !DOUBLES SIZE (NUMNP)
./VTK_OUTPUT_UNFORMATTED.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:      DO I=1,MODEL_NUMP
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION, INTENT(IN):: VARIABLE(3*MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION, INTENT(IN):: VARIABLE(MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION:: LOCAL_PRFORCE(3,MODEL_NUMP),LOCAL_STRESS(6,MODEL_NUMP),LOCAL_STRAIN(6,MODEL_NUMP), LOCAL_STRAIN_EQ(MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION:: LPROP(30)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::LOCAL_CHAR_DIST(MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::LOCAL_STATE(20,MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::LOCAL_WAVE_VEL(MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::MODEL_COO_CURRENT(3,MODEL_NUMP), MODEL_COO(3,MODEL_NUMP), MODEL_VINIT (3,MODEL_NUMP),MODEL_NORM_WIN(MODEL_NUMP), &
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::MODEL_DSP_TOT(3*MODEL_NUMP),MODEL_VEL(3*MODEL_NUMP),MODEL_ACL(3*MODEL_NUMP),MODEL_FINT(3*MODEL_NUMP), &
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::MODEL_PROP(30,MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      DOUBLE PRECISION::MODEL_VOL(MODEL_NUMP)
./VTK_OUTPUT_UNFORMATTED.F90:      END DO
./VTK_OUTPUT_UNFORMATTED.F90:      END DO
./VTK_OUTPUT_UNFORMATTED.F90:      END DO
./VTK_OUTPUT_UNFORMATTED.F90:      END DO
./VTK_OUTPUT_UNFORMATTED.F90:      END DO
./VTK_OUTPUT_UNFORMATTED.F90:      IF (physical_window_OUTPUT) THEN
./VTK_OUTPUT_UNFORMATTED.F90:      IF(normalized_window_OUTPUT) CALL UNF_VTK_WRITE_DBL('normalized_window', MODEL_NORM_WIN, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME,     'double 1'
./VTK_OUTPUT_UNFORMATTED.F90:      WRITE(VTKIOUNIT,'(A8, A30, A10)')    'SCALARS ',   VARIABLE_NAME,     'double 1'
