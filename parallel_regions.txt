./CONTROL.F90-       LOGICAL:: LUSER_OMP_CORES
./FINT.F90-    !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP, FEXT_TEMP, &
./FINT.F90-    !$OMP                                       GINT_WORK_TEMP,GINT_WORK,GSTRAIN_EQ)
./FINT.F90-    ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT.F90:    !$OMP DO
./FINT.F90:                        END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-                ! COMPUTE SMOOTHED AREA OVER VOLUME
./FINT.F90-                !COMPUTE THE SHAPE FUNCTIONS AT GRADIENT SMOOTHING POINTS
./FINT.F90:                END DO !J = 1, 6 (COMPUTE THE SMOOTHED GRADIENTS)
./FINT.F90:                            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:                            ! END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-					! !COMPUTE GREEN'S STRAIN
./FINT.F90:            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-			! !COMPUTE THE CHANBGE IN LENGTHS OF SUPPORTS
./FINT.F90:                END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-        ID_RANK = OMP_get_thread_num()
./FINT.F90-        ID_RANK = OMP_get_thread_num()
./FINT.F90-                ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT.F90-                    ID_RANK = OMP_get_thread_num()
./FINT.F90:    !$OMP END DO
./FINT.F90-    !$OMP END PARALLEL
./FINT.F90-    !$OMP PARALLEL PRIVATE(ID_RANK) SHARED(NCORES_INPUT,GINT_WORK_TEMP)
./FINT.F90-    !$OMP PARALLEL PRIVATE(I,K,ID_RANK) SHARED(FINT_TEMP,FEXT_TEMP,NCORES_INPUT,GINT_WORK_TEMP)
./FINT.F90:    !$OMP DO
./FINT.F90:    !$OMP END DO
./FINT.F90-    !$OMP END PARALLEL
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE BULK MODULUS
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE SHEAR MODULUS
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE SHEAR MODULUS
./FINT_PD.F90-      !$OMP PARALLEL DEFAULT(FIRSTPRIVATE) SHARED( GNUMP, GCOO, GCOO_CUURENT, GWIN, GSM_LEN, GSM_VOL, GSM_AREA, GN, GSTART, &
./FINT_PD.F90-      !$OMP                                       DIM_NN_LIST, GSTACK, GSTACK_SHP, GSTACK_DSHP, GSTACK_DDSHP, GINVK, & 
./FINT_PD.F90-      !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
./FINT_PD.F90-      !$OMP                                       GSTRAIN, &
./FINT_PD.F90-      !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP)       
./FINT_PD.F90-      ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90:      !$OMP DO   
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90-      !$OMP END PARALLEL	 
./FINT_PD.F90-      !$OMP                                       GSTRAIN, &
./FINT_PD.F90-      !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP)       
./FINT_PD.F90-      ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90:      !$OMP DO   
./FINT_PD.F90-                 ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90-                 ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90-      !$OMP END PARALLEL	  
./FINT_PD.F90-      !$OMP PARALLEL PRIVATE(I,K,ID_RANK) SHARED(FINT_TEMP,NCORES_INPUT)
./FINT_PD.F90:      !$OMP DO      
./FINT_PD.F90:      !$OMP END DO
./FINT_PD.F90-      !$OMP END PARALLEL 
./HYPERELASTIC.F90-    ! USE THIS SUBROUTINE TO GET THE 2ND PK STRESS BY DEFORMATION GRADIENT FOR COMPRESSIBLE NEO-HOOKEAN MATERAIL
./INVERSE.F90-	  ! COMPUTE THE INVERSE OF A 3X3 MATRIX
./INVERSE.F90-	  !!!! COMPUTE THE INVERSE OF A 3X3 MATRIX
./MAIN.F90-            !LINIT = .FALSE.  !SET IT TO FALSE AFTER THE SHP/DSHP COMPUTATION
./MAIN.F90-        !COMPUTE THE PREDICTED CURRENT COORD FOR SEMI-LAG SHP CACULATION
./PARALLEL.F90-	  
./PARALLEL.F90-	  CASE(1)
./PARALLEL.F90-	      !
./PARALLEL.F90-	      ! SERIAL: 1-to-1 mapping exactly
./PARALLEL.F90-          !
./PARALLEL.F90:      DO I=1,LOCAL_NUMP
./PARALLEL.F90-      
./PARALLEL.F90-         MODEL_MAP(I) = I
./PARALLEL.F90-         
./PARALLEL.F90:      END DO
./PARALLEL.F90-      
./PARALLEL.F90-      
./PARALLEL.F90-	  CASE DEFAULT
./PARALLEL.F90-	      !
./PARALLEL.F90-	      !SOMETHING WENT WRONG
./PARALLEL.F90-	  !
./PARALLEL.F90-	  ! ASSIGN THE GLOBAL VALUES TO THE LOCAL VALUES
./PARALLEL.F90-	  !
./PARALLEL.F90-                       
./PARALLEL.F90-      INTEGER, INTENT(IN):: MODEL_NUMP
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_LEN(6,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_AREA(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_SM_VOL(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_WIN(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_XDIST_MAX, MODEL_YDIST_MAX, MODEL_ZDIST_MAX 
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_X_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_Y_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_Z_MOM(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_VOL(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_NSNI_FAC(3,MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_VINIT(3,MODEL_NUMP)
./PARALLEL.F90-      INTEGER, INTENT(IN):: MODEL_MAT_TYPE(MODEL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(IN):: MODEL_PROP(30,MODEL_NUMP)
./PARALLEL.F90-      INTEGER, INTENT(IN):: MODEL_BODY_ID(MODEL_NUMP)
./PARALLEL.F90-      
./PARALLEL.F90-      INTEGER, INTENT(IN):: LOCAL_NUMP
./PARALLEL.F90-      INTEGER, INTENT(IN):: MODEL_MAP(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_LEN(6,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_AREA(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_SM_VOL(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_WIN(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_XDIST_MAX, LOCAL_YDIST_MAX, LOCAL_ZDIST_MAX   
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_X_MOM(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_Y_MOM(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_Z_MOM(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_VOL(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_NSNI_FAC(3,LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_VINIT(3,LOCAL_NUMP)
./PARALLEL.F90-      INTEGER, INTENT(OUT):: LOCAL_MAT_TYPE(LOCAL_NUMP)
./PARALLEL.F90:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_PROP(30,LOCAL_NUMP)
./PARALLEL.F90-      INTEGER, INTENT(OUT):: LOCAL_BODY_ID(LOCAL_NUMP)
./PARALLEL.F90-      
./PARALLEL.F90-      
./PARALLEL.F90-      
./PARALLEL.F90-      
./PARALLEL.F90-      INTEGER:: I, II
./PARALLEL.F90-      
./PARALLEL.F90:      DO I = 1, LOCAL_NUMP
./PARALLEL.F90-      
./PARALLEL.F90-          II = MODEL_MAP(I)
./PARALLEL.F90-      
./PARALLEL.F90-          LOCAL_SM_LEN(1:6,I) = MODEL_SM_LEN(1:6,II)
./PARALLEL.F90-          LOCAL_SM_AREA(1:3,I) = MODEL_SM_AREA(1:3,II)
./PARALLEL.F90-          
./PARALLEL.F90-          LOCAL_X_MOM(I) = MODEL_X_MOM(II) 
./PARALLEL.F90-          LOCAL_Y_MOM(I) = MODEL_Y_MOM(II)           
./PARALLEL.F90-          LOCAL_Z_MOM(I) = MODEL_Z_MOM(II)           
./PARALLEL.F90-      
./PARALLEL.F90:      END DO
./PARALLEL.F90-      
./PARALLEL.F90-      LOCAL_XDIST_MAX = MODEL_XDIST_MAX
./PARALLEL.F90-      LOCAL_YDIST_MAX = MODEL_YDIST_MAX
./PARALLEL.F90-      LOCAL_ZDIST_MAX = MODEL_ZDIST_MAX
./PARALLEL.F90-      
./PRE_CONTROL.F90-				READ_NODE_SEARCH_PARAMETERS,READ_PERIODIC_SEARCH,COMPOSITE
./PRE_CONTROL.F90-	  INTEGER:: IAUTO_TS, IPERIDYNAMICS, SHSUPT, ICOMPOSITE
./PRE_CONTROL.F90-      INTEGER, ALLOCATABLE:: MAT_ID_COMPOSITE(:)
./PRE_CONTROL.F90-	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 6',2)
./PRE_CONTROL.F90-      IF (COMPOSITE) THEN
./PRE_CONTROL.F90-          ALLOCATE(MAT_ID_COMPOSITE(MODEL_NUMP))
./PRE_CONTROL.F90-          MAT_ID_COMPOSITE(I) = MIM(1)
./PRE_CONTROL.F90-                    MAT_ID_COMPOSITE(I) = MIM(J)
./PRE_CONTROL.F90-            IF (MAT_ID_COMPOSITE(I).EQ.1) THEN
./PRE_MODEL_ADIAL.F90-    !TEMPORARY VARIABLES FOR COMPUTING DILATIONS
./PRE_MODEL_VOLUMES.F90-    !LOOP OVER ELEMENTS, COMPUTE VOLUMES
./PRE_MODEL_VOLUMES_HEX.F90-    !LOOP OVER ELEMENTS, COMPUTE VOLUMES
./PRE_OMP.F90-			  END IF
./PRE_OMP.F90-	    END IF
./PRE_OMP.F90-	  END IF
./PRE_OMP.F90-	  
./PRE_OMP.F90-	  IF (.NOT.LUSER_OMP_CORES) THEN
./PRE_OMP.F90:	    !DONT USE OMP
./PRE_OMP.F90-		CALL OMP_set_num_threads(1)
./PRE_OMP.F90-        NCORES_INPUT = 1
./PRE_OMP.F90-	  END IF
./PRE_OMP.F90-	  
./PRE_OMP.F90-	  RETURN
