./ASSEMBLER.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./ASSEMBLER.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./ASSEMBLER.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./ASSEMBLER.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./ASSEMBLER.F90:	  SUBROUTINE ASSEMBLER(NUMP,FINT,HPC_SCHEME)
./ASSEMBLER.F90:      END SUBROUTINE
./ASSEMBLER.F90:      END SUBROUTINE
./ASSEMBLER.F90:      subroutine OUTPUT_ASSEMBLER(HPC_SCHEME, LOCAL_NUMP, MODEL_NUMP, TOTAL_MODEL_MAP, &
./ASSIGN_TO_NODE.f90:            END SUBROUTINE
./ASSIGN_TO_NODE.f90:            END SUBROUTINE
./ASSIGN_TO_NODE.f90:            SUBROUTINE ASSIGN_DBL_VALUE_TO_NODE( EXISTING_VAL,TRIAL_VAL,EXIT_STRING)
./ASSIGN_TO_NODE.f90:            SUBROUTINE ASSIGN_INT_VALUE_TO_NODE( EXISTING_VAL,TRIAL_VAL,EXIT_STRING)
./BIN_SEARCH.F90:    ! FUNCTION OF THIS SUBROUTINE:
./BIN_SEARCH.F90:    END SUBROUTINE
./BIN_SEARCH.F90:    END SUBROUTINE
./BIN_SEARCH.F90:    END SUBROUTINE
./BIN_SEARCH.F90:    SUBROUTINE BIN_INODE(IP,INODE,NODE_NO, &
./BIN_SEARCH.F90:    SUBROUTINE GET_BINS(NP,XYZ_POS,NODES_IN_BIN,MAX_NEIGH,NODELIST_IN_BIN, &
./BIN_SEARCH.F90:    SUBROUTINE SOFT_SEARCH(GNUMP,GCOO,GN,GSTART,DIM_NN_LIST,GSTACK,GMAXN, GWIN, &
./BOUNDARY.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./BOUNDARY.F90:	  END SUBROUTINE
./BOUNDARY.F90:      SUBROUTINE BOUNDARY(NUMP,FRC,ACL,VEL,DSP,MODEL_EBC)
./CONSTITUTE_DRUCKPRAG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CONSTITUTE_DRUCKPRAG.F90:	  END SUBROUTINE
./CONSTITUTE_DRUCKPRAG.F90:      SUBROUTINE DRUCK_PRAG(STRESS, TOTAL_STRAIN, INC_STRAIN, STRESS_PREDICT, STATE, PROPS)
./CONSTITUTE_DRUCKPRAG.F90:      USE FINT_FUNCTIONS
./CONSTITUTE_VISCOELASTIC.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CONSTITUTE_VISCOELASTIC.F90:	  END SUBROUTINE
./CONSTITUTE_VISCOELASTIC.F90:      SUBROUTINE VISCO_ELASTIC( PROPS, DLT, FMAT, & ! IN
./CONSTITUTE_VISCOELASTIC.F90:      USE FINT_FUNCTIONS
./CONSTITUTE_VONMISES.F90:	  ! CHECK THE YEILD FUNCTION
./CONSTITUTE_VONMISES.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CONSTITUTE_VONMISES.F90:	  END SUBROUTINE
./CONSTITUTE_VONMISES.F90:      SUBROUTINE VON_MISES(STRESS, STRAIN, STRESS_PREDICT, STATE, PROPS)
./CONSTITUTE_VONMISES.F90:      USE FINT_FUNCTIONS
./CONSTITUTE_VONMISES_DAM.F90:	  ! CHECK THE YEILD FUNCTION
./CONSTITUTE_VONMISES_DAM.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CONSTITUTE_VONMISES_DAM.F90:	  END SUBROUTINE
./CONSTITUTE_VONMISES_DAM.F90:      SUBROUTINE VON_MISES_DAM(STRESS, TOTAL_STRAIN, INC_STRAIN, STRESS_PREDICT, STATE, PROPS)
./CONSTITUTE_VONMISES_DAM.F90:      USE FINT_FUNCTIONS
./CONSTITUTION.F90:		  CALL EXIT_PROGRAM('INVALID MATERIAL TYPE IN SUBROUTINE CONSTITUTION',1)
./CONSTITUTION.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CONSTITUTION.F90:	  SUBROUTINE CONSTITUTION(LSTRESS_PREDICTOR, LMAT_TYPE, LSTRAIN, STRAIN, LPROP, DLT, FMAT, & !IN
./CONSTITUTION.F90:      END SUBROUTINE
./CONTROL.F90:	  ! FUNCTION OF THIS LOGIC:
./CORRECTOR.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./CORRECTOR.F90:	  END SUBROUTINE
./CORRECTOR.F90:      SUBROUTINE CORRECTOR(NUMP,VEL,ACL,DLT)
./DETERMINANT.F90:    END SUBROUTINE
./DETERMINANT.F90:    SUBROUTINE DETERMINANT(A,DET)
./ECHO_CONTROL.F90:	  ! FUNCTION OF THIS LOGIC:
./ECHO_CONTROL.F90:	  SUBROUTINE ECHO_CONTROL
./ECHO_CONTROL.F90:      END SUBROUTINE
./ECHO_MODEL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./ECHO_MODEL.F90:	  SUBROUTINE ECHO_MODEL(MODEL_WIN,MODEL_VOL,MODEL_NUMP,MODEL_NUMEL,MODEL_ELCON,MODEL_COO, &
./ECHO_MODEL.F90:      END SUBROUTINE
./EOM.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./EOM.F90:	  END SUBROUTINE
./EOM.F90:      SUBROUTINE EOM(NUMP,FINT,FEXT,MASS,ACL)
./ESTIMATE_MODULI.F90:	    END SUBROUTINE
./ESTIMATE_MODULI.F90:	  ! FUNCTION OF THIS LOGIC:
./ESTIMATE_MODULI.F90:      SUBROUTINE ESTIMATE_MODULI(STRESS_INC,STRAIN_INC,SHEAR_TRIAL,BULK_TRIAL, &
./ESTIMATE_MODULI.F90:      USE FINT_FUNCTIONS
./EXIT_PROGRAM.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./EXIT_PROGRAM.F90:	  END SUBROUTINE
./EXIT_PROGRAM.F90:      SUBROUTINE EXIT_PROGRAM(REASON,ITYPE)
./FINT.F90:                !COMPUTE THE SHAPE FUNCTIONS AT GRADIENT SMOOTHING POINTS
./FINT.F90:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT.F90:        !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT.F90:    ! FUNCTION OF THIS SUBROUTINE:
./FINT.F90:    DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT.F90:    DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90:    DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT.F90:    END SUBROUTINE
./FINT.F90:    SUBROUTINE CONSTRUCT_FINT(GWIN,    GVOL,       GNUMP,        GCOO,  GCOO_CUURENT,   &   !FROM MAIN
./FINT.F90:    USE FINT_FUNCTIONS
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  ! FUNCTION OF THIS FUNCTION:
./FINT_FUNCTIONS.F90:	  DOUBLE PRECISION FUNCTION FORM_CMAT(LPROP)
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:	  END FUNCTION
./FINT_FUNCTIONS.F90:       MODULE FINT_FUNCTIONS
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION BULK_MOD(YOUNG,POISS)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION DEV_PROJ(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION J2(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION LAMDA_MOD(BULK,SHEAR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION SHEAR_MOD(YOUNG,POISS)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION SPHR_PROJ(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_2_VTENSOR(TENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_NORM(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION TENSOR_NORM_STRAIN(VTENSOR)
./FINT_FUNCTIONS.F90:      DOUBLE PRECISION FUNCTION VTENSOR_2_TENSOR(VTENSOR)
./FINT_PD.F90:		          GSTACK_SHP(LSTART+J-1) = SHP(J)  !STORES THE INFLUENCE FUNCTION
./FINT_PD.F90:		          GSTACK_SHP(LSTART+J-1) = SHP(J)  !STORES THE INFLUENCE FUNCTION
./FINT_PD.F90:		  !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT_PD.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./FINT_PD.F90:	  DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90:	  DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT_PD.F90:	  END SUBROUTINE
./FINT_PD.F90:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT_PD.F90:      SUBROUTINE CONSTRUCT_FINT_PD(GWIN,    GVOL,       GNUMP,        GCOO,  GCOO_CUURENT,   &   !FROM MAIN
./FINT_PD.F90:      USE FINT_FUNCTIONS
./GET_NUM_PROP.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./GET_NUM_PROP.F90:    END SUBROUTINE
./GET_NUM_PROP.F90:    SUBROUTINE GET_NUM_PROP(MAT_TYPE,NUM_PROP)
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./GHOST.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./GHOST.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./GHOST.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./GHOST.F90:      END SUBROUTINE
./GHOST.F90:      END SUBROUTINE
./GHOST.F90:      END SUBROUTINE
./GHOST.F90:    SUBROUTINE GHOSTER(HPC_SCHEME)
./GHOST.F90:    SUBROUTINE GHOST_INIT(HPC_SCHEME, LOCAL_NUMP, GHOST_NUMP, LOCAL_GHOST)
./GHOST.F90:    SUBROUTINE GHOST_INIT_MAP(HPC_SCHEME, GHOST_NUMP, LOCAL_NUMP, TOTAL_MODEL_MAP)
./HANDELER.F90:      END SUBROUTINE
./HANDELER.F90:      SUBROUTINE HANDELER(GWIN,    GVOL,      GNUMP,     GCOO,      GCOO_CUURENT,      &   !FROM MAIN
./HARD_SEARCH.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./HARD_SEARCH.F90:     END SUBROUTINE
./HARD_SEARCH.F90:    SUBROUTINE HARD_SEARCH(GNUMP,GCOO,GN,GSTART,DIM_NN_LIST,GSTACK,GMAXN, GWIN, GXDIST_MAX, GYDIST_MAX, GZDIST_MAX)
./HUGHES_WINGET.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./HUGHES_WINGET.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./HUGHES_WINGET.F90:	  END SUBROUTINE
./HUGHES_WINGET.F90:	  END SUBROUTINE
./HUGHES_WINGET.F90:	  SUBROUTINE D_HUGHES_WINGET(LMAT,DLMAT, & !IN
./HUGHES_WINGET.F90:	  SUBROUTINE HUGHES_WINGET(LMAT, & !IN
./HUGHES_WINGET.F90:      USE FINT_FUNCTIONS
./HUGHES_WINGET.F90:      USE FINT_FUNCTIONS
./HYPERELASTIC.F90:    ! USE THIS SUBROUTINE TO GET THE 2ND PK STRESS BY DEFORMATION GRADIENT FOR COMPRESSIBLE NEO-HOOKEAN MATERAIL
./HYPERELASTIC.F90:    END SUBROUTINE
./HYPERELASTIC.F90:    END SUBROUTINE
./HYPERELASTIC.F90:    SUBROUTINE HYPERELASTIC(LPROP,LSTRESS,FTEN,LSTRAIN)
./HYPERELASTIC.F90:    SUBROUTINE SPK2CAUCHY(LSTRESSTEN,DET,FTEN,FT)
./HYPERELASTIC.F90:    USE FINT_FUNCTIONS
./INVERSE.F90:		END SUBROUTINE
./INVERSE.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./INVERSE.F90:	  !!!! FUNCTION OF THIS SUBROUTINE:
./INVERSE.F90:	SUBROUTINE INVERSE(A,N, AINV)
./INVERSE.F90:      ! THIS SUBROUTINE HAS BUG, COMMENTED, USE  INVERSE()
./INVERSE.F90:      END SUBROUTINE
./INVERSE.F90:      END SUBROUTINE
./INVERSE.F90:      SUBROUTINE INV3 (A, AINV)
./INVERSE.F90:      SUBROUTINE M44INV (A, AINV)
./INVERSE.F90:   !!!   END SUBROUTINE
./INVERSE.F90:   !!!   SUBROUTINE DET3 (A, DET)
./KERNEL.F90:       SUBROUTINE MLS_KERNEL0(XSA,AJ,ISPLINE,      & !INPUT
./KERNEL.F90:      END SUBROUTINE
./KERNEL.F90:      SUBROUTINE FACTI(INTEG,FACT_INTEG)
./KERNEL.F90:    END SUBROUTINE
./LOG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./LOG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./LOG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./LOG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./LOG.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./LOG.F90:	  END SUBROUTINE
./LOG.F90:	  END SUBROUTINE
./LOG.F90:	  END SUBROUTINE
./LOG.F90:	  END SUBROUTINE
./LOG.F90:	  END SUBROUTINE
./LOG.F90:	 END SUBROUTINE
./LOG.F90:      SUBROUTINE WARN(STRING_LINE)
./LOG.F90:     SUBROUTINE LOG_APPEND(STRING_LINE)
./LOG.F90:     SUBROUTINE LOG_APPEND_SPACE(STRING_LINE)
./LOG.F90:     SUBROUTINE LOG_HEADER
./LOG.F90:     SUBROUTINE STRONG_WARN(STRING_LINE)
./LOG.F90:     SUBROUTINE WRITE_OUT(STRING_LINE)
./MAIN.F90:            ! CALL THE SUBROUTINE TO OUTPUT TO THE EXODUS FILE
./MAIN.F90:            ! CALL THE SUBROUTINE TO OUTPUT TO THE VTK FILE
./MAIN.F90:        ! ASSIGN NEW GHOSTS (RIGHT NOW, THIS SUBROUTINE DOES NOTHING)
./PARALLEL.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./PARALLEL.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./PARALLEL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PARALLEL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PARALLEL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PARALLEL.F90:      END SUBROUTINE
./PARALLEL.F90:      END SUBROUTINE
./PARALLEL.F90:      END SUBROUTINE
./PARALLEL.F90:    SUBROUTINE ASSIGN_PARALLEL(HPC_SCHEME,MODEL_NUMP,LOCAL_NUMP)
./PARALLEL.F90:    SUBROUTINE ASSIGN_PARALLEL_MAP(HPC_SCHEME,MODEL_NUMP,LOCAL_NUMP,MODEL_MAP)
./PARALLEL.F90:    SUBROUTINE PARALLEL_MODEL(MODEL_NUMP,   LOCAL_NUMP,   MODEL_MAP,                                     &
./PREDICTOR.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PREDICTOR.F90:	  END SUBROUTINE
./PREDICTOR.F90:      SUBROUTINE PREDICTOR(TOTAL_LOCAL_SIZE,ACL,VEL,DSP,DLT)
./PRE_CONTROL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_CONTROL.F90:	  END SUBROUTINE
./PRE_CONTROL.F90:      SUBROUTINE PRE_CONTROL
./PRE_MODEL.F90:	  END SUBROUTINE
./PRE_MODEL.F90:      SUBROUTINE PRE_MODEL
./PRE_MODEL_ADIAL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_ADIAL.F90:	  ! GENERATE THE WINDOW FUNCTIONS (NORMALIZED TO ONE)
./PRE_MODEL_ADIAL.F90:    END SUBROUTINE
./PRE_MODEL_ADIAL.F90:    SUBROUTINE GET_ADIAL(ADIAL,NUMPTS,NUMELS,IDELM,XYZ,MODEL_TYPEL_BLOCKS,MODEL_ELBID)
./PRE_MODEL_COUNT.f90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_COUNT.f90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_COUNT.f90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_COUNT.f90:	  END SUBROUTINE
./PRE_MODEL_COUNT.f90:	  END SUBROUTINE
./PRE_MODEL_COUNT.f90:	  END SUBROUTINE
./PRE_MODEL_COUNT.f90:      SUBROUTINE COUNT_ELEMENTS(MODEL_FILE, & !IN
./PRE_MODEL_COUNT.f90:      SUBROUTINE COUNT_NODES(MODEL_FILE, & !IN
./PRE_MODEL_COUNT.f90:      SUBROUTINE COUNT_NODE_SETS(MODEL_FILE, & !IN
./PRE_MODEL_COUNT.f90:  !GC: FUNCTION OF THIS SUBROUTINE: READ IN THE NUMBER OF STEPS FOR FIXITY 2
./PRE_MODEL_COUNT.f90:END SUBROUTINE
./PRE_MODEL_COUNT.f90:SUBROUTINE COUNT_FIXITY2_STEPS(MODEL_FILE, &! IN
./PRE_MODEL_SECOND_MOMENT.F90:      END SUBROUTINE
./PRE_MODEL_SECOND_MOMENT.F90:      SUBROUTINE SECOND_MOMENT(VOL,NUMP,COO,WIN, &   !IN
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      END SUBROUTINE
./PRE_MODEL_SMOOTHING_LENGTHS.F90:      SUBROUTINE GET_SMOOTHING_LENGTHS(VOL,NUMP,COO,WIN, &   !IN
./PRE_MODEL_TET_IDS.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_TET_IDS.F90:    END SUBROUTINE
./PRE_MODEL_TET_IDS.F90:    SUBROUTINE  GET_TET_IDS(T)
./PRE_MODEL_VOL.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_VOL.F90:    END SUBROUTINE
./PRE_MODEL_VOL.F90:    SUBROUTINE GET_VOL(DVOL,XYZEL,T)
./PRE_MODEL_VOL1.f90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_VOL1.f90:    END SUBROUTINE
./PRE_MODEL_VOL1.f90:    SUBROUTINE GET_VOL1(DVOL,XYZEL)
./PRE_MODEL_VOL2.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_VOL2.F90:    END SUBROUTINE
./PRE_MODEL_VOL2.F90:    SUBROUTINE GET_VOL2(DVOL,XYZEL)
./PRE_MODEL_VOLUMES.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_VOLUMES.F90:    END SUBROUTINE
./PRE_MODEL_VOLUMES.F90:    SUBROUTINE GET_VOLUMES(VOLUME,NUMPTS,NUMELS,IDELM,XYZ,MODEL_TYPEL_BLOCKS,MODEL_ELBID)
./PRE_MODEL_VOLUMES_HEX.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./PRE_MODEL_VOLUMES_HEX.F90:    END SUBROUTINE
./PRE_MODEL_VOLUMES_HEX.F90:    SUBROUTINE GET_VOLUMES_HEX(VOLUME,NUMPTS,NUMELS,IDELM,XYZ)
./PRE_OMP.F90:	  END SUBROUTINE
./PRE_OMP.F90:      SUBROUTINE PRE_OMP
./PRINT.F90:	 END SUBROUTINE
./PRINT.F90:     SUBROUTINE PRINT_OPENING
./READ.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./READ.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./READ.F90:	  END SUBROUTINE
./READ.F90:          END SUBROUTINE
./READ.F90:          SUBROUTINE READ_SET_NO(FID,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,CARD)
./READ.F90:      SUBROUTINE READ_CONTROL(NUMP,MODEL_NODE_SET_LIST,MODEL_NODE_SET_LENGTH, &
./RK.f90:        ! STORE INFLUENCE FUNCTION INTO SHP
./RK.f90:    ! Derivative H function
./RK.f90:    ! THIS SUBROUTINE IS TO FORM THE DEFORMED SHAPE TENSOR FOR PERIDYNAMICS AT THE FIRST STEP
./RK.f90:    ! THIS SUBROUTINE IS TO FORM THE UNDEFORMED SHAPE TENSOR FOR PERIDYNAMICS AT THE FIRST STEP
./RK.f90:    !DEBUG SUBROUTINE
./RK.f90:    END SUBROUTINE
./RK.f90:    END SUBROUTINE
./RK.f90:    END SUBROUTINE
./RK.f90:    END SUBROUTINE
./RK.f90:    END SUBROUTINE
./RK.f90:    SUBROUTINE DERIV_H(XMXI_OA,YMYI_OA,ZMZI_OA,MSIZE,DEG,H_X,H_Y,H_Z)
./RK.f90:    SUBROUTINE DFM_SHAPE_TENSOR(X_0,X_t, DEG, MSIZE, CONT, GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, LNMAX,  &
./RK.f90:    SUBROUTINE FILL_H(XMXI_OA,YMYI_OA,ZMZI_OA,MSIZE,DEG,H_FULL)
./RK.f90:    SUBROUTINE RK1(X, DEG, MSIZE, CONT, IMPL, GCOO, GWIN, GNUMP, LSTACK, LN, LNMAX, EBCS,SELF_EBC, &
./RK.f90:    SUBROUTINE UDFM_SHAPE_TENSOR(X, DEG, MSIZE, CONT, IMPL, GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, LNMAX, EBCS,SELF_EBC, &
./ROTATE_TENSOR.F90:	  ! FUNCTION OF THIS SUBROUTINE:
./ROTATE_TENSOR.F90:	  END SUBROUTINE
./ROTATE_TENSOR.F90:      SUBROUTINE ROTATE_TENSOR(ROT,VTENSOR)
./ROTATE_TENSOR.F90:      USE FINT_FUNCTIONS
./STATE_INIT.f90:	  ! FUNCTION OF THIS SUBROUTINE:
./STATE_INIT.f90:      END SUBROUTINE
./STATE_INIT.f90:    SUBROUTINE STATE_FEILD_INIT(TOTAL_LOCAL_SIZE,TOTAL_LOCAL_NUMP, LOCAL_NUMP, MODEL_NUMP, MODEL_VINIT, TOTAL_MODEL_MAP, MODEL_COO,MODEL_MASS,MODEL_EBC, &
./TEST.F90:    END SUBROUTINE
./TEST.F90:    END SUBROUTINE
./TEST.F90:    END SUBROUTINE
./TEST.F90:    SUBROUTINE ROTATION_TEST(LOCAL_DSP,LOCAL_COO,LOCAL_NUMP,TIME_COUNTER,DLT)
./TEST.F90:    SUBROUTINE TESTER(X,SHP,SHPD,LN,LSTACK,GCOO)
./TEST.F90:    SUBROUTINE TESTERX(X,SHP,SHPD,LN,LSTACK,GCOO)
./TIMERS.F90:	      ! FUNCTION OF THIS LOGIC:
./TIMERS.F90:	      ! FUNCTION OF THIS LOGIC:
./TIMERS.F90:            SUBROUTINE MAKE_CTIME(CTIME_ALL,REAL_TIME_REMAINING,TIMER_FLAG)
./TIMERS.F90:          END SUBROUTINE
./TIMERS.F90:          END SUBROUTINE
./TIMERS.F90:          SUBROUTINE EST_TIME(NCORES_INPUT,TIMER_STEPS,SIM_TIME_1,SIM_TIME_2, &
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      END SUBROUTINE
./VTK_OUTPUT.F90:      SUBROUTINE CLEAN_VTKS
./VTK_OUTPUT.F90:      SUBROUTINE MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE OUTPUT_STEP_VTK(exodusStep,MODEL_NUMP,MODEL_NUMEL, MODEL_ELCON,MODEL_COO_CURRENT,MODEL_NODE_IDS,MODEL_DSP_TOT,MODEL_VEL,MODEL_ACL,MODEL_FINT, &
./VTK_OUTPUT.F90:      SUBROUTINE START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE VTK_OUTPUT_HEADER(VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE VTK_WRITE_DBL(VARIABLE_NAME, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE VTK_WRITE_DBL_THREE(VARIABLE_NAME_X,VARIABLE_NAME_Y,VARIABLE_NAME_Z, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE VTK_WRITE_INT(VARIABLE_NAME, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT.F90:      SUBROUTINE VTK_WRITE_INT_THREE(VARIABLE_NAME_X,VARIABLE_NAME_Y,VARIABLE_NAME_Z, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT_UNFORMATTED.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT_UNFORMATTED.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT_UNFORMATTED.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT_UNFORMATTED.F90:	  ! FUNCTION OF THIS LOGIC:
./VTK_OUTPUT_UNFORMATTED.F90:      END SUBROUTINE
./VTK_OUTPUT_UNFORMATTED.F90:      END SUBROUTINE
./VTK_OUTPUT_UNFORMATTED.F90:      END SUBROUTINE
./VTK_OUTPUT_UNFORMATTED.F90:      END SUBROUTINE
./VTK_OUTPUT_UNFORMATTED.F90:      END SUBROUTINE
./VTK_OUTPUT_UNFORMATTED.F90:      SUBROUTINE UNF_OUTPUT_STEP_VTK(exodusStep,MODEL_NUMP,MODEL_NUMEL, MODEL_ELCON,MODEL_COO_CURRENT,MODEL_NODE_IDS,MODEL_DSP_TOT,MODEL_VEL,MODEL_ACL,MODEL_FINT, &
./VTK_OUTPUT_UNFORMATTED.F90:      SUBROUTINE UNF_VTK_WRITE_DBL(VARIABLE_NAME, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      SUBROUTINE UNF_VTK_WRITE_DBL_THREE(VARIABLE_NAME_X,VARIABLE_NAME_Y,VARIABLE_NAME_Z, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      SUBROUTINE UNF_VTK_WRITE_INT(VARIABLE_NAME, VARIABLE, MODEL_NUMP, VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      SUBROUTINE UNF_VTK_WRITE_INT_THREE(VARIABLE_NAME_X,VARIABLE_NAME_Y,VARIABLE_NAME_Z, VARIABLE, MODEL_NUMP, VTKIOUNIT)
