./FINT.F90-48-    !
./FINT.F90-49-    !
./FINT.F90-50-    !********** GLOBAL VARIABLES **********
./FINT.F90-51-    !
./FINT.F90-52-    !GLOBAL IN
./FINT.F90-53-    !
./FINT.F90-54-    !
./FINT.F90-55-    !DISCRETIZATION INFO
./FINT.F90-56-    !
./FINT.F90-57-    INTEGER:: GNUMP                         !NUMBER OF NODES
./FINT.F90:58:    DOUBLE PRECISION:: GCOO(3,GNUMP)        !COORDINATE FOR EACH NODE
./FINT.F90:59:    DOUBLE PRECISION:: GCOO_CUURENT(3,GNUMP) !CUURENT COORDINATE FOR EACH NODE
./FINT.F90:60:    DOUBLE PRECISION:: GWIN(3,GNUMP)        !WINDOWS FOR EACH NODE
./FINT.F90:61:	DOUBLE PRECISION, SAVE, ALLOCATABLE:: GWIN0(:,:)
./FINT.F90-62-	
./FINT.F90:63:    DOUBLE PRECISION:: GSM_LEN(6,GNUMP)     !SMOOTHING LENGTHS FOR EACH NODE
./FINT.F90-64-    ! (1-6) = (+X, -X, +Y, -Y, +Z, -Z)
./FINT.F90:65:    DOUBLE PRECISION:: GSM_VOL(GNUMP)       !VOLUME OF SMOOTHING ZONE
./FINT.F90:66:    DOUBLE PRECISION:: GSM_AREA(3,GNUMP)    !AREAS OF SMOOTHING ZONE SIDES
./FINT.F90-67-    INTEGER:: GN(GNUMP)                     !NUMBER OF NEIGHBORS FOR EACH NODE
./FINT.F90-68-    INTEGER:: GSTART(GNUMP)                 !START LOCATION OF NODE NEIOGHBORS IN STACK
./FINT.F90-69-    INTEGER:: DIM_NN_LIST                   !SIZE OF NEIGHBOR STACK
./FINT.F90-70-    INTEGER:: GSTACK(DIM_NN_LIST)           !NEIGHBORS FOR EACH NODE (STACKED)
./FINT.F90:71:    DOUBLE PRECISION:: GSTACK_SHP(DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:72:    DOUBLE PRECISION:: GSTACK_DSHP(3,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:73:    DOUBLE PRECISION:: GSTACK_DDSHP(6,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT.F90:74:    DOUBLE PRECISION:: GINVK(3,3,GNUMP)
./FINT.F90-75-
./FINT.F90:76:    DOUBLE PRECISION:: GCHAR_DIST(GNUMP),   GMAX_WVEL(GNUMP)
./FINT.F90-77-
./FINT.F90-78-    INTEGER:: GMAXN                             !MAX NUMBER OF NEIGHBORS FOR ALL NODES
./FINT.F90-79-    INTEGER:: GGHOST(GNUMP)                 !FLAG FOR GHOST NODES (GHOST = 1)
./FINT.F90-80-
./FINT.F90-81-    LOGICAL:: GEBC_NODES(GNUMP)
./FINT.F90-82-
./FINT.F90:83:    DOUBLE PRECISION:: GVOL(GNUMP)          !VOLUME OF EACH NODE
./FINT.F90:84:    DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
./FINT.F90-85-
./FINT.F90-86-    !
./FINT.F90-87-    !STATE AND FIELD VARIABLES
./FINT.F90-88-    !
./FINT.F90:89:    DOUBLE PRECISION:: GSTRESS(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT.F90:90:    DOUBLE PRECISION:: GSTRAIN(6,GNUMP)     !CAUCHY STRAIN OF EACH NODE
./FINT.F90:91:    DOUBLE PRECISION:: GSTATE(20,GNUMP)     !STATE VARIABLES OF EACH NODE
./FINT.F90:92:    DOUBLE PRECISION:: GPROP(30,GNUMP)     !MATERIAL PROPERTIES OF EACH NODE
./FINT.F90:93:    DOUBLE PRECISION:: GDINC(3*GNUMP) ,GDINC_TOT(3*GNUMP)      !DISPLACEMENT INCREMENT (PREDICTOR) OF EACH NODE
./FINT.F90-94-    INTEGER::          GMAT_TYPE(GNUMP)    !MATERIAL TYPE OF EACH NODE
./FINT.F90:95:    DOUBLE PRECISION:: G_H_STRESS(6,GNUMP)!GC
./FINT.F90:96:    DOUBLE PRECISION:: G_S_STRESS(6,GNUMP)!GC
./FINT.F90:97:    DOUBLE PRECISION:: DLT
./FINT.F90-98-    !
./FINT.F90-99-    !GLOBAL OUT
./FINT.F90:100:    DOUBLE PRECISION:: FINT(GNUMP*3), FEXT(GNUMP*3)
./FINT.F90:101:    DOUBLE PRECISION:: DLT_FINT
./FINT.F90-102-    
./FINT.F90:103:    DOUBLE PRECISION:: GSTRAIN_EQ(GNUMP)     !EQUIVALENT PLASTIC STARIN OF EACH NODE
./FINT.F90-104-    !
./FINT.F90-105-    !********** LOCAL VARIABLES **********
./FINT.F90-106-    INTEGER:: I,J,K,L,JJ               !INDICIES
./FINT.F90:107:    DOUBLE PRECISION:: LCOO(3)    !COORDINATE AT A NODE IN INITIAL CONFIGURATION
./FINT.F90:108:    DOUBLE PRECISION:: LCOO_T(3)    !COORDINATE AT A NODE IN CURRENT CONFIGURATION
./FINT.F90:109:    DOUBLE PRECISION:: LWIN(3) !WINDOW A NODE
./FINT.F90:110:    DOUBLE PRECISION:: VOL !NODAL VOLUME (ACTUAL INTEGRATION WEIGHT
./FINT.F90:111:    DOUBLE PRECISION:: LSM_LEN(6)  !SMOOTHING LENGTHS A NODE
./FINT.F90:112:    DOUBLE PRECISION:: LSM_PTS(3,6)  !SMOOTHING POINT POSITION
./FINT.F90:113:    DOUBLE PRECISION:: SM_COO(3)     !TEMPORARY SMOOTHING POINT POSITION
./FINT.F90:114:    DOUBLE PRECISION:: LSM_VOL       !VOLUME OF SMOOTHING ZONE
./FINT.F90:115:    DOUBLE PRECISION:: LSM_AOV(6)   !AREA OVER VOLUME OF SMOOTHING ZONE SIDES/ZONES
./FINT.F90:116:    DOUBLE PRECISION:: LSTRESS(6)     !CAUCHY STRESS OF A NODE
./FINT.F90:117:    DOUBLE PRECISION:: LSTRESS_PREDICTOR(6)     !ELASTIC PREDICTOR STRESS
./FINT.F90:118:    DOUBLE PRECISION:: LSTRAIN(6)
./FINT.F90:119:    DOUBLE PRECISION:: L_H_STRESS(6)!GC: FOR VISCOELASTIC
./FINT.F90:120:    DOUBLE PRECISION:: L_S_STRESS(6)!GC
./FINT.F90-121-
./FINT.F90-122-
./FINT.F90:123:    DOUBLE PRECISION:: G_X_MOM(GNUMP),G_Y_MOM(GNUMP),G_Z_MOM(GNUMP)
./FINT.F90-124-
./FINT.F90-125-
./FINT.F90:126:    DOUBLE PRECISION:: LSTATE(20)      !STATE VARIABLES OF A NODE
./FINT.F90:127:    DOUBLE PRECISION:: LPROP(30)     !MATERIAL PROPERTIES OF A NODE
./FINT.F90-128-    INTEGER:: LMAT_TYPE    !MATERIAL TYPE OF EACH NODE
./FINT.F90-129-    LOGICAL:: SELF_EBC
./FINT.F90-130-    !
./FINT.F90-131-    INTEGER:: LSTART              !LOCATION OF START IN STACK
./FINT.F90-132-    INTEGER:: LGHOST              !FLAG FOR GHOST NODES (GHOST = 1)
./FINT.F90-133-    INTEGER:: LSTACK(GMAXN)       !LOCAL LIST/STACK OF NEIGHBORS
./FINT.F90-134-    INTEGER:: LN                  !NUMBER OF NEIGHBORS FOR A NODE
./FINT.F90:135:    DOUBLE PRECISION:: LVOL       !VOLUME OF A NODE
./FINT.F90:136:    DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90:137:    DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT.F90-138-
./FINT.F90:139:    DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT.F90:140:    DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT.F90:141:    DOUBLE PRECISION:: SHPDTEMP(9) !TEMPORARY VARIABLE FOR SHAPES FOR STABILZIATION
./FINT.F90:142:    DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT.F90:143:    DOUBLE PRECISION:: LMAT(3,3) !INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP
./FINT.F90:144:    DOUBLE PRECISION:: LDINC(3,GMAXN),LDINC_TOT(3,GMAXN)       !DISPLACEMENT INCREMENT (PREDICTOR) OF A NODESTRAIN
./FINT.F90:145:    DOUBLE PRECISION:: LCOO_CUURENT(3,GMAXN)  !CURRENT COORDINATES OF THE NEIGBORS
./FINT.F90:146:    DOUBLE PRECISION:: LCOONE(3,GMAXN)  !ORIGINAL COORDINATES OF THE NEIGBORS
./FINT.F90:147:    DOUBLE PRECISION:: B_TEMP(3,3), B_INV_TEMP(3,3) !GC
./FINT.F90:148:    DOUBLE PRECISION:: STRAIN(6)       !INCREMENTALLY OBJECTIVE STRAIN
./FINT.F90:149:    DOUBLE PRECISION:: ELAS_MAT(6,6)
./FINT.F90:150:    DOUBLE PRECISION:: BMAT(6,3)
./FINT.F90:151:    DOUBLE PRECISION:: BMAT_T(3,6)
./FINT.F90:152:    DOUBLE PRECISION:: FINT3(3),FINT3_EXT(3),INVK(3,3)
./FINT.F90:153:    DOUBLE PRECISION:: ROT(6,6) !ROTATION MATRIX
./FINT.F90-154-    LOGICAL:: LINIT
./FINT.F90:155:    DOUBLE PRECISION:: FMAT(3,3), IFMAT(3,3),X_0(3),X_t(3), DX_t(3,1), PKSTRESS(3,3), TEMP_STRESS(3,3)
./FINT.F90:156:    DOUBLE PRECISION, ALLOCATABLE:: FINT_TEMP(:,:,:), FEXT_TEMP(:,:,:)
./FINT.F90:157:    DOUBLE PRECISION:: DET
./FINT.F90:158:    !DOUBLE PRECISION:: FINT_TEMP(20,3,GNUMP)
./FINT.F90-159-    INTEGER:: ID_RANK
./FINT.F90-160-
./FINT.F90-161-    !0329
./FINT.F90:162:    DOUBLE PRECISION:: PMAT(6,3)
./FINT.F90:163:    DOUBLE PRECISION:: FBOD(3),FGRAV(3)
./FINT.F90:164:    !DOUBLE PRECISION:: MODEL_BODYFORCE(3)
./FINT.F90-165-    !0702
./FINT.F90:166:    DOUBLE PRECISION:: MODEL_BODYFORCE(3,GNUMP)
./FINT.F90:167:    DOUBLE PRECISION:: LBOD(3)
./FINT.F90-168-
./FINT.F90-169-
./FINT.F90-170-    !NSNI
./FINT.F90-171-    INTEGER::XMAP(3),YMAP(3),ZMAP(3)
./FINT.F90:172:    DOUBLE PRECISION::XLMAT(3,3),YLMAT(3,3),ZLMAT(3,3)
./FINT.F90:173:    DOUBLE PRECISION:: DX_STRAIN(6), DY_STRAIN(6), DZ_STRAIN(6)
./FINT.F90:174:    DOUBLE PRECISION::  LOCAL_DX_STRESS(6,GNUMP)
./FINT.F90:175:    DOUBLE PRECISION::  LOCAL_DY_STRESS(6,GNUMP)
./FINT.F90:176:    DOUBLE PRECISION::  LOCAL_DZ_STRESS(6,GNUMP)
./FINT.F90-177-
./FINT.F90:178:    DOUBLE PRECISION::  LDX_STRESS(6)
./FINT.F90:179:    DOUBLE PRECISION::  LDY_STRESS(6)
./FINT.F90:180:    DOUBLE PRECISION::  LDZ_STRESS(6)
./FINT.F90:181:    DOUBLE PRECISION:: CMAT(6,6), LAMDA, MU, LAMDA_PLUS_2MU
./FINT.F90:182:    DOUBLE PRECISION:: XBMAT(6,3), XBMAT_T(3,6), XFINT3(GMAXN,3)
./FINT.F90:183:    DOUBLE PRECISION:: YBMAT(6,3), YBMAT_T(3,6), YFINT3(GMAXN,3)
./FINT.F90:184:    DOUBLE PRECISION:: ZBMAT(6,3), ZBMAT_T(3,6), ZFINT3(GMAXN,3)
./FINT.F90:185:    DOUBLE PRECISION:: MAG_STAB_FINT,MAG_FINT
./FINT.F90-186-
./FINT.F90:187:    DOUBLE PRECISION:: TEMP_DEBUG(3)
./FINT.F90-188-
./FINT.F90:189:    DOUBLE PRECISION:: GINT_WORK
./FINT.F90:190:    DOUBLE PRECISION, ALLOCATABLE:: GINT_WORK_TEMP(:)
./FINT.F90-191-    !
./FINT.F90-192-    ! FOR TIME STEP CALCS
./FINT.F90-193-    !
./FINT.F90-194-    LOGICAL:: FIRST,NSNI_FLAG
./FINT.F90:195:    DOUBLE PRECISION:: STRESS_INC(6), STRAIN_INC(6), POISS, YOUNG, BULK, SHEAR,  &
./FINT.F90-196-        STRESS_INC_DEV(6), STRESS_INC_SPHR(6), STRAIN_INC_DEV(6), STRAIN_INC_SPHR(6),  &
./FINT.F90-197-        NORM_STRESS_INC_DEV, NORM_STRESS_INC_SPHR, NORM_STRAIN_INC_DEV, NORM_STRAIN_INC_SPHR,   &
./FINT.F90-198-        SHEAR_TRIAL, BULK_TRIAL, PMOD, DENSITY, MAXMOD, MAX_VEL,   &
./FINT.F90-199-        DIST, XJ, YJ, ZJ, CHAR_DIST, DLT_TEMP, XI, YI, ZI
./FINT.F90:200:    DOUBLE PRECISION:: D(6)
./FINT.F90-201-    
./FINT.F90-202-          !0703 contact
./FINT.F90-203-    INTEGER :: MODEL_BODY_ID(GNUMP)
./FINT.F90-204-    INTEGER :: LOCAL_BODY_ID, LOCAL_BODY_ID_2, II, P,KK
./FINT.F90-205-         ! 0703      
./FINT.F90:206:    DOUBLE PRECISION:: F_INT_C(3), MU1, MU_NEW, MU_NEW2, X2(3), X1(3), TEMP, F_N, XNORM(3), F_T1, F_T2, F_T3, F_TT, F_INT_C_TEMP(3),F_T
./FINT.F90-207-	!LOGICAL::      KCONTACT
./FINT.F90:208:    DOUBLE PRECISION:: DX(3), LITTLE_DX(3),LENGTH_DX,LENGTH_LITTLE_DX
./FINT.F90-209-	
./FINT.F90:210:    DOUBLE PRECISION:: NSNI_LIMITER
./FINT.F90-211-    !
./FINT.F90-212-    !
./FINT.F90-213-    !
./FINT.F90-214-    !
./FINT.F90-215-    !*********************************************************
./FINT.F90-216-    !******************** EXECUTABLE CODE ********************
./FINT.F90-217-    !*********************************************************
./FINT.F90-218-    !
./FINT.F90-219-    !GINT_WORK = 0.0d0
./FINT.F90-220-    !
./FINT.F90-221-    !INITIALIZE FINT
./FINT.F90-222-    !
./FINT.F90-223-    !
./FINT.F90-224-    !
./FINT.F90-225-    !LOOP OVER THE NODE STACK
./FINT.F90-226-    !
./FINT.F90:227:    !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT.F90-228-    !
./FINT.F90-229-    FINT = 0.0d0
./FINT.F90-230-    DET = 1.d0
./FINT.F90-231-    !REDUCTION(+:FINT)
./FINT.F90-232-    !
./FINT.F90-233-    ALLOCATE(FINT_TEMP(NCORES_INPUT,3,GNUMP))
./FINT.F90-234-    FINT_TEMP = 0.D0
./FINT.F90-235-
./FINT.F90-236-    ALLOCATE(FEXT_TEMP(NCORES_INPUT,3,GNUMP))
./FINT.F90-237-    FEXT_TEMP = 0.D0
--
./FINT.F90-248-    !$OMP PARALLEL DEFAULT(FIRSTPRIVATE) SHARED( GNUMP, GCOO, GCOO_CUURENT, GWIN, GSM_LEN, GSM_VOL, GSM_AREA, GN, GSTART, &
./FINT.F90-249-    !$OMP                                       DIM_NN_LIST, GSTACK, GSTACK_SHP, GSTACK_DSHP, GSTACK_DDSHP, GINVK, &
./FINT.F90-250-    !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
./FINT.F90-251-    !$OMP                                       GSTRESS, LOCAL_DX_STRESS, LOCAL_DY_STRESS, LOCAL_DZ_STRESS, &
./FINT.F90-252-    !$OMP                                       GSTRAIN, &
./FINT.F90-253-    !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP, FEXT_TEMP, &
./FINT.F90-254-    !$OMP                                       GINT_WORK_TEMP,GINT_WORK,GSTRAIN_EQ)
./FINT.F90-255-
./FINT.F90-256-    ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT.F90-257-
./FINT.F90:258:    !$OMP DO
./FINT.F90:259:    DO I = 1, GNUMP
./FINT.F90-260-        !
./FINT.F90-261-        !
./FINT.F90-262-        !GRAB NODE INFORMATION FROM LIST
./FINT.F90-263-        !
./FINT.F90-264-        LCOO(:) = GCOO(:,I)
./FINT.F90-265-        LCOO_T(:) = GCOO_CUURENT(:,I)
./FINT.F90-266-        VOL = GVOL(I)
./FINT.F90-267-        LWIN(:) = GWIN(:,I)
./FINT.F90-268-        LSM_LEN(:) = GSM_LEN(:,I)
./FINT.F90-269-        LN = GN(I)
--
./FINT.F90-276-        
./FINT.F90-277-        !
./FINT.F90-278-        IF (GEBC_NODES(I)) THEN
./FINT.F90-279-            SELF_EBC = .TRUE.
./FINT.F90-280-        ELSE
./FINT.F90-281-            SELF_EBC = .FALSE.
./FINT.F90-282-        END IF
./FINT.F90-283-        !
./FINT.F90-284-        ! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT.F90-285-        !
./FINT.F90:286:        DO J = 1, 6
./FINT.F90-287-            LSTRESS(J) = GSTRESS(J,I)
./FINT.F90-288-            LSTRAIN(J) = GSTRAIN(J,I)
./FINT.F90-289-
./FINT.F90-290-            IF(LMAT_TYPE == 4) THEN
./FINT.F90-291-                L_H_STRESS(J) = G_H_STRESS(J,I)!GC
./FINT.F90-292-                L_S_STRESS(J) = G_S_STRESS(J,I)!GC
./FINT.F90-293-            END IF
./FINT.F90:294:        END DO
./FINT.F90-295-
./FINT.F90:296:        DO J = 1, 30
./FINT.F90-297-            LPROP(J) = GPROP(J,I)
./FINT.F90:298:        END DO
./FINT.F90-299-
./FINT.F90:300:        DO J = 1, 3
./FINT.F90-301-            LBOD(J) = MODEL_BODYFORCE(J,I)
./FINT.F90:302:        END DO
./FINT.F90-303-
./FINT.F90:304:        DO J = 1, 20
./FINT.F90-305-            LSTATE(J) = GSTATE(J,I)
./FINT.F90:306:        END DO
./FINT.F90-307-        !
./FINT.F90-308-        ! GET THE NEIGHBOR LIST
./FINT.F90-309-        !
./FINT.F90:310:        DO J = 1, LN
./FINT.F90-311-            LSTACK(J) = GSTACK(LSTART+J-1)
./FINT.F90:312:        END DO
./FINT.F90-313-        !
./FINT.F90-314-        ! GET THE INCREMENTS OF DISPLACEMENTS FOR NEIGHBORS
./FINT.F90-315-        !
./FINT.F90:316:        DO J = 1, LN
./FINT.F90-317-            JJ = LSTACK(J)
./FINT.F90-318-            LDINC(1,J) = GDINC((JJ-1)*3+1)
./FINT.F90-319-            LDINC(2,J) = GDINC((JJ-1)*3+2)
./FINT.F90-320-            LDINC(3,J) = GDINC((JJ-1)*3+3)
./FINT.F90:321:        END DO
./FINT.F90-322-        !
./FINT.F90-323-        ! GET THE GENERALIZED DISPLACEMENTS FOR NEIGHBORS
./FINT.F90-324-        !
./FINT.F90:325:        DO J = 1, LN
./FINT.F90-326-            JJ = LSTACK(J)
./FINT.F90-327-            LDINC_TOT(1,J) = GDINC_TOT((JJ-1)*3+1)
./FINT.F90-328-            LDINC_TOT(2,J) = GDINC_TOT((JJ-1)*3+2)
./FINT.F90-329-            LDINC_TOT(3,J) = GDINC_TOT((JJ-1)*3+3)
./FINT.F90:330:        END DO
./FINT.F90-331-        !
./FINT.F90-332-        ! GET THE ORIGINAL COORDINATES FOR NEIGHBORS
./FINT.F90-333-        !
./FINT.F90:334:        DO J = 1, LN
./FINT.F90-335-            JJ = LSTACK(J)
./FINT.F90-336-            LCOONE(1,J) = GCOO(1,JJ)
./FINT.F90-337-            LCOONE(2,J) = GCOO(2,JJ)
./FINT.F90-338-            LCOONE(3,J) = GCOO(3,JJ)
./FINT.F90:339:        END DO
./FINT.F90-340-        !
./FINT.F90-341-        !
./FINT.F90-342-        ! GET THE CURRENT COORDINATES FOR NEIGHBORS
./FINT.F90-343-        !
./FINT.F90:344:        DO J = 1, LN
./FINT.F90-345-            JJ = LSTACK(J)
./FINT.F90-346-            LCOO_CUURENT(1,J) = GCOO_CUURENT(1,JJ)
./FINT.F90-347-            LCOO_CUURENT(2,J) = GCOO_CUURENT(2,JJ)
./FINT.F90-348-            LCOO_CUURENT(3,J) = GCOO_CUURENT(3,JJ)
./FINT.F90:349:        END DO
./FINT.F90-350-        !
./FINT.F90-351-        !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT.F90-352-		!
./FINT.F90-353-        IF ((LLAGRANGIAN).AND.(.NOT.LINIT)) THEN
./FINT.F90:354:            DO J = 1, LN
./FINT.F90-355-                SHP(J) =   GSTACK_SHP(LSTART+J-1)
./FINT.F90-356-                SHPD(1,J) = GSTACK_DSHP(1,LSTART+J-1)
./FINT.F90-357-                SHPD(2,J) = GSTACK_DSHP(2,LSTART+J-1)
./FINT.F90-358-                SHPD(3,J) = GSTACK_DSHP(3,LSTART+J-1)
./FINT.F90:359:            END DO
./FINT.F90-360-
./FINT.F90-361-            IF (LFINITE_STRAIN) THEN
./FINT.F90-362-
./FINT.F90-363-                FMAT = 0.0d0
./FINT.F90-364-                FMAT(1,1) = 1.d0
./FINT.F90-365-                FMAT(2,2) = 1.d0
./FINT.F90-366-                FMAT(3,3) = 1.d0
./FINT.F90-367-                !
./FINT.F90:368:                DO K = 1, 3
./FINT.F90:369:                    DO L = 1, 3
./FINT.F90:370:                        DO J = 1, LN
./FINT.F90-371-                            !JJ = LSTACK(J)
./FINT.F90-372-                            !FMAT(K,L) = FMAT(K,L) +  SHPD(L,J)*GCOO_CUURENT(K,JJ)
./FINT.F90-373-                            FMAT(K,L) = FMAT(K,L) +  SHPD(L,J)*LDINC_TOT(K,J)
./FINT.F90:374:                        END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:375:                    END DO
./FINT.F90:376:                END DO
./FINT.F90-377-                CALL DETERMINANT(FMAT,DET)
./FINT.F90-378-                !
./FINT.F90-379-                !
./FINT.F90-380-                SHPDTMP(:,1:LN)=SHPD(:,1:LN)
./FINT.F90-381-                SHPD(:,1:LN) = 0.0d0
./FINT.F90-382-
./FINT.F90-383-                !CALL INVERSE(FMAT, 3, IFMAT)
./FINT.F90-384-                CALL INV3(FMAT,  IFMAT)
./FINT.F90:385:                DO J = 1, LN
./FINT.F90:386:                    DO K = 1, 3
./FINT.F90-387-                        SHPD(1,J) = SHPD(1,J) + SHPDTMP(K,J)*IFMAT(K,1)
./FINT.F90-388-                        SHPD(2,J) = SHPD(2,J) + SHPDTMP(K,J)*IFMAT(K,2)
./FINT.F90-389-                        SHPD(3,J) = SHPD(3,J) + SHPDTMP(K,J)*IFMAT(K,3)
./FINT.F90:390:                    END DO
./FINT.F90:391:                END DO
./FINT.F90-392-
./FINT.F90-393-            END IF
./FINT.F90-394-
./FINT.F90-395-
./FINT.F90-396-        ELSE
./FINT.F90-397-            !
./FINT.F90:398:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT.F90-399-            !
./FINT.F90-400-            IF (ITYPE_INT.EQ.0) THEN
./FINT.F90-401-                !
./FINT.F90-402-                ! DIRECT NODAL INTEGRATION
./FINT.F90-403-                !
./FINT.F90-404-                IF (LLAGRANGIAN) THEN
./FINT.F90-405-
./FINT.F90-406-                    CALL RK1(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90-407-                        QL, QL_COEF,QL_LEN, &
./FINT.F90-408-                        SHP, SHPD,SHSUP)
./FINT.F90-409-
./FINT.F90-410-
./FINT.F90-411-                ELSE !GCOO_CUURENT
./FINT.F90-412-                    CALL RK1(LCOO_T, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90-413-                        QL, QL_COEF,QL_LEN, &
./FINT.F90-414-                        SHP, SHPD, SHSUP)
./FINT.F90-415-                    
./FINT.F90-416-                    ! CALCULATE THE DEFORMATION GRADIENT
./FINT.F90-417-                    B_TEMP = 0.D0
./FINT.F90:418:                    DO K = 1, 3
./FINT.F90:419:                        DO L = 1, 3
./FINT.F90:420:                            DO J = 1, LN
./FINT.F90-421-                                B_TEMP(K,L) = B_TEMP(K,L) +  SHPD(L,J)*LCOONE(K,J)
./FINT.F90:422:                            END DO 
./FINT.F90:423:                        END DO
./FINT.F90:424:                    END DO
./FINT.F90-425-                    CALL INVERSE(B_TEMP, 3, B_INV_TEMP) 
./FINT.F90-426-                    FMAT = B_INV_TEMP
./FINT.F90-427-                    !
./FINT.F90-428-                    ! STORE THE SHP FOR PHY DISPLACEMENT/VEL CACULATION FOR DNI
./FINT.F90-429-                    !
./FINT.F90:430:                    DO J = 1, LN
./FINT.F90-431-                        GSTACK_SHP(LSTART+J-1) = SHP(J)
./FINT.F90-432-                        GSTACK_DSHP(1,LSTART+J-1) = SHPD(1,J)
./FINT.F90-433-                        GSTACK_DSHP(2,LSTART+J-1) = SHPD(2,J)
./FINT.F90-434-                        GSTACK_DSHP(3,LSTART+J-1) = SHPD(3,J)
./FINT.F90:435:                    END DO
./FINT.F90-436-
./FINT.F90-437-                END IF
./FINT.F90-438-
./FINT.F90-439-                CONTINUE
./FINT.F90-440-
./FINT.F90-441-            ELSEIF ((ITYPE_INT.EQ.2).OR.(ITYPE_INT.EQ.1)) THEN
./FINT.F90-442-                !
./FINT.F90-443-                ! NSNI
./FINT.F90-444-                !
./FINT.F90-445-                ! GET THE SMOOTHING INFORMATION
./FINT.F90-446-                ! (1-6) = (+X, -X, +Y, -Y, +Z, -Z)
./FINT.F90-447-                !
./FINT.F90:448:                DO J = 1, 3
./FINT.F90:449:                    DO K = 1, 6
./FINT.F90-450-                        LSM_PTS(J,K) = LCOO_T(J)
./FINT.F90:451:                    END DO
./FINT.F90:452:                END DO
./FINT.F90-453-                LSM_PTS(1,1) = LCOO_T(1) + LSM_LEN(1)
./FINT.F90-454-                LSM_PTS(1,2) = LCOO_T(1) - LSM_LEN(2)
./FINT.F90-455-                LSM_PTS(2,3) = LCOO_T(2) + LSM_LEN(3)
./FINT.F90-456-                LSM_PTS(2,4) = LCOO_T(2) - LSM_LEN(4)
./FINT.F90-457-                LSM_PTS(3,5) = LCOO_T(3) + LSM_LEN(5)
./FINT.F90-458-                LSM_PTS(3,6) = LCOO_T(3) - LSM_LEN(6)
./FINT.F90-459-
./FINT.F90-460-                LSM_VOL = GSM_VOL(I)
./FINT.F90-461-                !
./FINT.F90-462-                ! COMPUTE SMOOTHED AREA OVER VOLUME
./FINT.F90-463-                !
./FINT.F90:464:                DO J = 1, 3
./FINT.F90-465-                    LSM_AOV((J-1)*2+1) = GSM_AREA(J,I) / LSM_VOL
./FINT.F90-466-                    LSM_AOV((J-1)*2+2) = GSM_AREA(J,I) / LSM_VOL
./FINT.F90:467:                END DO
./FINT.F90-468-
./FINT.F90-469-                !
./FINT.F90-470-                !COMPUTE THE SHAPE FUNCTIONS AT GRADIENT SMOOTHING POINTS
./FINT.F90-471-                !
./FINT.F90:472:                DO J = 1, 6
./FINT.F90-473-
./FINT.F90-474-                    SM_COO(:) = LSM_PTS(:,J)
./FINT.F90-475-                    CALL RK1(SM_COO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL, GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90-476-                        QL, QL_COEF,QL_LEN, &
./FINT.F90-477-                        SHP, SHPD, SHSUP)
./FINT.F90-478-
./FINT.F90:479:                    DO K = 1, LN
./FINT.F90-480-                    
./FINT.F90-481-                        SHP6(K,J) = SHP(K)
./FINT.F90-482-                        SHPD6(:,K,J) = SHPD(:,K)
./FINT.F90:483:                    END DO
./FINT.F90-484-
./FINT.F90:485:                END DO !J = 1, 6 (COMPUTE THE SMOOTHED GRADIENTS)
./FINT.F90-486-
./FINT.F90-487-                !
./FINT.F90-488-                ! FILL OUT THE SMOOTHED GRADIENT INFORMATION
./FINT.F90-489-                !
./FINT.F90:490:                DO K = 1, LN
./FINT.F90-491-
./FINT.F90-492-                    SHPD(1,K) = (SHP6(K,1)*LSM_AOV(1) - SHP6(K,2)*LSM_AOV(2))
./FINT.F90-493-                    SHPD(2,K) = (SHP6(K,3)*LSM_AOV(3) - SHP6(K,4)*LSM_AOV(4))
./FINT.F90-494-                    SHPD(3,K) = (SHP6(K,5)*LSM_AOV(5) - SHP6(K,6)*LSM_AOV(6))
./FINT.F90-495-
./FINT.F90:496:                END DO
./FINT.F90-497-                !
./FINT.F90-498-                IF (ITYPE_INT.EQ.2) THEN
./FINT.F90-499-
./FINT.F90-500-                    !NSNI CALCS
./FINT.F90-501-
./FINT.F90:502:                    DO K = 1, LN
./FINT.F90-503-                        !
./FINT.F90-504-                        ! SMOOTH X Y Z IN X DIRECTION
./FINT.F90-505-                        !
./FINT.F90-506-                        !XX
./FINT.F90-507-                        SHPDTEMP(1) = (SHPD6(1,K,1)*LSM_AOV(1) - SHPD6(1,K,2)*LSM_AOV(2)) !SMOOTH IN X DIRECTION
./FINT.F90-508-
./FINT.F90-509-                        !XY
./FINT.F90-510-                        SHPDTEMP(2) = (SHPD6(2,K,1)*LSM_AOV(1) - SHPD6(2,K,2)*LSM_AOV(2)) !SMOOTH IN X DIRECTION
./FINT.F90-511-
./FINT.F90-512-                        !XZ
--
./FINT.F90-540-                        SHPDD_SM(2,K) = SHPDTEMP(5)
./FINT.F90-541-                        !ZZ
./FINT.F90-542-                        SHPDD_SM(3,K) = SHPDTEMP(9)
./FINT.F90-543-                        !XY
./FINT.F90-544-                        SHPDD_SM(4,K) = 0.5d0 * (SHPDTEMP(2) + SHPDTEMP(4))
./FINT.F90-545-                        !YZ
./FINT.F90-546-                        SHPDD_SM(5,K) = 0.5d0 * (SHPDTEMP(6) + SHPDTEMP(8))
./FINT.F90-547-                        !XZ
./FINT.F90-548-                        SHPDD_SM(6,K) = 0.5d0 * (SHPDTEMP(3) + SHPDTEMP(7))
./FINT.F90-549-
./FINT.F90:550:                    END DO
./FINT.F90-551-
./FINT.F90:552:                    !TODO: GET RID OF THESE ARRAYS, WE DONT DO LAGRANGIAN NSNI, SO ITS
./FINT.F90-553-                    !WASTING A BUNCH OF STORAGE
./FINT.F90-554-
./FINT.F90:555:                    DO J = 1, LN
./FINT.F90-556-                        GSTACK_DDSHP(1,LSTART+J-1) = SHPDD_SM(1,J)
./FINT.F90-557-                        GSTACK_DDSHP(2,LSTART+J-1) = SHPDD_SM(2,J)
./FINT.F90-558-                        GSTACK_DDSHP(3,LSTART+J-1) = SHPDD_SM(3,J)
./FINT.F90-559-                        GSTACK_DDSHP(4,LSTART+J-1) = SHPDD_SM(4,J)
./FINT.F90-560-                        GSTACK_DDSHP(5,LSTART+J-1) = SHPDD_SM(5,J)
./FINT.F90-561-                        GSTACK_DDSHP(6,LSTART+J-1) = SHPDD_SM(6,J)
./FINT.F90:562:                    END DO
./FINT.F90-563-
./FINT.F90-564-                END IF
./FINT.F90-565-
./FINT.F90-566-                CALL RK1(LCOO_T, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90-567-                    QL, QL_COEF,QL_LEN, &
./FINT.F90-568-                    SHP, SHPD_TRASH, SHSUP)
./FINT.F90-569-                !
./FINT.F90-570-                ! STORE THE SHP FOR PHY DISPLACEMENT/VEL CACULATION FOR SNNI, DNI
./FINT.F90-571-                !
./FINT.F90:572:                DO J = 1, LN
./FINT.F90-573-                    GSTACK_SHP(LSTART+J-1) = SHP(J)
./FINT.F90:574:                END DO
./FINT.F90-575-
./FINT.F90-576-            END IF
./FINT.F90-577-
./FINT.F90-578-
./FINT.F90-579-
./FINT.F90-580-            IF ((LLAGRANGIAN).AND.(LINIT)) THEN
./FINT.F90-581-
./FINT.F90:582:                DO J = 1, LN
./FINT.F90-583-                    GSTACK_SHP(LSTART+J-1) = SHP(J)
./FINT.F90-584-                    GSTACK_DSHP(1,LSTART+J-1) = SHPD(1,J)
./FINT.F90-585-                    GSTACK_DSHP(2,LSTART+J-1) = SHPD(2,J)
./FINT.F90-586-                    GSTACK_DSHP(3,LSTART+J-1) = SHPD(3,J)
./FINT.F90:587:                END DO
./FINT.F90-588-
./FINT.F90-589-                IF (LFINITE_STRAIN) THEN
./FINT.F90-590-
./FINT.F90-591-                    FMAT = 0.0d0
./FINT.F90-592-                    FMAT(1,1) = 1.d0
./FINT.F90-593-                    FMAT(2,2) = 1.d0
./FINT.F90-594-                    FMAT(3,3) = 1.d0
./FINT.F90-595-                    !
./FINT.F90-596-
./FINT.F90:597:                    DO K = 1, 3
./FINT.F90:598:                        DO L = 1, 3
./FINT.F90:599:                            DO J = 1, LN
./FINT.F90-600-                                FMAT(K,L) = FMAT(K,L) +  SHPD(L,J)*LDINC_TOT(K,J)
./FINT.F90:601:                            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:602:                        END DO
./FINT.F90:603:                    END DO
./FINT.F90-604-                    CALL DETERMINANT(FMAT,DET)
./FINT.F90-605-                    !
./FINT.F90-606-                    SHPDTMP(:,1:LN)=SHPD(:,1:LN)
./FINT.F90-607-                    SHPD(:,1:LN) = 0.0d0
./FINT.F90-608-
./FINT.F90-609-
./FINT.F90-610-                    !CALL INVERSE(FMAT, 3, IFMAT)
./FINT.F90-611-                    CALL INV3(FMAT,  IFMAT)
./FINT.F90-612-
./FINT.F90:613:                    DO J = 1, LN
./FINT.F90:614:                        DO K = 1, 3
./FINT.F90-615-                            SHPD(1,J) = SHPD(1,J) + SHPDTMP(K,J)*IFMAT(K,1)
./FINT.F90-616-                            SHPD(2,J) = SHPD(2,J) + SHPDTMP(K,J)*IFMAT(K,2)
./FINT.F90-617-                            SHPD(3,J) = SHPD(3,J) + SHPDTMP(K,J)*IFMAT(K,3)
./FINT.F90-618-
./FINT.F90:619:                        END DO
./FINT.F90-620-
./FINT.F90:621:                    END DO
./FINT.F90-622-                END IF
./FINT.F90-623-
./FINT.F90-624-
./FINT.F90-625-            END IF
./FINT.F90-626-
./FINT.F90-627-        END IF
./FINT.F90-628-        !
./FINT.F90-629-        ! COMPUTE STRAIN MEASURES
./FINT.F90-630-        !
./FINT.F90-631-
./FINT.F90-632-            ! IF (.NOT.(LLAGRANGIAN)) THEN
./FINT.F90-633-		
./FINT.F90-634-                    ! FMAT = 0.0d0
./FINT.F90-635-                    ! FMAT(1,1) = 1.d0
./FINT.F90-636-                    ! FMAT(2,2) = 1.d0
./FINT.F90-637-                    ! FMAT(3,3) = 1.d0
./FINT.F90-638-                    ! !
./FINT.F90-639-
./FINT.F90:640:                    ! DO K = 1, 3
./FINT.F90:641:                        ! DO L = 1, 3
./FINT.F90:642:                            ! DO J = 1, LN
./FINT.F90-643-                                ! FMAT(K,L) = FMAT(K,L) +  SHPD(L,J)*LDINC_TOT(K,J)
./FINT.F90:644:                            ! END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:645:                        ! END DO
./FINT.F90:646:                    ! END DO
./FINT.F90-647-					
./FINT.F90-648-					! FMAT_TRANS = TRANSPOSE(FMAT)
./FINT.F90-649-					
./FINT.F90-650-					! !COMPUTE GREEN'S STRAIN
./FINT.F90-651-					! E_STRAIN = MATMUL(FMAT_TRANS,FMAT)
./FINT.F90-652-					
./FINT.F90:653:                    ! DO K = 1, 3
./FINT.F90:654:                        ! DO L = 1, 3
./FINT.F90-655-						
./FINT.F90-656-						! E_STRAIN(K,L) = 0.0d0
./FINT.F90:657:						! END DO
./FINT.F90:658:						! END DO
./FINT.F90-659-					
./FINT.F90-660-                    ! CALL DETERMINANT(FMAT,DET)
./FINT.F90-661-					
./FINT.F90-662-			! END IF
./FINT.F90-663-					
./FINT.F90-664-					
./FINT.F90-665-        IF (LFINITE_STRAIN) THEN
./FINT.F90-666-            !
./FINT.F90-667-            ! COMPUTE THE INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP
./FINT.F90-668-            !
./FINT.F90-669-            LMAT = 0.0d0
./FINT.F90-670-            !
./FINT.F90-671-            !
./FINT.F90-672-
./FINT.F90:673:            DO K = 1, 3
./FINT.F90:674:                DO L = 1, 3
./FINT.F90:675:                    DO J = 1, LN
./FINT.F90-676-                        LMAT(K,L) = LMAT(K,L) +  SHPD(L,J)*LDINC(K,J)
./FINT.F90:677:                    END DO
./FINT.F90:678:                END DO
./FINT.F90:679:            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-680-			
./FINT.F90-681-			! !COMPUTE THE CHANBGE IN LENGTHS OF SUPPORTS
./FINT.F90-682-			! INCREMENTALLY (IN PROGRESS!)
./FINT.F90-683-			
./FINT.F90:684:			! DO J=1,3
./FINT.F90-685-			
./FINT.F90-686-			  ! DX = 0.0d0
./FINT.F90-687-			  ! DX(J) = GWIN(J,I)
./FINT.F90-688-				
./FINT.F90-689-				! LENGTH_DX = DSQRT(DX(1)**2+DX(2)**2+DX(3)**2)
./FINT.F90-690-				
./FINT.F90:691:				! DO K = 1, 3
./FINT.F90-692-				  ! LITTLE_DX(K) = 0.0d0
./FINT.F90:693:					! DO L = 1, 3
./FINT.F90-694-					! LITTLE_DX(K) = LITTLE_DX(K) + LMAT(K,L)*DX(L)
./FINT.F90:695:					! END DO
./FINT.F90:696:				! END DO
./FINT.F90-697-				
./FINT.F90-698-				! LENGTH_LITTLE_DX = DSQRT(LITTLE_DX(1)**2+LITTLE_DX(2)**2+LITTLE_DX(3)**2)
./FINT.F90-699-				
./FINT.F90-700-				! GWIN(I,J) = GWIN(I,J) + GWIN(I,J) * LENGTH_LITTLE_DX/LENGTH_DX
./FINT.F90-701-				! GWIN(I,J) = MIN(GWIN0(I,J)*2.0d0,GWIN(I,J))
./FINT.F90-702-				! GWIN(I,J) = MAX(GWIN0(I,J)/2.0d0,GWIN(I,J))
./FINT.F90-703-				
./FINT.F90:704:			! END DO
./FINT.F90-705-			
./FINT.F90-706-
./FINT.F90-707-            IF (ITYPE_INT.EQ.2) THEN
./FINT.F90-708-
./FINT.F90-709-                !NSNI
./FINT.F90-710-
./FINT.F90-711-                !XX
./FINT.F90-712-                !YY
./FINT.F90-713-                !ZZ
./FINT.F90-714-                !XY
--
./FINT.F90-724-                YMAP(3) = 5 !Z,Y
./FINT.F90-725-
./FINT.F90-726-                ZMAP(1) = 6 !X,Z
./FINT.F90-727-                ZMAP(2) = 5 !Y,Z
./FINT.F90-728-                ZMAP(3) = 3 !Z,Z
./FINT.F90-729-
./FINT.F90-730-                XLMAT = 0.0d0
./FINT.F90-731-                YLMAT = 0.0d0
./FINT.F90-732-                ZLMAT = 0.0d0
./FINT.F90-733-
./FINT.F90:734:                DO K = 1, 3
./FINT.F90:735:                    DO L = 1, 3
./FINT.F90:736:                        DO J = 1, LN
./FINT.F90-737-                            XLMAT(K,L) = XLMAT(K,L) +  SHPDD_SM(XMAP(L),J)*LDINC(K,J)
./FINT.F90-738-                            YLMAT(K,L) = YLMAT(K,L) +  SHPDD_SM(YMAP(L),J)*LDINC(K,J)
./FINT.F90-739-                            ZLMAT(K,L) = ZLMAT(K,L) +  SHPDD_SM(ZMAP(L),J)*LDINC(K,J)
./FINT.F90:740:                        END DO
./FINT.F90:741:                    END DO
./FINT.F90:742:                END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-743-
./FINT.F90-744-                CALL D_HUGHES_WINGET(LMAT,XLMAT, & !IN
./FINT.F90-745-                ROT,DX_STRAIN) !OUT
./FINT.F90-746-
./FINT.F90-747-                CALL D_HUGHES_WINGET(LMAT,YLMAT, & !IN
./FINT.F90-748-                ROT,DY_STRAIN) !OUT
./FINT.F90-749-
./FINT.F90-750-                CALL D_HUGHES_WINGET(LMAT,ZLMAT, & !IN
./FINT.F90-751-                ROT,DZ_STRAIN) !OUT
./FINT.F90-752-
--
./FINT.F90-766-            CALL ROTATE_TENSOR(ROT,LSTRAIN)
./FINT.F90-767-            !
./FINT.F90-768-        ELSE
./FINT.F90-769-            !
./FINT.F90-770-            ! BUILD THE INCREMENTAL INFINTESIMAL STRAIN
./FINT.F90-771-            !
./FINT.F90-772-            STRAIN = 0.0d0
./FINT.F90-773-            !
./FINT.F90-774-            !STRAIN ORDERING:
./FINT.F90-775-            !XX, YY, ZZ, YZ+ZY, XZ+ZX, XY+XY
./FINT.F90:776:            DO J = 1, LN
./FINT.F90-777-                STRAIN(1) = STRAIN(1) +  SHPD(1,J)*LDINC(1,J)
./FINT.F90-778-                STRAIN(2) = STRAIN(2) +  SHPD(2,J)*LDINC(2,J)
./FINT.F90-779-                STRAIN(3) = STRAIN(3) +  SHPD(3,J)*LDINC(3,J)
./FINT.F90-780-                STRAIN(4) = STRAIN(4) +  SHPD(2,J)*LDINC(3,J) +  SHPD(3,J)*LDINC(2,J)
./FINT.F90-781-                STRAIN(5) = STRAIN(5) +  SHPD(1,J)*LDINC(3,J) +  SHPD(3,J)*LDINC(1,J)
./FINT.F90-782-                STRAIN(6) = STRAIN(6) +  SHPD(1,J)*LDINC(2,J) +  SHPD(2,J)*LDINC(1,J)
./FINT.F90:783:            END DO
./FINT.F90-784-            !
./FINT.F90-785-        END IF
./FINT.F90-786-        !
./FINT.F90-787-
./FINT.F90-788-
./FINT.F90-789-        LSTRAIN = LSTRAIN + STRAIN
./FINT.F90-790-        !
./FINT.F90-791-        ! ELASTIC PREDICTOR
./FINT.F90-792-        !
./FINT.F90-793-        ELAS_MAT = FORM_CMAT(LPROP)
--
./FINT.F90-799-        ELSE
./FINT.F90-800-            CALL CONSTITUTION(LSTRESS_PREDICTOR,LMAT_TYPE, LSTRAIN, STRAIN, LPROP, DLT, FMAT, & !IN
./FINT.F90-801-        LSTATE, LSTRESS, L_H_STRESS, L_S_STRESS) !IN/OUT, OUT
./FINT.F90-802-        END IF
./FINT.F90-803-        !
./FINT.F90-804-        ! ********** SAVE STATE AND FEILD VARIABLES **********
./FINT.F90-805-        !
./FINT.F90-806-        !
./FINT.F90-807-        ! UPDATE STATE VARIABLE TO GSTATE
./FINT.F90-808-        !
./FINT.F90:809:        DO J = 1, 20
./FINT.F90-810-            GSTATE(J,I) = LSTATE(J)
./FINT.F90:811:        END DO
./FINT.F90-812-        !
./FINT.F90:813:        DO J = 1, 6
./FINT.F90-814-
./FINT.F90-815-            !GET INCREMENTS FOR TIME STEP PREDICTION
./FINT.F90-816-            STRESS_INC(J) = LSTRESS(J) - GSTRESS(J,I)
./FINT.F90-817-            STRAIN_INC(J) = LSTRAIN(J) - GSTRAIN(J,I)
./FINT.F90-818-
./FINT.F90-819-            !SAVE THE STRESSES
./FINT.F90-820-            GSTRESS(J,I) = LSTRESS(J)
./FINT.F90-821-            GSTRAIN(J,I) = LSTRAIN(J)
./FINT.F90-822-			
./FINT.F90-823-			IF(LMAT_TYPE == 4) THEN            
./FINT.F90-824-				G_H_STRESS(J,I) = L_H_STRESS(J)!GC
./FINT.F90-825-				G_S_STRESS(J,I) = L_S_STRESS(J)!GC
./FINT.F90-826-			END IF
./FINT.F90-827-
./FINT.F90:828:        END DO
./FINT.F90-829-        !EQUIVALENT PLASTIC STRAIN
./FINT.F90-830-
./FINT.F90-831-        GSTRAIN_EQ(I) = LSTRAIN(1)**2 + LSTRAIN(2)**2 + LSTRAIN(3)**2 + &
./FINT.F90-832-	               2.0d0*(LSTRAIN(4)**2 + LSTRAIN(5)**2 + LSTRAIN(6)**2)
./FINT.F90-833-
./FINT.F90-834-        GSTRAIN_EQ(I) = ( GSTRAIN_EQ(I) *2/3)**0.5
./FINT.F90-835-
./FINT.F90-836-        ID_RANK = OMP_get_thread_num()
./FINT.F90-837-        IF (LFINITE_STRAIN) THEN
./FINT.F90:838:            DO J = 1, 6
./FINT.F90-839-            
./FINT.F90-840-                 GINT_WORK_TEMP(ID_RANK+1) = GINT_WORK_TEMP(ID_RANK+1) + 0.5d0*D(J)*(2*LSTRESS(J)-STRESS_INC(J))*VOL*DET
./FINT.F90:841:            END DO
./FINT.F90-842-        ELSE
./FINT.F90-843-        ID_RANK = OMP_get_thread_num()
./FINT.F90:844:            DO J = 1, 6
./FINT.F90-845-                GINT_WORK_TEMP(ID_RANK+1) = GINT_WORK_TEMP(ID_RANK+1) + 0.5d0*STRAIN_INC(J)*STRESS_INC(J)*VOL*DET
./FINT.F90:846:            END DO
./FINT.F90-847-        END IF
./FINT.F90-848-        
./FINT.F90-849-
./FINT.F90-850-        POISS = LPROP(1)
./FINT.F90-851-        YOUNG = LPROP(2)
./FINT.F90-852-
./FINT.F90-853-        BULK = BULK_MOD(YOUNG,POISS)
./FINT.F90-854-
./FINT.F90-855-        SHEAR = SHEAR_MOD(YOUNG,POISS)
./FINT.F90-856-
./FINT.F90-857-        DENSITY =  LPROP(3)
./FINT.F90-858-		
./FINT.F90:859:		!IF (.FALSE.) THEN !HERE'S THE OLD WAY OF DOING TIME STEP
./FINT.F90-860-			
./FINT.F90-861-			IF (LMAT_TYPE.GT.1) THEN
./FINT.F90-862-				NSNI_FLAG=.FALSE.
./FINT.F90-863-				CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK,NSNI_FLAG)
./FINT.F90-864-			END IF
./FINT.F90-865-
./FINT.F90-866-			  PMOD = BULK + 4.0d0*SHEAR/3.0d0
./FINT.F90-867-			
./FINT.F90-868-			  MAXMOD=MAX(PMOD,SHEAR)
./FINT.F90-869-
./FINT.F90-870-			  GMAX_WVEL(I) = DSQRT(MAXMOD/DENSITY)
./FINT.F90-871-
./FINT.F90-872-			  !IF (LMAT_TYPE.EQ.3) THEN
./FINT.F90-873-			  !	!FUDGE THE DRUCKER-PRAGER TIME STEP SO THAT THE FACTOR CAN BE 1.0
./FINT.F90-874-			  !	GMAX_WVEL(I) = GMAX_WVEL(I)/0.3d0
./FINT.F90-875-			  !END IF
./FINT.F90-876-
./FINT.F90-877-		!ELSE
./FINT.F90-878-		  !
./FINT.F90:879:		  ! DO IT THE WAY DR. YREUAX DOES
./FINT.F90-880-		  !
./FINT.F90-881-          !GMAX_WVEL(I) = DSQRT(BULK/DENSITY)
./FINT.F90-882-          !
./FINT.F90-883-		!END IF
./FINT.F90-884-		
./FINT.F90-885-        IF (ITYPE_INT.EQ.2) THEN
./FINT.F90-886-
./FINT.F90:887:            DO J = 1, 6
./FINT.F90-888-                LDX_STRESS(J) = LOCAL_DX_STRESS(J,I)
./FINT.F90-889-                LDY_STRESS(J) = LOCAL_DY_STRESS(J,I)
./FINT.F90-890-                LDZ_STRESS(J) = LOCAL_DZ_STRESS(J,I)
./FINT.F90:891:            END DO
./FINT.F90-892-
./FINT.F90-893-            CALL ROTATE_TENSOR(ROT,LDX_STRESS)
./FINT.F90-894-            CALL ROTATE_TENSOR(ROT,LDY_STRESS)
./FINT.F90-895-            CALL ROTATE_TENSOR(ROT,LDZ_STRESS)
./FINT.F90-896-
./FINT.F90-897-            POISS = LPROP(1)
./FINT.F90-898-            YOUNG = LPROP(2)
./FINT.F90-899-
./FINT.F90-900-            BULK = BULK_MOD(YOUNG,POISS)
./FINT.F90-901-
--
./FINT.F90-926-            CMAT(1,3) = LAMDA
./FINT.F90-927-            CMAT(3,1) = LAMDA
./FINT.F90-928-
./FINT.F90-929-            CMAT(3,2) = LAMDA
./FINT.F90-930-            CMAT(2,3) = LAMDA
./FINT.F90-931-
./FINT.F90-932-			NSNI_LIMITER = 1.0d0
./FINT.F90-933-            IF ((LMAT_TYPE.EQ.3).OR.(LMAT_TYPE.EQ.6)) THEN
./FINT.F90-934-			!IF (LMAT_TYPE.EQ.3) THEN
./FINT.F90-935-            !
./FINT.F90:936:            ! DAMAGE MECHANICS INVOLVED, DO NOT USE A "TOTAL" STRESS
./FINT.F90-937-            ! STABILIZATION, INSTEAD, USE THE INCREMENTAL STRESS
./FINT.F90-938-            ! FOR STABILIZATION.
./FINT.F90-939-			!
./FINT.F90-940-			! COMMENT #2: STILL INEFFECTIVE, ZERO-OUT THE STRESS
./FINT.F90-941-			! IN CASE THE DAMAGE GETS TOO BIG, THIS SEEMS TO WORK
./FINT.F90-942-			! OK, BUT THE VALUE IS SENSATIVE A BIT.
./FINT.F90-943-            !
./FINT.F90-944-			IF (LSTATE(4).GT.(0.5d0)) THEN
./FINT.F90-945-                NSNI_LIMITER = 0.0d0
./FINT.F90-946-			ELSE
./FINT.F90-947-                NSNI_LIMITER = (1.0d0-2.0d0*LSTATE(4))
./FINT.F90-948-			END IF
./FINT.F90-949-            END IF
./FINT.F90-950-            !
./FINT.F90:951:            ! UPDATE THE PSUEDO-STRESSES FOR NSNI
./FINT.F90-952-            !
./FINT.F90:953:            DO K = 1, 6
./FINT.F90:954:                DO L = 1, 6
./FINT.F90-955-                    LDX_STRESS(K) = LDX_STRESS(K) +  CMAT(K,L)*DX_STRAIN(L)
./FINT.F90-956-                    LDY_STRESS(K) = LDY_STRESS(K) +  CMAT(K,L)*DY_STRAIN(L)
./FINT.F90-957-                    LDZ_STRESS(K) = LDZ_STRESS(K) +  CMAT(K,L)*DZ_STRAIN(L)
./FINT.F90:958:                END DO
./FINT.F90:959:            END DO
./FINT.F90-960-            !
./FINT.F90-961-            ! SAVE WORK CONGUGATE STRESS DERIVATIVES FOR NSNI
./FINT.F90-962-            !
./FINT.F90:963:            DO J = 1, 6
./FINT.F90-964-                !
./FINT.F90-965-                LOCAL_DX_STRESS(J,I) = LDX_STRESS(J)*NSNI_LIMITER
./FINT.F90-966-                LOCAL_DY_STRESS(J,I) = LDY_STRESS(J)*NSNI_LIMITER
./FINT.F90-967-                LOCAL_DZ_STRESS(J,I) = LDY_STRESS(J)*NSNI_LIMITER
./FINT.F90-968-                !
./FINT.F90:969:            END DO
./FINT.F90-970-			
./FINT.F90:971:			!DOESNT WORK!
./FINT.F90-972-			!IF ((LMAT_TYPE.EQ.3).OR.(LMAT_TYPE.EQ.6)) THEN
./FINT.F90-973-			!LDX_STRESS = LDX_STRESS*(1.0d0-LSTATE(4))
./FINT.F90-974-			!LDY_STRESS = LDY_STRESS*(1.0d0-LSTATE(4))
./FINT.F90-975-			!LDX_STRESS = LDX_STRESS*(1.0d0-LSTATE(4))
./FINT.F90-976-			!END IF
./FINT.F90-977-
./FINT.F90-978-
./FINT.F90-979-        END IF !NSNI
./FINT.F90-980-XNORM(1:3) =0.D0
./FINT.F90:981:        DO K = 1, LN
./FINT.F90-982-            KK = LSTACK(K)
./FINT.F90-983-            IF(LOCAL_BODY_ID .EQ.MODEL_BODY_ID(KK)) THEN
./FINT.F90-984-                XNORM(1) = XNORM(1)+SHPD(1,K)
./FINT.F90-985-                XNORM(2) = XNORM(2)+SHPD(2,K)
./FINT.F90-986-                XNORM(3) = XNORM(3)+SHPD(3,K)
./FINT.F90-987-            ELSE
./FINT.F90-988-                XNORM(1) = XNORM(1)-SHPD(1,K)
./FINT.F90-989-                XNORM(2) = XNORM(2)-SHPD(2,K)
./FINT.F90-990-                XNORM(3) = XNORM(3)-SHPD(3,K)
./FINT.F90-991-            ENDIF
./FINT.F90-992-
./FINT.F90:993:        END DO
./FINT.F90-994-        !
./FINT.F90-995-        ! ASSEMBLE THE INTERNAL FORCE
./FINT.F90-996-        !
./FINT.F90-997-        MAG_FINT = 0.0d0
./FINT.F90-998-        !
./FINT.F90:999:        DO J = 1, LN
./FINT.F90-1000-
./FINT.F90-1001-            JJ = LSTACK(J)
./FINT.F90-1002-
./FINT.F90-1003-            !BMAT = 0.0d0
./FINT.F90-1004-
./FINT.F90-1005-            !VOIGT ORDERING:
./FINT.F90-1006-            !XX, YY, ZZ, YZ, XZ, XY
./FINT.F90-1007-            BMAT = 0.0d0
./FINT.F90-1008-            BMAT(1,1) = SHPD(1,J)
./FINT.F90-1009-            BMAT(2,2) = SHPD(2,J)
--
./FINT.F90-1023-
./FINT.F90-1024-            !FINT3(2) = LSTRESS(2) * SHPD(2,J) + LSTRESS(4) * SHPD(3,J) + LSTRESS(6) * SHPD(1,J)
./FINT.F90-1025-
./FINT.F90-1026-            !FINT3(3) = LSTRESS(3) * SHPD(3,J) + LSTRESS(4) * SHPD(2,J) + LSTRESS(5) * SHPD(1,J)
./FINT.F90-1027-
./FINT.F90-1028-            FINT3 = MATMUL(BMAT_T,LSTRESS)            
./FINT.F90-1029-
./FINT.F90-1030-            
./FINT.F90-1031-
./FINT.F90-1032-   !
./FINT.F90:1033:   ! DO KERNEL CONTACT
./FINT.F90-1034-   !
./FINT.F90-1035-
./FINT.F90-1036-           F_INT_C_TEMP=0.D0
./FINT.F90-1037-
./FINT.F90-1038-           F_INT_C=0.D0
./FINT.F90-1039-IF (KCONTACT) THEN
./FINT.F90-1040-
./FINT.F90-1041-    LOCAL_BODY_ID_2 = MODEL_BODY_ID(JJ)
./FINT.F90-1042-    MU1 = LPROP(20) !BODY 1
./FINT.F90-1043-    MU_NEW = GPROP(20,JJ) !BODY 2
--
./FINT.F90-1093-            
./FINT.F90-1094-
./FINT.F90-1095-            !GRAVITY
./FINT.F90-1096-            FGRAV = SHP(J) * IGRAVITY*DENSITY
./FINT.F90-1097-            
./FINT.F90-1098-            !BODY FORCE
./FINT.F90-1099-            FBOD = SHP(J) * LBOD*DENSITY
./FINT.F90-1100-                        
./FINT.F90-1101-            FINT3_EXT = FBOD + FGRAV
./FINT.F90-1102-
./FINT.F90:1103:            DO K = 1, 3
./FINT.F90-1104-                MAG_FINT = MAG_FINT + FINT3(K)**2
./FINT.F90:1105:            END DO
./FINT.F90-1106-
./FINT.F90:1107:            DO K = 1, 3
./FINT.F90-1108-                ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT.F90-1109-
./FINT.F90-1110-                FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) + FINT3(K)*VOL*DET
./FINT.F90-1111-
./FINT.F90-1112-                FEXT_TEMP(ID_RANK+1,K,JJ) = FEXT_TEMP(ID_RANK+1,K,JJ) + FINT3_EXT(K)*VOL*DET
./FINT.F90-1113-
./FINT.F90:1114:            END DO
./FINT.F90-1115-
./FINT.F90:1116:        END DO !ASSEMBLE FINT FOR STANDARD NODAL INTEGRATION PART
./FINT.F90-1117-
./FINT.F90-1118-        MAG_FINT=DSQRT(MAG_FINT)
./FINT.F90-1119-
./FINT.F90-1120-        IF (ITYPE_INT.EQ.2) THEN !NSNI
./FINT.F90-1121-
./FINT.F90-1122-            !
./FINT.F90-1123-            MAG_STAB_FINT = 0.0d0
./FINT.F90-1124-            !
./FINT.F90:1125:            DO J = 1, LN
./FINT.F90-1126-
./FINT.F90-1127-                JJ = LSTACK(J)
./FINT.F90-1128-
./FINT.F90-1129-                XBMAT = 0.0d0
./FINT.F90-1130-                YBMAT = 0.0d0
./FINT.F90-1131-                ZBMAT = 0.0d0
./FINT.F90-1132-
./FINT.F90-1133-                XBMAT(1,1) = SHPDD_SM(XMAP(1),J)
./FINT.F90-1134-                XBMAT(2,2) = SHPDD_SM(XMAP(2),J)
./FINT.F90-1135-                XBMAT(3,3) = SHPDD_SM(XMAP(3),J)
--
./FINT.F90-1169-                ZBMAT(4,3) = SHPDD_SM(ZMAP(2),J)
./FINT.F90-1170-                ZBMAT(5,1) = SHPDD_SM(ZMAP(3),J)
./FINT.F90-1171-                ZBMAT(5,3) = SHPDD_SM(ZMAP(1),J)
./FINT.F90-1172-                ZBMAT(6,1) = SHPDD_SM(ZMAP(2),J)
./FINT.F90-1173-                ZBMAT(6,2) = SHPDD_SM(ZMAP(1),J)
./FINT.F90-1174-
./FINT.F90-1175-                ZBMAT_T = TRANSPOSE(ZBMAT)
./FINT.F90-1176-
./FINT.F90-1177-                ZFINT3(J,1:3) = MATMUL(ZBMAT_T,LDZ_STRESS)
./FINT.F90-1178-
./FINT.F90:1179:                DO K = 1, 3
./FINT.F90-1180-                    MAG_STAB_FINT = MAG_STAB_FINT + (XFINT3(J,K)**2 + YFINT3(J,K)**2 + ZFINT3(J,K)**2)
./FINT.F90:1181:                END DO
./FINT.F90-1182-                
./FINT.F90-1183-                CONTINUE
./FINT.F90-1184-
./FINT.F90-1185-
./FINT.F90:1186:            END DO
./FINT.F90-1187-            !
./FINT.F90-1188-            ! CONTROL THE CONTRIBUTION TO FINT BY NSNI: SOME PARAMETERS ARE ESTIMATED AND
./FINT.F90-1189-            ! THEY MIGHT NOT BE ACCURATE
./FINT.F90-1190-            !
./FINT.F90-1191-            IF (USE_STAB_CONTROL) THEN
./FINT.F90-1192-             IF (MAG_STAB_FINT.GT.(1.0d-12)) THEN
./FINT.F90-1193-                MAG_STAB_FINT=DSQRT(MAG_STAB_FINT)
./FINT.F90-1194-                IF (MAG_STAB_FINT.GT.MAG_FINT) THEN
./FINT.F90-1195-                    XFINT3=XFINT3*MAG_FINT/MAG_STAB_FINT*STABILIZATION_CONTROL_COEF
./FINT.F90-1196-                    YFINT3=YFINT3*MAG_FINT/MAG_STAB_FINT*STABILIZATION_CONTROL_COEF
./FINT.F90-1197-                    ZFINT3=ZFINT3*MAG_FINT/MAG_STAB_FINT*STABILIZATION_CONTROL_COEF
./FINT.F90-1198-                END IF
./FINT.F90-1199-             END IF
./FINT.F90-1200-            END IF
./FINT.F90-1201-            
./FINT.F90-1202-            !DEBUG
./FINT.F90-1203-            !IF (MAG_STAB_FINT.GT.(1.0e-6)) THEN
./FINT.F90-1204-            !CONTINUE
./FINT.F90-1205-            !END IF
./FINT.F90-1206-
./FINT.F90:1207:            DO J = 1, LN
./FINT.F90-1208-
./FINT.F90-1209-                JJ = LSTACK(J)
./FINT.F90-1210-
./FINT.F90:1211:                DO K = 1, 3
./FINT.F90:1212:                    !IT DOESNT LOOK LIKE X_MOM GETS ASSIGNED ANYTHING! FIX NSNI!
./FINT.F90-1213-                    ID_RANK = OMP_get_thread_num()
./FINT.F90-1214-                    FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) + XFINT3(J,K) *VOL*DET * G_X_MOM(I)
./FINT.F90-1215-                    FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) + YFINT3(J,K) *VOL*DET * G_Y_MOM(I)
./FINT.F90-1216-                    FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) + ZFINT3(J,K) *VOL*DET * G_Z_MOM(I)
./FINT.F90-1217-
./FINT.F90:1218:                END DO
./FINT.F90-1219-
./FINT.F90:1220:            END DO
./FINT.F90-1221-
./FINT.F90-1222-        END IF !NSNI
./FINT.F90-1223-
./FINT.F90-1224-
./FINT.F90:1225:    END DO !INTEGRATION POINT (NODE) LOOP
./FINT.F90:1226:    !$OMP END DO
./FINT.F90-1227-    !$OMP END PARALLEL
./FINT.F90-1228-
./FINT.F90-1229-
./FINT.F90-1230-
./FINT.F90-1231-    !$OMP PARALLEL PRIVATE(ID_RANK) SHARED(NCORES_INPUT,GINT_WORK_TEMP)
./FINT.F90-1232-    GINT_WORK =  GINT_WORK+SUM(GINT_WORK_TEMP(1:NCORES_INPUT))
./FINT.F90-1233-    !$OMP END PARALLEL
./FINT.F90-1234-
./FINT.F90-1235-    !
./FINT.F90-1236-    !FINT_TEMP TO HOLD THE VALUES FOR OPENMP REDUCE(ASSEMBLE,ADD) IN THE END
./FINT.F90-1237-    !
./FINT.F90-1238-    !$OMP PARALLEL PRIVATE(I,K,ID_RANK) SHARED(FINT_TEMP,FEXT_TEMP,NCORES_INPUT,GINT_WORK_TEMP)
./FINT.F90:1239:    !$OMP DO
./FINT.F90:1240:    DO I = 1, GNUMP
./FINT.F90:1241:        DO K = 1, 3
./FINT.F90-1242-            FINT((I-1)*3+K) =  SUM(FINT_TEMP(1:NCORES_INPUT,K,I))
./FINT.F90-1243-            FEXT((I-1)*3+K) =  SUM(FEXT_TEMP(1:NCORES_INPUT,K,I))
./FINT.F90:1244:        END DO
./FINT.F90:1245:    END DO
./FINT.F90:1246:    !$OMP END DO
./FINT.F90-1247-    !$OMP END PARALLEL
./FINT.F90-1248-
./FINT.F90-1249-
./FINT.F90-1250-    IF (AUTO_TS) THEN
./FINT.F90:1251:        !DO TIME STEP CALCS
./FINT.F90-1252-
./FINT.F90:1253:        DO I = 1, GNUMP
./FINT.F90-1254-
./FINT.F90-1255-            LN = GN(I)
./FINT.F90-1256-            LSTART = GSTART(I)
./FINT.F90-1257-            !
./FINT.F90-1258-            ! GET THE NEIGHBOR LIST
./FINT.F90-1259-            !
./FINT.F90:1260:            DO J = 1, LN
./FINT.F90-1261-                LSTACK(J) = GSTACK(LSTART+J-1)
./FINT.F90:1262:            END DO
./FINT.F90-1263-
./FINT.F90-1264-            !FIND THE CHARACTERISTIC DISTANCES
./FINT.F90-1265-
./FINT.F90-1266-            XI=GCOO_CUURENT(1,I)
./FINT.F90-1267-            YI=GCOO_CUURENT(2,I)
./FINT.F90-1268-            ZI=GCOO_CUURENT(3,I)
./FINT.F90-1269-                    !
./FINT.F90-1270-					! USE THE UNDEFORMED CONFIGURATION
./FINT.F90-1271-					!
./FINT.F90-1272-            XI=GCOO(1,I)
./FINT.F90-1273-            YI=GCOO(2,I)
./FINT.F90-1274-            ZI=GCOO(3,I)
./FINT.F90-1275-
./FINT.F90-1276-            FIRST = .TRUE.
./FINT.F90-1277-
./FINT.F90-1278-			IF (LINIT) THEN
./FINT.F90-1279-			
./FINT.F90:1280:            DO J = 1, LN
./FINT.F90-1281-
./FINT.F90-1282-                JJ = LSTACK(J)
./FINT.F90-1283-
./FINT.F90-1284-                IF (JJ.NE.I) THEN
./FINT.F90-1285-
./FINT.F90-1286-                    XJ=GCOO_CUURENT(1,JJ)
./FINT.F90-1287-                    YJ=GCOO_CUURENT(2,JJ)
./FINT.F90-1288-                    ZJ=GCOO_CUURENT(3,JJ)
./FINT.F90-1289-                    !
./FINT.F90-1290-					! USE THE UNDEFORMED CONFIGURATION
--
./FINT.F90-1297-
./FINT.F90-1298-                    IF (FIRST) THEN
./FINT.F90-1299-                        GCHAR_DIST(I) = DIST
./FINT.F90-1300-                        FIRST = .FALSE.
./FINT.F90-1301-                    ELSE
./FINT.F90-1302-                        GCHAR_DIST(I) = MIN(GCHAR_DIST(I),DIST)
./FINT.F90-1303-                    END IF
./FINT.F90-1304-
./FINT.F90-1305-                END IF
./FINT.F90-1306-
./FINT.F90:1307:            END DO !J=1,GNUMP (NEIGHBOR NODES)
./FINT.F90-1308-			
./FINT.F90-1309-			END IF
./FINT.F90-1310-
./FINT.F90-1311-            DLT_TEMP = GCHAR_DIST(I) / GMAX_WVEL(I) !* 0.2d0
./FINT.F90-1312-
./FINT.F90-1313-
./FINT.F90-1314-            IF (I.EQ.1) THEN
./FINT.F90-1315-                DLT_FINT = DLT_TEMP
./FINT.F90-1316-            ELSE
./FINT.F90-1317-
./FINT.F90-1318-                IF (DLT_TEMP.LT.DLT_FINT) THEN
./FINT.F90-1319-                    DLT_FINT = DLT_TEMP
./FINT.F90-1320-                END IF
./FINT.F90-1321-                DLT_FINT = MIN(DLT_TEMP,DLT_FINT)
./FINT.F90-1322-            END IF
./FINT.F90-1323-
./FINT.F90:1324:        END DO
./FINT.F90-1325-
./FINT.F90-1326-        DLT_FINT = DLT_FINT*DLT_FAC
./FINT.F90-1327-
./FINT.F90-1328-
./FINT.F90-1329-
./FINT.F90-1330-    END IF !CALC TIME STEP
./FINT.F90-1331-
./FINT.F90-1332-
./FINT.F90-1333-    DEALLOCATE(FINT_TEMP)
./FINT.F90-1334-    DEALLOCATE(GINT_WORK_TEMP)
--
./FINT_PD.F90-48-	  !
./FINT_PD.F90-49-	  !
./FINT_PD.F90-50-	  !********** GLOBAL VARIABLES **********
./FINT_PD.F90-51-	  !
./FINT_PD.F90-52-	  !GLOBAL IN
./FINT_PD.F90-53-	  !
./FINT_PD.F90-54-	  !
./FINT_PD.F90-55-	  !DISCRETIZATION INFO
./FINT_PD.F90-56-	  !
./FINT_PD.F90-57-	  INTEGER:: GNUMP                         !NUMBER OF NODES
./FINT_PD.F90:58:	  DOUBLE PRECISION:: GCOO(3,GNUMP)        !COORDINATE FOR EACH NODE
./FINT_PD.F90:59:	  DOUBLE PRECISION:: GCOO_CUURENT(3,GNUMP) !CUURENT COORDINATE FOR EACH NODE
./FINT_PD.F90:60:	  DOUBLE PRECISION:: GWIN(3,GNUMP)        !WINDOWS FOR EACH NODE
./FINT_PD.F90:61:	  DOUBLE PRECISION:: GSM_LEN(6,GNUMP)     !SMOOTHING LENGTHS FOR EACH NODE
./FINT_PD.F90-62-	    ! (1-6) = (+X, -X, +Y, -Y, +Z, -Z)
./FINT_PD.F90:63:	  DOUBLE PRECISION:: GSM_VOL(GNUMP)       !VOLUME OF SMOOTHING ZONE
./FINT_PD.F90:64:	  DOUBLE PRECISION:: GSM_AREA(3,GNUMP)    !AREAS OF SMOOTHING ZONE SIDES
./FINT_PD.F90-65-	  INTEGER:: GN(GNUMP)                     !NUMBER OF NEIGHBORS FOR EACH NODE
./FINT_PD.F90-66-	  INTEGER:: GSTART(GNUMP)                 !START LOCATION OF NODE NEIOGHBORS IN STACK
./FINT_PD.F90-67-	  INTEGER:: DIM_NN_LIST                   !SIZE OF NEIGHBOR STACK
./FINT_PD.F90-68-	  INTEGER:: GSTACK(DIM_NN_LIST)           !NEIGHBORS FOR EACH NODE (STACKED)
./FINT_PD.F90:69:	  DOUBLE PRECISION:: GSTACK_SHP(DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:70:	  DOUBLE PRECISION:: GSTACK_DSHP(3,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:71:	  DOUBLE PRECISION:: GSTACK_DDSHP(6,DIM_NN_LIST)       !SHAPES (STACKED)
./FINT_PD.F90:72:	  DOUBLE PRECISION:: GINVK(3,3,GNUMP) 
./FINT_PD.F90-73-      
./FINT_PD.F90:74:	  DOUBLE PRECISION:: GCHAR_DIST(GNUMP),   GMAX_WVEL(GNUMP)
./FINT_PD.F90-75-	  
./FINT_PD.F90-76-	  INTEGER:: GMAXN                             !MAX NUMBER OF NEIGHBORS FOR ALL NODES
./FINT_PD.F90-77-	  INTEGER:: GGHOST(GNUMP)                 !FLAG FOR GHOST NODES (GHOST = 1)
./FINT_PD.F90-78-      
./FINT_PD.F90-79-      LOGICAL:: GEBC_NODES(GNUMP)
./FINT_PD.F90-80-      
./FINT_PD.F90:81:	  DOUBLE PRECISION:: GVOL(GNUMP)          !VOLUME OF EACH NODE
./FINT_PD.F90:82:	  DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
./FINT_PD.F90-83-      
./FINT_PD.F90:84:      DOUBLE PRECISION::DLT !GC
./FINT_PD.F90-85-      
./FINT_PD.F90-86-	  !
./FINT_PD.F90-87-	  !STATE AND FIELD VARIABLES
./FINT_PD.F90-88-	  !
./FINT_PD.F90:89:	  DOUBLE PRECISION:: GSTRESS(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT_PD.F90:90:	  DOUBLE PRECISION:: GSTRAIN(6,GNUMP)     !CAUCHY STRESS OF EACH NODE
./FINT_PD.F90:91:	  DOUBLE PRECISION:: GSTATE(20,GNUMP)     !STATE VARIABLES OF EACH NODE
./FINT_PD.F90:92:	  DOUBLE PRECISION:: GPROP(30,GNUMP)     !MATERIAL PROPERTIES OF EACH NODE
./FINT_PD.F90:93:	  DOUBLE PRECISION:: GDINC(3*GNUMP) ,GDINC_TOT(3*GNUMP)      !DISPLACEMENT INCREMENT (PREDICTOR) OF EACH NODE
./FINT_PD.F90-94-	  INTEGER::          GMAT_TYPE(GNUMP)    !MATERIAL TYPE OF EACH NODE
./FINT_PD.F90-95-	  !
./FINT_PD.F90:96:	  DOUBLE PRECISION:: G_H_STRESS(6,GNUMP)!GC
./FINT_PD.F90:97:	  DOUBLE PRECISION:: G_S_STRESS(6,GNUMP)!GC
./FINT_PD.F90-98-
./FINT_PD.F90-99-	  !GLOBAL OUT
./FINT_PD.F90:100:	  DOUBLE PRECISION:: FINT(GNUMP*3)
./FINT_PD.F90:101:	  DOUBLE PRECISION:: DLT_FINT
./FINT_PD.F90-102-	  !
./FINT_PD.F90-103-	  !********** LOCAL VARIABLES **********
./FINT_PD.F90-104-	  INTEGER:: I,J,K,L,JJ               !INDICIES
./FINT_PD.F90:105:	  DOUBLE PRECISION:: LCOO(3)    !COORDINATE AT A NODE IN INITIAL CONFIGURATION
./FINT_PD.F90:106:	  DOUBLE PRECISION:: LCOO_T(3)    !COORDINATE AT A NODE IN CURRENT CONFIGURATION      
./FINT_PD.F90:107:	  DOUBLE PRECISION:: LWIN(3) !WINDOW A NODE
./FINT_PD.F90:108:	  DOUBLE PRECISION:: VOL !NODAL VOLUME (ACTUAL INTEGRATION WEIGHT
./FINT_PD.F90:109:	  DOUBLE PRECISION:: LSM_LEN(6)  !SMOOTHING LENGTHS A NODE
./FINT_PD.F90:110:	  DOUBLE PRECISION:: LSM_PTS(3,6)  !SMOOTHING POINT POSITION
./FINT_PD.F90:111:	  DOUBLE PRECISION:: SM_COO(3)     !TEMPORARY SMOOTHING POINT POSITION
./FINT_PD.F90:112:	  DOUBLE PRECISION:: LSM_VOL       !VOLUME OF SMOOTHING ZONE
./FINT_PD.F90:113:	  DOUBLE PRECISION:: LSM_AOV(6)   !AREA OVER VOLUME OF SMOOTHING ZONE SIDES/ZONES
./FINT_PD.F90:114:	  DOUBLE PRECISION:: LSTRESS(6)     !CAUCHY STRESS OF A NODE
./FINT_PD.F90:115:	  DOUBLE PRECISION:: LSTRESS_PREDICTOR(6)     !ELASTIC PREDICTOR STRESS
./FINT_PD.F90:116:      DOUBLE PRECISION:: LSTRAIN(6)
./FINT_PD.F90:117:      DOUBLE PRECISION:: L_H_STRESS(6)!GC: FOR VISCOELASTIC
./FINT_PD.F90:118:	  DOUBLE PRECISION:: L_S_STRESS(6)!GC
./FINT_PD.F90-119-
./FINT_PD.F90-120-
./FINT_PD.F90:121:      DOUBLE PRECISION:: G_X_MOM(GNUMP),G_Y_MOM(GNUMP),G_Z_MOM(GNUMP)
./FINT_PD.F90-122-      
./FINT_PD.F90-123-      
./FINT_PD.F90:124:	  DOUBLE PRECISION:: LSTATE(20)      !STATE VARIABLES OF A NODE
./FINT_PD.F90:125:	  DOUBLE PRECISION:: LPROP(30)     !MATERIAL PROPERTIES OF A NODE
./FINT_PD.F90-126-	  INTEGER:: LMAT_TYPE    !MATERIAL TYPE OF EACH NODE
./FINT_PD.F90-127-      LOGICAL:: SELF_EBC
./FINT_PD.F90-128-	  !
./FINT_PD.F90-129-	  INTEGER:: LSTART              !LOCATION OF START IN STACK
./FINT_PD.F90-130-	  INTEGER:: LGHOST              !FLAG FOR GHOST NODES (GHOST = 1)
./FINT_PD.F90-131-	  INTEGER:: LSTACK(GMAXN)       !LOCAL LIST/STACK OF NEIGHBORS
./FINT_PD.F90-132-	  INTEGER:: LN                  !NUMBER OF NEIGHBORS FOR A NODE
./FINT_PD.F90:133:	  DOUBLE PRECISION:: LVOL       !VOLUME OF A NODE
./FINT_PD.F90:134:	  DOUBLE PRECISION:: SHP(GMAXN), SHPD(3,GMAXN), SHPD_TRASH(3,GMAXN)       !SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90:135:	  DOUBLE PRECISION:: SHPDTMP(3,GMAXN)       !TEMPORARY SHAPE FUNCTIONS AND GRADIENTS
./FINT_PD.F90-136-	  
./FINT_PD.F90:137:	  DOUBLE PRECISION:: SHPD_SM(3,GMAXN)        !SHAPE FUNCTION SMOOTHED GRADIENTS
./FINT_PD.F90:138:	  DOUBLE PRECISION:: SHPDD_SM(6,GMAXN)       !SHAPE FUNCTION SMOOTHED SMOOTHED GRADIENTS
./FINT_PD.F90:139:	  DOUBLE PRECISION:: SHPDTEMP(9) !TEMPORARY VARIABLE FOR SHAPES FOR STABILZIATION
./FINT_PD.F90:140:	  DOUBLE PRECISION:: SHP6(GMAXN,6), SHPD6(3,GMAXN,6) !SHAPE FUNCTION AND SM. GRAD. AT SMOOTHING POINTS
./FINT_PD.F90:141:      DOUBLE PRECISION:: LMAT(3,3) !INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP      
./FINT_PD.F90:142:	  DOUBLE PRECISION:: LDINC(3,GMAXN),LDINC_TOT(3,GMAXN)       !DISPLACEMENT INCREMENT (PREDICTOR) OF A NODESTRAIN
./FINT_PD.F90:143:	  DOUBLE PRECISION:: LCOO_CUURENT(3,GMAXN)  !CURRENT COORDINATES OF THE NEIGBORS
./FINT_PD.F90:144:	  DOUBLE PRECISION:: STRAIN(6)       !INCREMENTALLY OBJECTIVE STRAIN
./FINT_PD.F90:145:	  DOUBLE PRECISION:: ELAS_MAT(6,6)
./FINT_PD.F90:146:	  DOUBLE PRECISION:: BMAT(6,3)
./FINT_PD.F90:147:	  DOUBLE PRECISION:: BMAT_T(3,6)
./FINT_PD.F90:148:	  DOUBLE PRECISION:: FINT3(3),FINT3_J(3),INVK(3,3),INVK_J(3,3)
./FINT_PD.F90:149:	  DOUBLE PRECISION:: ROT(6,6) !ROTATION MATRIX
./FINT_PD.F90-150-	  LOGICAL:: LINIT
./FINT_PD.F90:151:	  DOUBLE PRECISION:: FMAT(3,3), IFMAT(3,3),X_0(3),X_t(3), DX_t(3,1), PKSTRESS(3,3), TEMP_STRESS(3,3), DX_t_J(3,1)
./FINT_PD.F90:152:	  DOUBLE PRECISION, ALLOCATABLE:: FINT_TEMP(:,:,:)
./FINT_PD.F90:153:	  DOUBLE PRECISION:: DET      
./FINT_PD.F90:154:      !DOUBLE PRECISION:: FINT_TEMP(20,3,GNUMP)
./FINT_PD.F90-155-      INTEGER:: ID_RANK
./FINT_PD.F90-156-      
./FINT_PD.F90-157-      !0329
./FINT_PD.F90:158:      DOUBLE PRECISION:: PMAT(6,3)
./FINT_PD.F90:159:	  DOUBLE PRECISION:: FBOD(3),FGRAV(3) ! TO DO
./FINT_PD.F90:160:      DOUBLE PRECISION:: MODEL_BODYFORCE(3,GNUMP)
./FINT_PD.F90-161-      
./FINT_PD.F90-162-      !NSNI
./FINT_PD.F90-163-      INTEGER::XMAP(3),YMAP(3),ZMAP(3)
./FINT_PD.F90:164:      DOUBLE PRECISION::XLMAT(3,3),YLMAT(3,3),ZLMAT(3,3)
./FINT_PD.F90:165:      DOUBLE PRECISION:: DX_STRAIN(6), DY_STRAIN(6), DZ_STRAIN(6)
./FINT_PD.F90:166:      DOUBLE PRECISION::  LOCAL_DX_STRESS(6,GNUMP)
./FINT_PD.F90:167:      DOUBLE PRECISION::  LOCAL_DY_STRESS(6,GNUMP)
./FINT_PD.F90:168:      DOUBLE PRECISION::  LOCAL_DZ_STRESS(6,GNUMP)
./FINT_PD.F90-169-      
./FINT_PD.F90:170:      DOUBLE PRECISION::  LDX_STRESS(6)
./FINT_PD.F90:171:      DOUBLE PRECISION::  LDY_STRESS(6)
./FINT_PD.F90:172:      DOUBLE PRECISION::  LDZ_STRESS(6)
./FINT_PD.F90:173:      DOUBLE PRECISION:: CMAT(6,6), LAMDA, MU, LAMDA_PLUS_2MU
./FINT_PD.F90:174:      DOUBLE PRECISION:: XBMAT(6,3), XBMAT_T(3,6), XFINT3(3)
./FINT_PD.F90:175:      DOUBLE PRECISION:: YBMAT(6,3), YBMAT_T(3,6), YFINT3(3)
./FINT_PD.F90:176:      DOUBLE PRECISION:: ZBMAT(6,3), ZBMAT_T(3,6), ZFINT3(3)
./FINT_PD.F90-177-      
./FINT_PD.F90:178:      DOUBLE PRECISION:: TEMP_DEBUG(3)
./FINT_PD.F90:179:	  DOUBLE PRECISION:: GINT_WORK !NOT USED
./FINT_PD.F90:180:      DOUBLE PRECISION:: D(6)
./FINT_PD.F90-181-      
./FINT_PD.F90-182-      LOGICAL:: NSNI_FLAG
./FINT_PD.F90-183-      !
./FINT_PD.F90-184-      ! FOR TIME STEP CALCS
./FINT_PD.F90-185-	  !
./FINT_PD.F90-186-	  LOGICAL:: FIRST
./FINT_PD.F90:187:	  DOUBLE PRECISION:: STRESS_INC(6), STRAIN_INC(6), POISS, YOUNG, BULK, SHEAR,  &
./FINT_PD.F90-188-	                     STRESS_INC_DEV(6), STRESS_INC_SPHR(6), STRAIN_INC_DEV(6), STRAIN_INC_SPHR(6),  &
./FINT_PD.F90-189-	                     NORM_STRESS_INC_DEV, NORM_STRESS_INC_SPHR, NORM_STRAIN_INC_DEV, NORM_STRAIN_INC_SPHR,   &
./FINT_PD.F90-190-	                     SHEAR_TRIAL, BULK_TRIAL, PMOD, DENSITY, MAXMOD, MAX_VEL,   &
./FINT_PD.F90-191-	                     DIST, XJ, YJ, ZJ, CHAR_DIST, DLT_TEMP, XI, YI, ZI 
./FINT_PD.F90-192-						 
./FINT_PD.F90-193-	  LOGICAL:: HODIV
./FINT_PD.F90-194-		
./FINT_PD.F90-195-	  GINT_WORK = 0.0d0
./FINT_PD.F90-196-	  !
./FINT_PD.F90-197-	  !
--
./FINT_PD.F90-202-	  !*********************************************************
./FINT_PD.F90-203-	  !
./FINT_PD.F90-204-	  HODIV=.FALSE.
./FINT_PD.F90-205-	  !
./FINT_PD.F90-206-	  !INITIALIZE FINT
./FINT_PD.F90-207-	  !
./FINT_PD.F90-208-	  !
./FINT_PD.F90-209-	  !
./FINT_PD.F90-210-	  !LOOP OVER THE NODE STACK
./FINT_PD.F90-211-	  !
./FINT_PD.F90:212:	  !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT_PD.F90-213-	  !
./FINT_PD.F90-214-	  FINT = 0.0d0
./FINT_PD.F90-215-      DET = 1.d0
./FINT_PD.F90-216-	   !REDUCTION(+:FINT)
./FINT_PD.F90-217-	  !
./FINT_PD.F90-218-      ALLOCATE(FINT_TEMP(NCORES_INPUT,3,GNUMP))
./FINT_PD.F90-219-      FINT_TEMP = 0.D0
./FINT_PD.F90-220-      
./FINT_PD.F90-221-	  
./FINT_PD.F90-222-	  
./FINT_PD.F90-223-	  
./FINT_PD.F90-224-	  
./FINT_PD.F90-225-	  
./FINT_PD.F90-226-	  
./FINT_PD.F90-227-            IF (LINIT) THEN
./FINT_PD.F90-228-			
./FINT_PD.F90:229:			!WE NEED TO GRAM ALL THE K VALUES BEFORE WE DO ANYTHING
./FINT_PD.F90-230-	  
./FINT_PD.F90-231-	  
./FINT_PD.F90-232-      !$OMP PARALLEL DEFAULT(FIRSTPRIVATE) SHARED( GNUMP, GCOO, GCOO_CUURENT, GWIN, GSM_LEN, GSM_VOL, GSM_AREA, GN, GSTART, &
./FINT_PD.F90-233-      !$OMP                                       DIM_NN_LIST, GSTACK, GSTACK_SHP, GSTACK_DSHP, GSTACK_DDSHP, GINVK, & 
./FINT_PD.F90-234-      !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
./FINT_PD.F90-235-      !$OMP                                       GSTRESS, LOCAL_DX_STRESS, LOCAL_DY_STRESS, LOCAL_DZ_STRESS, &
./FINT_PD.F90-236-      !$OMP                                       GSTRAIN, &
./FINT_PD.F90-237-      !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP)       
./FINT_PD.F90-238-      
./FINT_PD.F90-239-      ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90-240-
./FINT_PD.F90:241:      !$OMP DO   
./FINT_PD.F90:242:	  DO I = 1, GNUMP
./FINT_PD.F90-243-	    !
./FINT_PD.F90-244-	    !
./FINT_PD.F90-245-	    !GRAB NODE INFORMATION FROM LIST
./FINT_PD.F90-246-		!
./FINT_PD.F90-247-		LCOO(:) = GCOO(:,I)
./FINT_PD.F90-248-        LCOO_T(:) = GCOO_CUURENT(:,I)
./FINT_PD.F90-249-		VOL = GVOL(I)
./FINT_PD.F90-250-		LWIN(:) = GWIN(:,I)
./FINT_PD.F90-251-		LSM_LEN(:) = GSM_LEN(:,I)
./FINT_PD.F90-252-		LN = GN(I)
--
./FINT_PD.F90-259-        IF (GEBC_NODES(I)) THEN
./FINT_PD.F90-260-          SELF_EBC = .TRUE.
./FINT_PD.F90-261-        ELSE
./FINT_PD.F90-262-          SELF_EBC = .FALSE.
./FINT_PD.F90-263-        END IF
./FINT_PD.F90-264-		!
./FINT_PD.F90-265-		! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT_PD.F90-266-		!
./FINT_PD.F90-267-		! GET THE NEIGHBOR LIST
./FINT_PD.F90-268-		!
./FINT_PD.F90:269:		DO J = 1, LN
./FINT_PD.F90-270-		  LSTACK(J) = GSTACK(LSTART+J-1)
./FINT_PD.F90:271:		END DO
./FINT_PD.F90-272-		
./FINT_PD.F90-273-        
./FINT_PD.F90-274-                    CALL UDFM_SHAPE_TENSOR(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT_PD.F90-275-                       QL, QL_COEF,QL_LEN, &
./FINT_PD.F90-276-                       SHP, INVK) 
./FINT_PD.F90-277-					   
./FINT_PD.F90-278-            
./FINT_PD.F90:279:		        DO J = 1, LN
./FINT_PD.F90-280-		          GSTACK_SHP(LSTART+J-1) = SHP(J)  !STORES THE INFLUENCE FUNCTION
./FINT_PD.F90:281:		        END DO
./FINT_PD.F90-282-                
./FINT_PD.F90-283-                GINVK(:,:,I) =  INVK(:,:)
./FINT_PD.F90-284-				
./FINT_PD.F90:285:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90:286:      !$OMP END DO
./FINT_PD.F90-287-      !$OMP END PARALLEL	 
./FINT_PD.F90-288-	  
./FINT_PD.F90-289-	  
./FINT_PD.F90-290-	  END IF
./FINT_PD.F90-291-	  
./FINT_PD.F90-292-	  
./FINT_PD.F90-293-	  
./FINT_PD.F90-294-      !$OMP PARALLEL DEFAULT(FIRSTPRIVATE) SHARED( GNUMP, GCOO, GCOO_CUURENT, GWIN, GSM_LEN, GSM_VOL, GSM_AREA, GN, GSTART, &
./FINT_PD.F90-295-      !$OMP                                       DIM_NN_LIST, GSTACK, GSTACK_SHP, GSTACK_DSHP, GSTACK_DDSHP, GINVK, & 
./FINT_PD.F90-296-      !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
./FINT_PD.F90-297-      !$OMP                                       GSTRESS, LOCAL_DX_STRESS, LOCAL_DY_STRESS, LOCAL_DZ_STRESS, &
./FINT_PD.F90-298-      !$OMP                                       GSTRAIN, &
./FINT_PD.F90-299-      !$OMP                                       GSTATE, GPROP, GDINC,GDINC_TOT, GMAT_TYPE, FINT, DLT_FINT, FINT_TEMP)       
./FINT_PD.F90-300-      
./FINT_PD.F90-301-      ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90-302-
./FINT_PD.F90:303:      !$OMP DO   
./FINT_PD.F90:304:	  DO I = 1, GNUMP
./FINT_PD.F90-305-	    !
./FINT_PD.F90-306-	    !
./FINT_PD.F90-307-	    !GRAB NODE INFORMATION FROM LIST
./FINT_PD.F90-308-		!
./FINT_PD.F90-309-		LCOO(:) = GCOO(:,I)
./FINT_PD.F90-310-        LCOO_T(:) = GCOO_CUURENT(:,I)
./FINT_PD.F90-311-		VOL = GVOL(I)
./FINT_PD.F90-312-		LWIN(:) = GWIN(:,I)
./FINT_PD.F90-313-		LSM_LEN(:) = GSM_LEN(:,I)
./FINT_PD.F90-314-		LN = GN(I)
--
./FINT_PD.F90-319-		LMAT_TYPE = GMAT_TYPE(I)
./FINT_PD.F90-320-		!
./FINT_PD.F90-321-        IF (GEBC_NODES(I)) THEN
./FINT_PD.F90-322-          SELF_EBC = .TRUE.
./FINT_PD.F90-323-        ELSE
./FINT_PD.F90-324-          SELF_EBC = .FALSE.
./FINT_PD.F90-325-        END IF
./FINT_PD.F90-326-		!
./FINT_PD.F90-327-		! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT_PD.F90-328-		!
./FINT_PD.F90:329:		DO J = 1, 6
./FINT_PD.F90-330-		  LSTRESS(J) = GSTRESS(J,I)
./FINT_PD.F90-331-		  LSTRAIN(J) = GSTRAIN(J,I)
./FINT_PD.F90-332-		  L_H_STRESS(J) = G_H_STRESS(J,I)!GC
./FINT_PD.F90-333-          L_S_STRESS(J) = G_S_STRESS(J,I)!GC
./FINT_PD.F90:334:		END DO
./FINT_PD.F90-335-		
./FINT_PD.F90:336:        DO J = 1, 30
./FINT_PD.F90-337-          LPROP(J) = GPROP(J,I)
./FINT_PD.F90:338:        END DO
./FINT_PD.F90-339-        
./FINT_PD.F90:340:		DO J = 1, 20
./FINT_PD.F90-341-		  LSTATE(J) = GSTATE(J,I)
./FINT_PD.F90:342:		END DO
./FINT_PD.F90-343-	    !
./FINT_PD.F90-344-		! GET THE NEIGHBOR LIST
./FINT_PD.F90-345-		!
./FINT_PD.F90:346:		DO J = 1, LN
./FINT_PD.F90-347-		  LSTACK(J) = GSTACK(LSTART+J-1)
./FINT_PD.F90:348:		END DO
./FINT_PD.F90-349-		!
./FINT_PD.F90-350-		! GET THE INCREMENTS OF DISPLACEMENTS FOR NEIGHBORS
./FINT_PD.F90-351-		!
./FINT_PD.F90:352:		DO J = 1, LN
./FINT_PD.F90-353-		  JJ = LSTACK(J)
./FINT_PD.F90-354-		  LDINC(1,J) = GDINC((JJ-1)*3+1)
./FINT_PD.F90-355-		  LDINC(2,J) = GDINC((JJ-1)*3+2)
./FINT_PD.F90-356-		  LDINC(3,J) = GDINC((JJ-1)*3+3)
./FINT_PD.F90:357:		END DO
./FINT_PD.F90-358-		!
./FINT_PD.F90-359-		! GET THE GENERALIZED DISPLACEMENTS FOR NEIGHBORS
./FINT_PD.F90-360-		!
./FINT_PD.F90:361:		DO J = 1, LN
./FINT_PD.F90-362-		  JJ = LSTACK(J)
./FINT_PD.F90-363-		  LDINC_TOT(1,J) = GDINC_TOT((JJ-1)*3+1)
./FINT_PD.F90-364-		  LDINC_TOT(2,J) = GDINC_TOT((JJ-1)*3+2)
./FINT_PD.F90-365-		  LDINC_TOT(3,J) = GDINC_TOT((JJ-1)*3+3)
./FINT_PD.F90:366:		END DO        
./FINT_PD.F90-367-		!
./FINT_PD.F90-368-		! GET THE CURRENT COORDINATES FOR NEIGHBORS
./FINT_PD.F90-369-		!
./FINT_PD.F90:370:		DO J = 1, LN
./FINT_PD.F90-371-		  JJ = LSTACK(J)
./FINT_PD.F90-372-		  LCOO_CUURENT(1,J) = GCOO_CUURENT(1,JJ)
./FINT_PD.F90-373-		  LCOO_CUURENT(2,J) = GCOO_CUURENT(2,JJ)
./FINT_PD.F90-374-		  LCOO_CUURENT(3,J) = GCOO_CUURENT(3,JJ)
./FINT_PD.F90:375:		END DO        
./FINT_PD.F90-376-        
./FINT_PD.F90-377-        IF ((LLAGRANGIAN).AND.(.NOT.LINIT)) THEN
./FINT_PD.F90-378-		  !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT_PD.F90-379-    	  !IF (.FALSE.) THEN
./FINT_PD.F90-380-
./FINT_PD.F90:381:            DO J = 1, LN
./FINT_PD.F90-382-		      SHP(J) =   GSTACK_SHP(LSTART+J-1)
./FINT_PD.F90:383:		    END DO
./FINT_PD.F90-384-              INVK(:,:) =   GINVK(:,:,I)
./FINT_PD.F90-385-			  
./FINT_PD.F90-386-		   
./FINT_PD.F90-387-            IF (LFINITE_STRAIN) THEN
./FINT_PD.F90-388-            
./FINT_PD.F90-389-		        FMAT = 0.0d0
./FINT_PD.F90-390-                FMAT(1,1) = 1.d0
./FINT_PD.F90-391-                FMAT(2,2) = 1.d0
./FINT_PD.F90-392-                FMAT(3,3) = 1.d0
./FINT_PD.F90-393-		        !
--
./FINT_PD.F90-400-                   FMAT = MATMUL(FMAT, INVK)
./FINT_PD.F90-401-                   
./FINT_PD.F90-402-                CALL DETERMINANT(FMAT,DET) 
./FINT_PD.F90-403-                CALL INVERSE(FMAT, 3, IFMAT) 
./FINT_PD.F90-404-                
./FINT_PD.F90-405-		    END IF
./FINT_PD.F90-406-    		
./FINT_PD.F90-407-    		
./FINT_PD.F90-408-		ELSE
./FINT_PD.F90-409-		    !
./FINT_PD.F90:410:            ! TODO: CONDENSE ALL SHAPE FUNCTION CALCULATIONS
./FINT_PD.F90-411-            !
./FINT_PD.F90-412-            !
./FINT_PD.F90-413-            ! DIRECT NODAL INTEGRATION
./FINT_PD.F90-414-            !
./FINT_PD.F90-415-            IF (LLAGRANGIAN) THEN
./FINT_PD.F90-416-
./FINT_PD.F90-417-                    CALL UDFM_SHAPE_TENSOR(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT_PD.F90-418-                       QL, QL_COEF,QL_LEN, &
./FINT_PD.F90-419-                       SHP, INVK) 
./FINT_PD.F90-420-                
./FINT_PD.F90-421-                       
./FINT_PD.F90-422-                       
./FINT_PD.F90-423-            ELSE !GCOO_CUURENT
./FINT_PD.F90-424-			
./FINT_PD.F90-425-			! not implemented
./FINT_PD.F90-426-			
./FINT_PD.F90-427-            END IF
./FINT_PD.F90-428-			
./FINT_PD.F90:429:			!#TODO: GET RID OF REDUNDANT CALCS
./FINT_PD.F90-430-
./FINT_PD.F90-431-            
./FINT_PD.F90-432-            IF ((LLAGRANGIAN).AND.(LINIT)) THEN
./FINT_PD.F90-433-            
./FINT_PD.F90-434-                
./FINT_PD.F90:435:		        DO J = 1, LN
./FINT_PD.F90-436-		          GSTACK_SHP(LSTART+J-1) = SHP(J)  !STORES THE INFLUENCE FUNCTION
./FINT_PD.F90:437:		        END DO
./FINT_PD.F90-438-                
./FINT_PD.F90-439-                GINVK(:,:,I) =  INVK(:,:)
./FINT_PD.F90-440-                IFMAT = 0.d0
./FINT_PD.F90-441-                IFMAT(1,1) = 1.d0
./FINT_PD.F90-442-                IFMAT(2,2) = 1.d0
./FINT_PD.F90-443-                IFMAT(3,3) = 1.d0
./FINT_PD.F90-444-                FMAT = IFMAT
./FINT_PD.F90-445-                DET = 1.d0
./FINT_PD.F90-446-            
./FINT_PD.F90-447-            END IF
--
./FINT_PD.F90-491-		!
./FINT_PD.F90-492-
./FINT_PD.F90-493-		CALL CONSTITUTION(LSTRESS_PREDICTOR,LMAT_TYPE, LSTRAIN, STRAIN, LPROP, DLT, FMAT, & !IN
./FINT_PD.F90-494-		                  LSTATE, LSTRESS, L_S_STRESS, L_H_STRESS) !IN/OUT, OUT
./FINT_PD.F90-495-		!
./FINT_PD.F90-496-		! ********** SAVE STATE AND FEILD VARIABLES ********** 
./FINT_PD.F90-497-		!
./FINT_PD.F90-498-		!
./FINT_PD.F90-499-        ! UPDATE STATE VARIABLE TO GSTATE
./FINT_PD.F90-500-        !
./FINT_PD.F90:501:        DO J = 1, 20
./FINT_PD.F90-502-		  GSTATE(J,I) = LSTATE(J) 
./FINT_PD.F90:503:		END DO    
./FINT_PD.F90-504-        !
./FINT_PD.F90:505:		DO J = 1, 6
./FINT_PD.F90-506-		
./FINT_PD.F90-507-		  !GET INCREMENTS FOR TIME STEP PREDICTION
./FINT_PD.F90-508-		  STRESS_INC(J) = LSTRESS(J) - GSTRESS(J,I)
./FINT_PD.F90-509-		  STRAIN_INC(J) = LSTRAIN(J) - GSTRESS(J,I)
./FINT_PD.F90-510-		  
./FINT_PD.F90-511-		  !SAVE THE STRESSES
./FINT_PD.F90-512-		  GSTRESS(J,I) = LSTRESS(J)
./FINT_PD.F90-513-		  GSTRAIN(J,I) = LSTRAIN(J)
./FINT_PD.F90-514-
./FINT_PD.F90-515-		  G_H_STRESS(J,I) = L_H_STRESS(J)!GC
./FINT_PD.F90-516-          G_S_STRESS(J,I) = L_S_STRESS(J)!GC
./FINT_PD.F90-517-		  
./FINT_PD.F90:518:		END DO
./FINT_PD.F90-519-		
./FINT_PD.F90-520-		
./FINT_PD.F90-521-		
./FINT_PD.F90-522-	           POISS = LPROP(1)
./FINT_PD.F90-523-	           YOUNG = LPROP(2)
./FINT_PD.F90-524-	                     
./FINT_PD.F90-525-	           BULK = BULK_MOD(YOUNG,POISS)
./FINT_PD.F90-526-	           
./FINT_PD.F90-527-	           SHEAR = SHEAR_MOD(YOUNG,POISS)
./FINT_PD.F90-528-	           
--
./FINT_PD.F90-539-	           IF (LMAT_TYPE.EQ.3) THEN
./FINT_PD.F90-540-			     !FUDGE THE DRUCKER-PRAGER TIME STEP SO THAT THE FACTOR CAN BE 1.0
./FINT_PD.F90-541-	             GMAX_WVEL(I) = GMAX_WVEL(I)/0.15d0
./FINT_PD.F90-542-			   END IF
./FINT_PD.F90-543-			   
./FINT_PD.F90-544-		
./FINT_PD.F90-545-            
./FINT_PD.F90-546-		!
./FINT_PD.F90-547-		! ASSEMBLE THE INTERNAL FORCE
./FINT_PD.F90-548-		!
./FINT_PD.F90:549:        DO J = 1, LN
./FINT_PD.F90-550-		
./FINT_PD.F90-551-		  JJ = LSTACK(J)
./FINT_PD.F90-552-		  
./FINT_PD.F90-553-		   
./FINT_PD.F90-554-               
./FINT_PD.F90-555-			   IF (HODIV) THEN
./FINT_PD.F90-556-			   
./FINT_PD.F90-557-			   
./FINT_PD.F90-558-           !
./FINT_PD.F90-559-           !LSTRESS: CAUCHY STRESS --> FIRST PK STRESS
./FINT_PD.F90-560-           !
./FINT_PD.F90-561-           PKSTRESS = VTENSOR_2_TENSOR(LSTRESS)    
./FINT_PD.F90-562-		   
./FINT_PD.F90-563-           PKSTRESS = DET* MATMUL(PKSTRESS,TRANSPOSE(IFMAT))
./FINT_PD.F90-564-           
./FINT_PD.F90-565-		   !it should be the divergence of the nominal stress,
./FINT_PD.F90:566:		   !which is the first PK transposed. But this doesnt
./FINT_PD.F90-567-		   !work, so the theory and Joes implementation
./FINT_PD.F90-568-		   !should be checked, Im not quite sure how
./FINT_PD.F90-569-		   !Joe implemented the total Lagrangian formulation
./FINT_PD.F90-570-		   !and its relation to the new higher order
./FINT_PD.F90-571-		   !divergence operation (e.g., there is volume
./FINT_PD.F90-572-		   !twice in the internal force)
./FINT_PD.F90-573-		   ! -MH
./FINT_PD.F90-574-		   !
./FINT_PD.F90-575-			   !DIV(P^T)
./FINT_PD.F90-576-			   !PKSTRESS=TRANSPOSE(PKSTRESS)
--
./FINT_PD.F90-597-			  IF (1.eq.0) THEN
./FINT_PD.F90-598-			  WRITE(*,*)
./FINT_PD.F90-599-			  WRITE(*,*) 'INVK_J=', INVK_J
./FINT_PD.F90-600-			  WRITE(*,*)
./FINT_PD.F90-601-			  WRITE(*,*) 'DX_t_J=', DX_t_J
./FINT_PD.F90-602-			  WRITE(*,*)
./FINT_PD.F90-603-			  WRITE(*,*) 'FINT3_J=', FINT3_J
./FINT_PD.F90-604-			  WRITE(*,*)
./FINT_PD.F90-605-			  END IF
./FINT_PD.F90-606-           
./FINT_PD.F90:607:		       DO K = 1, 3
./FINT_PD.F90-608-                 ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90-609-             
./FINT_PD.F90-610-                    !
./FINT_PD.F90-611-                    !ASSEMBLE TO JJ
./FINT_PD.F90-612-                    !
./FINT_PD.F90-613-                    FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) - FINT3_J(K)*GVOL(I)*SHP(J)  * GVOL(JJ)
./FINT_PD.F90-614-                    !
./FINT_PD.F90-615-                    !ASSEMBLE TO I ITSELF
./FINT_PD.F90-616-                    !       
./FINT_PD.F90-617-                    FINT_TEMP(ID_RANK+1,K,I) = FINT_TEMP(ID_RANK+1,K,I) + FINT3(K)*GVOL(JJ)*SHP(J)    *GVOL(I)      
./FINT_PD.F90-618-             
./FINT_PD.F90-619-             
./FINT_PD.F90:620:		       END DO     
./FINT_PD.F90-621-			   
./FINT_PD.F90-622-			   
./FINT_PD.F90-623-			   
./FINT_PD.F90-624-			   ELSE
./FINT_PD.F90-625-			   
./FINT_PD.F90-626-           !
./FINT_PD.F90-627-           !LSTRESS: CAUCHY STRESS --> FIRST PK STRESS
./FINT_PD.F90-628-           !
./FINT_PD.F90-629-           PKSTRESS = VTENSOR_2_TENSOR(LSTRESS)    
./FINT_PD.F90-630-		   
--
./FINT_PD.F90-632-           
./FINT_PD.F90-633-           DX_t(:,1) = GCOO(:,I) - GCOO(:,JJ)            
./FINT_PD.F90-634-           
./FINT_PD.F90-635-           TEMP_STRESS = MATMUL(PKSTRESS,INVK) 
./FINT_PD.F90-636-		   
./FINT_PD.F90-637-           DX_t = MATMUL(TEMP_STRESS,DX_t)
./FINT_PD.F90-638-           
./FINT_PD.F90-639-           FINT3(1:3) = DX_t(1:3,1)  
./FINT_PD.F90-640-           
./FINT_PD.F90-641-		   
./FINT_PD.F90:642:		       DO K = 1, 3
./FINT_PD.F90-643-                 ID_RANK = OMP_get_thread_num()  !OMPJOE
./FINT_PD.F90-644-             
./FINT_PD.F90-645-                    !
./FINT_PD.F90-646-                    !ASSEMBLE TO JJ
./FINT_PD.F90-647-                    !
./FINT_PD.F90-648-                    FINT_TEMP(ID_RANK+1,K,JJ) = FINT_TEMP(ID_RANK+1,K,JJ) - FINT3(K)*GVOL(I)*SHP(J)  * GVOL(JJ)
./FINT_PD.F90-649-                    !
./FINT_PD.F90-650-                    !ASSEMBLE TO I ITSELF
./FINT_PD.F90-651-                    !       
./FINT_PD.F90-652-                    FINT_TEMP(ID_RANK+1,K,I) = FINT_TEMP(ID_RANK+1,K,I) + FINT3(K)*GVOL(JJ)*SHP(J)    *GVOL(I)      
./FINT_PD.F90-653-             
./FINT_PD.F90-654-             
./FINT_PD.F90:655:		       END DO     
./FINT_PD.F90-656-			   
./FINT_PD.F90-657-			   END IF
./FINT_PD.F90-658-             
./FINT_PD.F90-659-		   !END IF
./FINT_PD.F90-660-          
./FINT_PD.F90-661-          
./FINT_PD.F90-662-           
./FINT_PD.F90-663-		
./FINT_PD.F90:664:		END DO
./FINT_PD.F90-665-        
./FINT_PD.F90-666-        CONTINUE
./FINT_PD.F90-667-	  
./FINT_PD.F90-668-             
./FINT_PD.F90:669:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90:670:      !$OMP END DO
./FINT_PD.F90-671-      !$OMP END PARALLEL	  
./FINT_PD.F90-672-      !
./FINT_PD.F90-673-      !FINT_TEMP TO HOLD THE VALUES FOR OPENMP REDUCE(ASSEMBLE,ADD) IN THE END
./FINT_PD.F90-674-      !
./FINT_PD.F90-675-      !$OMP PARALLEL PRIVATE(I,K,ID_RANK) SHARED(FINT_TEMP,NCORES_INPUT)
./FINT_PD.F90:676:      !$OMP DO      
./FINT_PD.F90:677:      DO I = 1, GNUMP
./FINT_PD.F90:678:        DO K = 1, 3
./FINT_PD.F90-679-		    FINT((I-1)*3+K) =  SUM(FINT_TEMP(1:NCORES_INPUT,K,I)) 
./FINT_PD.F90:680:        END DO 
./FINT_PD.F90-681-      
./FINT_PD.F90:682:      END DO         
./FINT_PD.F90:683:      !$OMP END DO
./FINT_PD.F90-684-      !$OMP END PARALLEL 
./FINT_PD.F90-685-
./FINT_PD.F90-686-	  
./FINT_PD.F90-687-	  
./FINT_PD.F90-688-	  
./FINT_PD.F90-689-
./FINT_PD.F90-690-      IF (AUTO_TS) THEN
./FINT_PD.F90:691:      !DO TIME STEP CALCS
./FINT_PD.F90-692-	           
./FINT_PD.F90:693:      DO I = 1, GNUMP
./FINT_PD.F90-694-	  
./FINT_PD.F90-695-		LN = GN(I)
./FINT_PD.F90-696-		LSTART = GSTART(I)
./FINT_PD.F90-697-	    !
./FINT_PD.F90-698-		! GET THE NEIGHBOR LIST
./FINT_PD.F90-699-		!
./FINT_PD.F90:700:		DO J = 1, LN
./FINT_PD.F90-701-		  LSTACK(J) = GSTACK(LSTART+J-1)
./FINT_PD.F90:702:		END DO
./FINT_PD.F90-703-		
./FINT_PD.F90-704-	           !FIND THE CHARACTERISTIC DISTANCES
./FINT_PD.F90-705-                           
./FINT_PD.F90-706-	           XI=GCOO_CUURENT(1,I)
./FINT_PD.F90-707-	           YI=GCOO_CUURENT(2,I)
./FINT_PD.F90-708-	           ZI=GCOO_CUURENT(3,I)
./FINT_PD.F90-709-	           
./FINT_PD.F90-710-	           FIRST = .TRUE.
./FINT_PD.F90-711-                     
./FINT_PD.F90:712:		       DO J = 1, LN
./FINT_PD.F90-713-		       
./FINT_PD.F90-714-		         JJ = LSTACK(J)
./FINT_PD.F90-715-		         
./FINT_PD.F90-716-		         IF (JJ.NE.I) THEN
./FINT_PD.F90-717-		         
./FINT_PD.F90-718-		             XJ=GCOO_CUURENT(1,JJ)
./FINT_PD.F90-719-		             YJ=GCOO_CUURENT(2,JJ)
./FINT_PD.F90-720-		             ZJ=GCOO_CUURENT(3,JJ)
./FINT_PD.F90-721-                          
./FINT_PD.F90-722-		             DIST = DSQRT((XJ-XI)**2 + (YJ-YI)**2 + (ZJ-ZI)**2)
./FINT_PD.F90-723-                                   
./FINT_PD.F90-724-		             IF (FIRST) THEN
./FINT_PD.F90-725-		               GCHAR_DIST(I) = DIST
./FINT_PD.F90-726-		               FIRST = .FALSE.
./FINT_PD.F90-727-		             ELSE
./FINT_PD.F90-728-		               GCHAR_DIST(I) = MIN(GCHAR_DIST(I),DIST)
./FINT_PD.F90-729-		             END IF
./FINT_PD.F90-730-		         
./FINT_PD.F90-731-		         END IF
./FINT_PD.F90-732-         
./FINT_PD.F90:733:		       END DO !J=1,GNUMP (NEIGHBOR NODES)
./FINT_PD.F90-734-                     
./FINT_PD.F90-735-		       DLT_TEMP = GCHAR_DIST(I) / GMAX_WVEL(I)
./FINT_PD.F90-736-                 
./FINT_PD.F90-737-                     
./FINT_PD.F90-738-		       IF (I.EQ.1) THEN
./FINT_PD.F90-739-		         DLT_FINT = DLT_TEMP
./FINT_PD.F90-740-		       ELSE
./FINT_PD.F90-741-		       
./FINT_PD.F90-742-		         IF (DLT_TEMP.LT.DLT_FINT) THEN
./FINT_PD.F90-743-		           DLT_FINT = DLT_TEMP
./FINT_PD.F90-744-		         END IF
./FINT_PD.F90-745-		         DLT_FINT = MIN(DLT_TEMP,DLT_FINT)
./FINT_PD.F90-746-		       END IF
./FINT_PD.F90-747-		       
./FINT_PD.F90:748:        END DO
./FINT_PD.F90-749-			   
./FINT_PD.F90-750-        DLT_FINT = DLT_FINT*DLT_FAC
./FINT_PD.F90-751-			   
./FINT_PD.F90-752-			   
./FINT_PD.F90-753-	  
./FINT_PD.F90-754-      END IF !CALC TIME STEP
./FINT_PD.F90-755-      
./FINT_PD.F90-756-	  
./FINT_PD.F90-757-	  DEALLOCATE(FINT_TEMP)
./FINT_PD.F90-758-	  RETURN
