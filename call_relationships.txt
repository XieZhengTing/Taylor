./ASSEMBLER.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./ASSEMBLER.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./ASSEMBLER.F90:	  ! COMPUTE THE INTERNAL FORCE FOR ALL LOCALLY OWNED NODES
./ASSEMBLER.F90:	  ! COMPUTE THE INTERNAL FORCE FOR ALL LOCALLY OWNED NODES
./ASSIGN_TO_NODE.f90:              CALL EXIT_PROGRAM(EXIT_STRING,2)
./ASSIGN_TO_NODE.f90:              CALL EXIT_PROGRAM(EXIT_STRING,2)
./BIN_SEARCH.F90:            CALL BIN_INODE(IP_BIN,INODE_BIN,NODE_NO, &
./CONSTITUTE_VISCOELASTIC.F90:		CALL DETERMINANT(FMAT, J)
./CONSTITUTE_VISCOELASTIC.F90:		CALL INVERSE(FMAT_BAR, 3, INV_FMAT_BAR)
./CONSTITUTE_VONMISES.F90:             CALL EXIT_PROGRAM('PLASTICITY MATERIAL MODEL DID NOT CONVERGE',0)
./CONSTITUTE_VONMISES_DAM.F90:             CALL EXIT_PROGRAM('PLASTICITY MATERIAL MODEL DID NOT CONVERGE',0)
./CONSTITUTION.F90:		  CALL EXIT_PROGRAM('INVALID MATERIAL TYPE IN SUBROUTINE CONSTITUTION',1)
./CONSTITUTION.F90:		  CALL VISCO_ELASTIC(LPROP, DLT, FMAT, LSTRESS, H_STRESS, S_STRESS)
./CONSTITUTION.F90:          CALL DRUCK_PRAG(LSTRESS, LSTRAIN, STRAIN, LSTRESS_PREDICTOR, LSTATE, LPROP)
./CONSTITUTION.F90:          CALL VON_MISES(LSTRESS, LSTRAIN, LSTRESS_PREDICTOR, LSTATE, LPROP)
./CONSTITUTION.F90:          CALL VON_MISES_DAM(LSTRESS, LSTRAIN, STRAIN, LSTRESS_PREDICTOR, LSTATE, LPROP)
./ECHO_CONTROL.F90:        CALL GET_NUM_PROP(MODEL_MAT_TYPE(I),NUM_PROP)
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'BUT COULD ALSO BE DUE TO INVALID USER INPUT,')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'OPTION IS NOT IMPLEMENTED YET')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'OR THIS MISTAKE WAS NOT DETECTED IN THE PREPROCESSOR')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'THIS WAS LIKELY THE FAULT OF THE DEVELOPER,')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'THIS WAS LIKELY THE FAULT OF THE USER,')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'THIS WAS THE FAULT OF THE DEVELOPER, THIS')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'THIS WAS THE FAULT OF THE USER')
./EXIT_PROGRAM.F90:	       CALL LOG_APPEND( 'WHICH WAS NOT DETECTED IN THE PREPROCESSOR')
./EXIT_PROGRAM.F90:	  CALL LOG_APPEND( 'THE EXECUTION OF MEGA WILL NOW TERMINATE, INSERTING FORTRAN PAUSE')
./EXIT_PROGRAM.F90:	 CALL LOG_APPEND( ' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(' ')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND('*************************    A FATAL ERROR OCCURED   *************************')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND('******************************************************************************')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND('******************************************************************************')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND('******************************************************************************')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND('******************************************************************************')
./EXIT_PROGRAM.F90:      CALL LOG_APPEND(REASON)
./FINT.F90:				CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK,NSNI_FLAG)
./FINT.F90:                    ! CALL DETERMINANT(FMAT,DET)
./FINT.F90:                    !CALL INVERSE(FMAT, 3, IFMAT)
./FINT.F90:                    CALL DETERMINANT(FMAT,DET)
./FINT.F90:                    CALL INV3(FMAT,  IFMAT)
./FINT.F90:                    CALL INVERSE(B_TEMP, 3, B_INV_TEMP) 
./FINT.F90:                    CALL RK1(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90:                    CALL RK1(LCOO_T, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90:                    CALL RK1(SM_COO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL, GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90:                !CALL INVERSE(FMAT, 3, IFMAT)
./FINT.F90:                CALL DETERMINANT(FMAT,DET)
./FINT.F90:                CALL D_HUGHES_WINGET(LMAT,XLMAT, & !IN
./FINT.F90:                CALL D_HUGHES_WINGET(LMAT,YLMAT, & !IN
./FINT.F90:                CALL D_HUGHES_WINGET(LMAT,ZLMAT, & !IN
./FINT.F90:                CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK,NSNI_FLAG)
./FINT.F90:                CALL INV3(FMAT,  IFMAT)
./FINT.F90:                CALL RK1(LCOO_T, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO_CUURENT, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT.F90:            CALL CONSTITUTION(LSTRESS_PREDICTOR,LMAT_TYPE, LSTRAIN, STRAIN, LPROP, DLT, FMAT, & !IN
./FINT.F90:            CALL HUGHES_WINGET(LMAT,ROT,STRAIN,D)
./FINT.F90:            CALL HYPERELASTIC(LPROP,LSTRESS,FMAT,LSTRAIN)
./FINT.F90:            CALL ROTATE_TENSOR(ROT,LDX_STRESS)
./FINT.F90:            CALL ROTATE_TENSOR(ROT,LDY_STRESS)
./FINT.F90:            CALL ROTATE_TENSOR(ROT,LDZ_STRESS)
./FINT.F90:            CALL ROTATE_TENSOR(ROT,LSTRAIN)
./FINT.F90:            CALL ROTATE_TENSOR(ROT,LSTRESS)
./FINT.F90:        ! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT.F90:        !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT_PD.F90:		  !IF IT IS LAGRANGIAN AND IT IS NOT THE FIRST STEP, RECALL SHAPE FUNCTIONS
./FINT_PD.F90:		! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT_PD.F90:		! RECALL THE NODE STRESS AND STATE VARIABLES
./FINT_PD.F90:		CALL CONSTITUTION(LSTRESS_PREDICTOR,LMAT_TYPE, LSTRAIN, STRAIN, LPROP, DLT, FMAT, & !IN
./FINT_PD.F90:		CALL HUGHES_WINGET(LMAT,ROT,STRAIN,D)
./FINT_PD.F90:		CALL ROTATE_TENSOR(ROT,LSTRAIN)
./FINT_PD.F90:		CALL ROTATE_TENSOR(ROT,LSTRESS)
./FINT_PD.F90:	             CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK , NSNI_FLAG)
./FINT_PD.F90:                    CALL UDFM_SHAPE_TENSOR(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT_PD.F90:                    CALL UDFM_SHAPE_TENSOR(LCOO, RK_DEGREE, RK_PSIZE, RK_CONT, RK_IMPL,GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, GEBC_NODES,SELF_EBC, &
./FINT_PD.F90:                CALL DETERMINANT(FMAT,DET) 
./FINT_PD.F90:                CALL DFM_SHAPE_TENSOR(X_0,X_t, RK_DEGREE, RK_PSIZE, RK_CONT, GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, LCOO_CUURENT, &
./FINT_PD.F90:                CALL DFM_SHAPE_TENSOR(X_0,X_t, RK_DEGREE, RK_PSIZE, RK_CONT, GCOO, GVOL, GWIN, GNUMP, LSTACK, LN, GMAXN, LDINC, &
./FINT_PD.F90:                CALL INVERSE(FMAT, 3, IFMAT) 
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./GHOST.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./HANDELER.F90:         CALL GET_BINS(GNUMP,GCOO_CUURENT,NODES_IN_BIN,MAX_NEIGH,NODELIST_IN_BIN, &
./HANDELER.F90:         CALL SOFT_SEARCH(GNUMP,GCOO_CUURENT,GN,GSTART,DIM_NN_LIST,GSTACK,GMAXN,GWIN, &
./HANDELER.F90:      !CALL HARD_SEARCH(GNUMP,GCOO_CUURENT,GN,GSTART,DIM_NN_LIST,GSTACK,GMAXN,GWIN,GXDIST_MAX, GYDIST_MAX,GZDIST_MAX)
./HANDELER.F90:      !CALL THE NODE SEARCH ROUTINE HERE IF NEEDED
./HANDELER.F90:      CALL CONSTRUCT_FINT(GWIN,    GVOL,        GNUMP,     GCOO, GCOO_CUURENT, &   !FROM MAIN
./HANDELER.F90:      CALL CONSTRUCT_FINT_PD(GWIN,    GVOL,        GNUMP,     GCOO, GCOO_CUURENT, &   !FROM MAIN
./HUGHES_WINGET.F90:	  ! THE SO-CALLED HUGHES-WINGET ALGORITHM
./HUGHES_WINGET.F90:	  ! THE SO-CALLED HUGHES-WINGET ALGORITHM
./HUGHES_WINGET.F90:	  CALL INV3 (A, A_INV)
./HUGHES_WINGET.F90:	  CALL INV3 (A, A_INV)
./HUGHES_WINGET.F90:	  CALL INV3 (IW, IW_INV)
./HUGHES_WINGET.F90:      !CALL INVERSE(A, 3, A_INV)
./HUGHES_WINGET.F90:      !CALL INVERSE(A, 3, A_INV)  
./HUGHES_WINGET.F90:      !CALL INVERSE(IW, 3, IW_INV)       
./HYPERELASTIC.F90:        CALL EXIT_PROGRAM('NOT A HYPERELASTIC MATERIAL',1)
./HYPERELASTIC.F90:    CALL DETERMINANT(C,I3)
./HYPERELASTIC.F90:    CALL DETERMINANT(FTEN,DET)
./HYPERELASTIC.F90:    CALL INVERSE(C,3,CINV)
./HYPERELASTIC.F90:    CALL SPK2CAUCHY(LSTRESSTEN,DET,FTEN,FT)
./HYPERELASTIC.F90:!        !CALL MOONEY_RIVILING(LPROP,LSTRESS,DET,FMAT)
./INVERSE.F90:          CALL WARN('PROBLEM INVERTING MATRIX')
./KERNEL.F90:            CALL EXIT_PROGRAM('KERNEL TYPE NOT SUPPORTED',1)
./KERNEL.F90:            CALL FACTI(2*L+1,F2LPO)
./KERNEL.F90:            CALL FACTI(L,FL)
./MAIN.F90:                    call OUTPUT_STEP_VTK(exodusStep,LOCAL_NUMP,MODEL_NUMEL, MODEL_ELCON, LOCAL_COO_CURRENT,MODEL_NODE_IDS,LOCAL_DSP_TOT_PHY,LOCAL_VEL, &
./MAIN.F90:                    call UNF_OUTPUT_STEP_VTK(exodusStep,LOCAL_NUMP,MODEL_NUMEL, MODEL_ELCON, LOCAL_COO_CURRENT,MODEL_NODE_IDS,LOCAL_DSP_TOT_PHY,LOCAL_VEL_PHY, &
./MAIN.F90:                CALL EST_TIME(NCORES_INPUT,TIMER_STEPS,SIM_TIME_1,SIM_TIME_2, &
./MAIN.F90:            ! CALL THE SUBROUTINE TO OUTPUT TO THE EXODUS FILE
./MAIN.F90:            ! CALL THE SUBROUTINE TO OUTPUT TO THE VTK FILE
./MAIN.F90:            !CALL OUTPUT_ASSEMBLER(HPC_SCHEME, LOCAL_NUMP, MODEL_NUMP, TOTAL_MODEL_MAP, &
./MAIN.F90:            !call output_Step(        LOCAL_NUMP,LOCAL_COO_CURRENT,MODEL_NODE_IDS,LOCAL_DSP_TOT_PHY,LOCAL_VEL_PHY, &
./MAIN.F90:            CALL HANDELER(       LOCAL_WIN,      LOCAL_VOL,         LOCAL_NUMP,     LOCAL_COO,      LOCAL_COO_CURRENT,     &
./MAIN.F90:            CALL MAKE_CTIME(CTIME_ALL,REAL_TIME_REMAINING,TIMER_FLAG)
./MAIN.F90:            IF (TIMER_FLAG) CALL WARN('TIME REMAINING > 10000 DAYS')
./MAIN.F90:            call OUTPUT_STEP_VTK(exodusStep,LOCAL_NUMP,MODEL_NUMEL, MODEL_ELCON, LOCAL_COO_CURRENT,MODEL_NODE_IDS,LOCAL_DSP_TOT,LOCAL_VEL, &
./MAIN.F90:            call UNF_OUTPUT_STEP_VTK(exodusStep,LOCAL_NUMP,MODEL_NUMEL, MODEL_ELCON, LOCAL_COO_CURRENT,MODEL_NODE_IDS,LOCAL_DSP_TOT,LOCAL_VEL, &
./MAIN.F90:        !(INTERNAL FORCE FOR LOCALLY OWNED NODES)
./MAIN.F90:        !CALL BOUNDARY(LOCAL_NUMP, LOCAL_FINT, LOCAL_ACL, LOCAL_VEL, LOCAL_DSP, LOCAL_EBC)
./MAIN.F90:        !CALL CORRECTOR(TOTAL_LOCAL_NUMP,LOCAL_VEL,LOCAL_ACL,DLT)
./MAIN.F90:        !CALL EOM(TOTAL_LOCAL_NUMP,LOCAL_FINT,LOCAL_FEXT,LOCAL_MASS,LOCAL_ACL)
./MAIN.F90:        !CALL PREDICTOR(TOTAL_LOCAL_SIZE,LOCAL_ACL,LOCAL_VEL,LOCAL_DSP,DLT)
./MAIN.F90:        !CALL ROTATION_TEST(LOCAL_DSP,LOCAL_COO,LOCAL_NUMP,TIME,DLT)
./MAIN.F90:        CALL ASSEMBLER(LOCAL_NUMP,LOCAL_FINT,HPC_SCHEME)
./MAIN.F90:        CALL EST_TIME(NCORES_INPUT,TIMER_STEPS,SIM_TIME_1,SIM_TIME_2, &
./MAIN.F90:        CALL GHOSTER(HPC_SCHEME)
./MAIN.F90:        CALL HANDELER(      LOCAL_WIN,       LOCAL_VOL,      LOCAL_NUMP,        LOCAL_COO,      LOCAL_COO_CURRENT,     &
./MAIN.F90:        CALL HANDELER(      LOCAL_WIN,       LOCAL_VOL,      LOCAL_NUMP,        LOCAL_COO,      LOCAL_COO_CURRENT,     &
./MAIN.F90:    ! ALLOCATE LOCAL MODEL ARRAYS (IF LOCALLY OWNED NODES CHANGE, THEY WILL HAVE TO BE REALLOCATED)
./MAIN.F90:    ! DEALLOCATE MODEL ARRAYS (IF LOCALLY OWNED NODES CHANGE, DO NOT DO THIS)
./MAIN.F90:    !CALL OUTPUT_ASSEMBLER(HPC_SCHEME, LOCAL_NUMP, MODEL_NUMP, TOTAL_MODEL_MAP, &
./MAIN.F90:    !call output_Header(LOCAL_NUMP,LOCAL_COO) !TEMP
./MAIN.F90:    CALL ASSIGN_PARALLEL(HPC_SCHEME, MODEL_NUMP, LOCAL_NUMP)
./MAIN.F90:    CALL ASSIGN_PARALLEL_MAP(HPC_SCHEME, MODEL_NUMP, LOCAL_NUMP, MODEL_MAP)
./MAIN.F90:    CALL CLEAN_VTKS
./MAIN.F90:    CALL CPU_TIME(REAL_TIME_0)
./MAIN.F90:    CALL CPU_TIME(REAL_TIME_1)
./MAIN.F90:    CALL CPU_TIME(REAL_TIME_1)
./MAIN.F90:    CALL GHOST_INIT(HPC_SCHEME, LOCAL_NUMP, GHOST_NUMP, LOCAL_GHOST)
./MAIN.F90:    CALL GHOST_INIT_MAP(HPC_SCHEME, GHOST_NUMP, LOCAL_NUMP, TOTAL_MODEL_MAP)
./MAIN.F90:    CALL LOG_APPEND_SPACE('CONTROL FILE READ SUCSESSFULLY')
./MAIN.F90:    CALL LOG_APPEND_SPACE('MODEL FILE READ SUCSESSFULLY')
./MAIN.F90:    CALL LOG_HEADER
./MAIN.F90:    CALL MAKE_CTIME(CTIME_ALL,TOTAL_REAL_TIME,TIMER_FLAG)
./MAIN.F90:    CALL PARALLEL_MODEL(    MODEL_NUMP,    LOCAL_NUMP,     MODEL_MAP,       &
./MAIN.F90:    CALL PRE_CONTROL
./MAIN.F90:    CALL PRE_MODEL
./MAIN.F90:    CALL PRE_OMP
./MAIN.F90:    CALL PRINT_OPENING
./MAIN.F90:    CALL STATE_FEILD_INIT(TOTAL_LOCAL_SIZE,TOTAL_LOCAL_NUMP, LOCAL_NUMP, MODEL_NUMP, MODEL_VINIT, TOTAL_MODEL_MAP, MODEL_COO,MODEL_MASS,MODEL_EBC, &
./MAIN.F90:    CALL WRITE_OUT('MEGA COMPLETE')
./MAIN.F90:    CALL WRITE_OUT('STARTING TIME INTEGRATION')
./MAIN.F90:    CALL WRITE_OUT(CTOTAL_REAL_TIME)
./PARALLEL.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./PARALLEL.F90:	      CALL EXIT_PROGRAM('INVALID HPC_SCHEME TYPE IN SUBROUTINE ASSEMBLER',0)
./PRE_CONTROL.F90:			   CALL EXIT_PROGRAM('ERRROR, CHOOSE IFEM_OUTPUT=(0,1) IN CARD *FEM OUTPUT IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:			   CALL EXIT_PROGRAM('ERRROR, CHOOSE IIKCONTACT=(0,1) IN CARD *FEM OUTPUT IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:			IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *FEMMESH PARAMETER IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:		CALL LOG_APPEND('LFEM_OUTPUT = .FALSE. (NO FEM MESH OUTPUT)')
./PRE_CONTROL.F90:	          IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *QL PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	         CALL EXIT_PROGRAM('ERRROR, CHOOSE IFINITE_STRAIN=(0,1) IN CARD *FORMULATION PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	         CALL EXIT_PROGRAM('ERRROR, CHOOSE ILAGRANGIAN=(0,1) IN CARD *FORMULATION PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	        CALL EXIT_PROGRAM('ERRROR, CHOOSE IAUTO_TS=(0,1) IN CARD "*TIME PARAMETERS" IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	        CALL EXIT_PROGRAM('ERRROR, CHOOSE RK_CONT > -1 IN CARD *RK PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	        CALL EXIT_PROGRAM('ERRROR, CHOOSE RK_DEGREE = (0,1,2) IN CARD *RK PARAMETERS IN THE CONTROL FILE',-1) !-1 = NOT IMPLEMENTED
./PRE_CONTROL.F90:	        CALL EXIT_PROGRAM('ERRROR, CHOOSE RK_DEGREE GREATER THAN 0 IN CARD *RK PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	        CALL EXIT_PROGRAM('ERRROR, CHOOSE RK_IMPL = (0,1) IN CARD *RK PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 1',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 2',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 3',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 4',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 5',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 1), VALUE ROW 6',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 1',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 2',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 3',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 4',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 5',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *COMPOSITE (MATERIAL 2), VALUE ROW 6',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING DLT_VAL IN THE CARD *TIME PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING IAUTO_TS IN THE CARD *TIME PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *FORMULATION PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *GRAVITY PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *HPC PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *HPC PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *INTEGRATION PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *OUTPUT PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *RK PARAMETERS IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *TIME PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING TIME_END IN THE CARD *TIME PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING TIME_SEARCH IN THE CARD *NODE SEARCH PARAMETERS IN THE CONTROL FILE',2)
./PRE_CONTROL.F90:	    CALL WARN('THE CARD "*FEM OUTPUT" WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:	  CALL ECHO_CONTROL
./PRE_CONTROL.F90:	  IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR OPENING THE CONTROL FILE "Control.dat"',2)
./PRE_CONTROL.F90:	  IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR OPENING THE FILE "Composite.dat"',2)
./PRE_CONTROL.F90:            IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *PERIODIC SEARCH IN THE CONTROL FILE',2) !2 = USER ERROR      
./PRE_CONTROL.F90:          CALL LOG_APPEND('LFINITE_STRAIN = .TRUE. (FINITE STRAIN FORMULATION)')
./PRE_CONTROL.F90:          CALL LOG_APPEND('LLAGRANGIAN = .FALSE. (SEMI-LAGRANGIAN FORMULATION)')
./PRE_CONTROL.F90:          CALL LOG_APPEND('PERIODIC SEARCH = .FALSE. (SEARCH EVERY STEP)')
./PRE_CONTROL.F90:          CALL WARN('THE CARD "*PERIODIC SEARCH" WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:          IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *COMPOSITE IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_CONTROL.F90:          IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *KERNEL_CONTACT PARAMETERS IN THE CONTROL FILE',2) 
./PRE_CONTROL.F90:          IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *PERIDYNAMICS IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_CONTROL.F90:          IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *SUPPORT IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_CONTROL.F90:         ! CALL LOG_APPEND('LLAGRANGIAN = .TRUE. (SEMI-LAGRANGIAN FORMULATION)')
./PRE_CONTROL.F90:        !  CALL LOG_APPEND('LFINITE_STRAIN = .FALSE. (FINITE STRAIN FORMULATION)')
./PRE_CONTROL.F90:        !CALL LOG_APPEND('GHOST_BUFFER = 1000')
./PRE_CONTROL.F90:        !CALL LOG_APPEND('GHOST_BUFFER = 1000')
./PRE_CONTROL.F90:        CALL EXIT_PROGRAM('TIME PARAMETERS NOT READ IN INPUT FILE (CARD *TIME PARAMETERS), FATAL ERROR',2)
./PRE_CONTROL.F90:        CALL LOG_APPEND('GHOST_BUFFER = 0')
./PRE_CONTROL.F90:        CALL LOG_APPEND('GRAVITY PARAMETERS = 0 0 0 (NO GRAVITY)')
./PRE_CONTROL.F90:        CALL LOG_APPEND('HPC_SCHEME = 1 (serial)')
./PRE_CONTROL.F90:        CALL LOG_APPEND('ITYPE_INT = 2 (NSNI)')
./PRE_CONTROL.F90:        CALL LOG_APPEND('KCONTACT = .NATURAL CONTACT.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('PERIDYNAMICS = .FALSE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('QL = TRUE')
./PRE_CONTROL.F90:        CALL LOG_APPEND('QL_COEF = 0.001')
./PRE_CONTROL.F90:        CALL LOG_APPEND('RK_CONT = 3')
./PRE_CONTROL.F90:        CALL LOG_APPEND('RK_DEGREE = 1')
./PRE_CONTROL.F90:        CALL LOG_APPEND('RK_IMPL = 0')
./PRE_CONTROL.F90:        CALL LOG_APPEND('bodyid_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('density_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('displacement_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('material_type_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('nodal_volume_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND('node_id_OUTPUT = .TRUE.')
./PRE_CONTROL.F90:        CALL LOG_APPEND(QLCHAR)
./PRE_CONTROL.F90:        CALL LOG_APPEND(QLCHAR)
./PRE_CONTROL.F90:        CALL LOG_APPEND_SPACE('STABILZIATION CONTROL = ON, COEF = 1.0')
./PRE_CONTROL.F90:        CALL STRONG_WARN('OUTPUT PARAMETERS NOT SET, DEFAULTING ARBITRARILY TO 100 OUTPUTS')
./PRE_CONTROL.F90:        CALL WARN('GHOSTING PARAMETERS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('KERNEL CONTACT PARAMETERS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('NODE SEARCH PARAMETERS NOT SPECIFIED, WILL UPDATE SEARCH BUCKETS EVERY TIME STEP')
./PRE_CONTROL.F90:        CALL WARN('PERIDYNAMICS PARAMETERS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('QL LENGTH WAS NOT FOUND IN THE CONTROL FILE, WILL BE AUTOMATICALLY GENERATED')
./PRE_CONTROL.F90:        CALL WARN('QL PARAMETERS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('RK PARAMETERS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('STABILIZATION CONTROL WAS NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('THE CARD "*FORMULATION PARAMETERS" WAS NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('THE CARD "*GRAVITY PARAMETERS" WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('THE CARD "*HPC PARAMETERS" WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('THE CARD "*INTEGRATION PARAMETERS" WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:        CALL WARN('THE CARD "*OUTPUT VARIABLES" WAS NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./PRE_CONTROL.F90:      CALL READ_CONTROL(MODEL_NUMP,MODEL_NODE_SET_LIST,MODEL_NODE_SET_LENGTH, &
./PRE_CONTROL.F90:      IF (RK_DEGREE.GT.2) CALL EXIT_PROGRAM('(RK_DEGREE.GT.2) NOT IMPLEMENTED YET',0)
./PRE_MODEL.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE CARD *MODEL IN THE CONTROL FILE',2)
./PRE_MODEL.F90:	  IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR OPENING THE CONTROL FILE "Control.dat"',2)
./PRE_MODEL.F90:	  IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR OPENING THE MODEL FILE',2)
./PRE_MODEL.F90:      CALL COUNT_ELEMENTS(MODEL_FILE, MODEL_NUMEL, MODEL_NUMBLOCK, MODEL_NUMEL_BLOCKS)
./PRE_MODEL.F90:      CALL COUNT_FIXITY2_STEPS(MODEL_FILE, FIXITY2_STEPS)
./PRE_MODEL.F90:      CALL COUNT_NODES(MODEL_FILE, MODEL_NUMP)
./PRE_MODEL.F90:      CALL COUNT_NODE_SETS(MODEL_FILE, NUM_NODESET,MAX_NINODESET)
./PRE_MODEL.F90:      CALL ECHO_MODEL(MODEL_WIN,MODEL_VOL,MODEL_NUMP,MODEL_NUMEL,MODEL_ELCON,MODEL_COO, &
./PRE_MODEL.F90:      CALL GET_ADIAL(MODEL_WIN,MODEL_NUMP,MODEL_NUMEL,MODEL_ELCON,MODEL_COO,MODEL_TYPEL_BLOCKS,MODEL_ELBID)
./PRE_MODEL.F90:      CALL GET_SMOOTHING_LENGTHS(MODEL_VOL,MODEL_NUMP,MODEL_COO,MODEL_WIN, &
./PRE_MODEL.F90:      CALL GET_VOLUMES(MODEL_VOL,MODEL_NUMP,MODEL_NUMEL,MODEL_ELCON,MODEL_COO,MODEL_TYPEL_BLOCKS,MODEL_ELBID)
./PRE_MODEL.F90:      CALL SECOND_MOMENT(MODEL_VOL,MODEL_NUMP,MODEL_COO,MODEL_WIN, &   !IN
./PRE_MODEL_COUNT.f90:			IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY STEPS IN THE CARD *ORDERED BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_MODEL_COUNT.f90:			IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY STEPS IN THE CARD *ORDERED BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_MODEL_COUNT.f90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY IN THE CARD *ORDERED BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_MODEL_COUNT.f90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY IN THE CARD *ORDERED BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./PRE_MODEL_VOL.F90:      CALL DETERMINANT(M,DVOL_TET)
./PRE_MODEL_VOL1.f90:      CALL DETERMINANT(A,AD)
./PRE_MODEL_VOL2.F90:      CALL DETERMINANT(A,AD)
./PRE_MODEL_VOL2.F90:      CALL DETERMINANT(B,BD)
./PRE_MODEL_VOL2.F90:      CALL DETERMINANT(C,CD)
./PRE_MODEL_VOLUMES.F90:       CALL GET_VOL1(DVOL,XYZEL)
./PRE_MODEL_VOLUMES.F90:       CALL GET_VOL2(DVOL,XYZEL)
./PRE_MODEL_VOLUMES.F90:    CALL GET_TET_IDS(T)
./PRE_MODEL_VOLUMES_HEX.F90:       CALL GET_VOL(DVOL,XYZEL,T)
./PRE_MODEL_VOLUMES_HEX.F90:    CALL GET_TET_IDS(T)
./PRE_OMP.F90:				CALL OMP_set_num_threads(NCORES_INPUT)
./PRE_OMP.F90:				CALL WARN(CTEMP)
./PRE_OMP.F90:		  call get_command_argument(2,CTEMP)
./PRE_OMP.F90:		CALL OMP_set_num_threads(1)
./PRE_OMP.F90:                CALL WRITE_OUT(CHAR_VAR)
./PRE_OMP.F90:                CALL WRITE_OUT(CHAR_VAR)
./PRE_OMP.F90:                CALL WRITE_OUT(CHAR_VAR)
./PRE_OMP.F90:      call get_command_argument(1,CTEMP)
./READ.F90:	            CALL EXIT_PROGRAM('SET NAME NOT FOUND',2)
./READ.F90:	            CALL EXIT_PROGRAM('SET NUMBER NOT FOUND',2)
./READ.F90:	        IF (IERROR.NE.0) CALL EXIT_PROGRAM('SET NUMBER NOT FOUND IN MODEL FOR SET IN CARD *SET NAME',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 1',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 2',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 3',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 4',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 5',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('ERROR READING CARD *MATERIALS, VALUE ROW 6',2)
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE BODYFORCE (NEW VARIABLE, DBL(3) !) IN THE CARD *BODY DEFINITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE BODY_ID IN THE CARD *BODY DEFINITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE FIXITY IN THE CARD *ORDERED BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE MAT_TYPE IN THE CARD *MATERIALS IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE NORM_WINDOW IN THE CARD *WINDOW DEFINITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE SET_NAME IN THE CARD *SET NAME IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE SET_NO IN THE CARD *SET NAME IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:	      IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE VARIABLE VELOCITIES IN THE CARD *INITIAL CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:                   CALL WARN('DILATATION EFFECT IS NOT IMPLEMENTED IN DRUCKER-PRAGER MATERIAL MODEL, Q_PSI IS RESET TO ZERO')
./READ.F90:                  IF(FIXITY2_TIME(I,J) .GT. TIME_END) CALL EXIT_PROGRAM('THERE WAS AN ERROR THE PRESCRIBED DISPLACEMENT TIME DURATION. TIME DURATION IS GREAT THAN TIME END',2)
./READ.F90:                CALL WRITE_OUT(CARD_WARN)
./READ.F90:                CALL WRITE_OUT(CARD_WARN)
./READ.F90:                IF (FIXITY2_TIME(I,1) .GT. FIXITY2_TIME(I,2)) CALL EXIT_PROGRAM('THERE WAS AN ERROR THE PRESCRIBED DISPLACEMENT TIME DURATION. TIME START IS GREAT THAN TIME END',2)
./READ.F90:                IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT DURATION IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:                IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT DURATION IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:                IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:                IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:              IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT STEPS IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:              IF (IERROR.NE.0) CALL EXIT_PROGRAM('THERE WAS AN ERROR READING THE PRESCRIBED DISPLACEMENT STEPS IN THE CARD *BOUNDARY CONDITION IN THE CONTROL FILE',2) !2 = USER ERROR
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_BODYFORCE(1,NODE_ID),BODYFORCE(1), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_BODYFORCE(2,NODE_ID),BODYFORCE(2), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_BODYFORCE(3,NODE_ID),BODYFORCE(3), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_NONZERO_EBC(1,NODE_ID),D3_TEMP(1), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_NONZERO_EBC(2,NODE_ID),D3_TEMP(2), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_NONZERO_EBC(3,NODE_ID),D3_TEMP(3), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_NORM_WIN(NODE_ID),NORM_WINDOW, &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_VINIT(1,NODE_ID),VELOCITIES(1), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_VINIT(2,NODE_ID),VELOCITIES(2), &
./READ.F90:            CALL ASSIGN_DBL_VALUE_TO_NODE( MODEL_VINIT(3,NODE_ID),VELOCITIES(3), &
./READ.F90:            CALL ASSIGN_INT_VALUE_TO_NODE(  MODEL_MAT_TYPE(NODE_ID),MAT_TYPE, &
./READ.F90:            CALL ASSIGN_INT_VALUE_TO_NODE( MODEL_BODY_ID(NODE_ID),BODY_ID, &
./READ.F90:            CALL ASSIGN_INT_VALUE_TO_NODE( MODEL_EBC(1,NODE_ID),FIXITY(1), &
./READ.F90:            CALL ASSIGN_INT_VALUE_TO_NODE( MODEL_EBC(2,NODE_ID),FIXITY(2), &
./READ.F90:            CALL ASSIGN_INT_VALUE_TO_NODE( MODEL_EBC(3,NODE_ID),FIXITY(3), &
./READ.F90:            CALL EXIT_PROGRAM('INPUT ERROR: PLEASE CHOOSE A BODY ID THAT IS LESS THAN OR EQUAL TO 1000',2)
./READ.F90:            CALL EXIT_PROGRAM('INVALID SET NAME',1) 
./READ.F90:            CALL GET_NUM_PROP(MAT_TYPE,NUM_PROP)
./READ.F90:            CALL WRITE_OUT(CARD_WARN)
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*BODY DEFINITION')
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*BOUNDARY CONDITION')
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*BOUNDARY CONDITION')
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*INITIAL CONDITION')
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*MATERIALS')
./READ.F90:          CALL READ_SET_NO(10,MODEL_SET_NAMES,SET_INDEX, NUM_NODESET,MODEL_NODE_SET_ID,'*WINDOW DEFINITION')
./READ.F90:          CALL WARN(CHAR41)
./READ.F90:        CALL EXIT_PROGRAM('A MATERIAL DEFINITION IS MISSING FOR PART OF THE MODEL, THEY MUST BE SPECIFIED',2)
./READ.F90:        CALL EXIT_PROGRAM('BODY ID DEFINITIONS ARE IS MISSING FOR PART OF THE MODEL, THEY MUST BE SPECIFIED (OPTIONS:SPECIFY VALUES FOR ALL NODES, OR DONT SPECIFY AT ALL)',2)
./READ.F90:        CALL EXIT_PROGRAM('EITHER ORDERED OR NON-ORDERED BOUNDARY CONDITIONS MUST BE USED',2)
./READ.F90:        CALL EXIT_PROGRAM('MATERIAL DEFINITIONS WERE NOT FOUND IN THE CONTROL FILE, THEY MUST BE SPECIFIED',2)
./READ.F90:        CALL EXIT_PROGRAM('WINDOW DEFINITIONS ARE IS MISSING FOR PART OF THE MODEL, THEY MUST BE SPECIFIED (ALL NODES OR NONE)',2)
./READ.F90:        CALL LOG_APPEND('A MATERIAL DEFINITION IS MISSING FOR PART OF THE MODEL, NUMBER MISSING =')
./READ.F90:        CALL LOG_APPEND('BODY ID DEFINITIONS ARE MISSING FOR PART OF THE MODEL, NUMBER MISSING =')
./READ.F90:        CALL LOG_APPEND('ESSENTIAL BOUNDARY CONDITIONS ARE MISSING FOR PART OF THE MODEL, NUMBER MISSING =')
./READ.F90:        CALL LOG_APPEND('WINDOW DEFINITIONS ARE MISSING FOR PART OF THE MODEL, NUMBER MISSING =')
./READ.F90:        CALL LOG_APPEND(SNUM_MISSING)
./READ.F90:        CALL LOG_APPEND(SNUM_MISSING)
./READ.F90:        CALL LOG_APPEND(SNUM_MISSING)
./READ.F90:        CALL LOG_APPEND(SNUM_MISSING)
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOF NORMALIZED WINDOWS = 1.8')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = AT REST')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = BODY 1')
./READ.F90:        CALL LOG_APPEND_SPACE('ALL DOFS = FREE')
./READ.F90:        CALL LOG_APPEND_SPACE('NODE DOFS WITH UNASSIGNED ESSENTIAL BOUNDARY CONDITIONS = FREE')
./READ.F90:        CALL WARN('BODY IDS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./READ.F90:        CALL WARN('BOUNDARY CONDITIONS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./READ.F90:        CALL WARN('INITIAL CONDITIONS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./READ.F90:        CALL WARN('SET NAMES WERE NOT FOUND IN THE CONTROL FILE')
./READ.F90:        CALL WARN('SOME ESSENTIAL BOUNDARY CONDITIONS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT OF FREE WILL BE USED')
./READ.F90:        CALL WARN('WINDOW DEFINITIONS WERE NOT FOUND IN THE CONTROL FILE, DEFAULT VALUES WILL BE USED')
./RK.f90:                CALL FILL_H(XM_QLX,YM_QLY,ZM_QLZ,MSIZE,DEG,H_FULL_TEMP)
./RK.f90:            CALL FILL_H(XM_QLX,YM_QLY,ZM_QLZ,MSIZE,DEG,H_FULL)
./RK.f90:            CALL MLS_KERNEL0(ABS(XMXI_OA(I)),GWIN(1,II),CONT,PHIX,PHIX_X,ISZERO)
./RK.f90:            CALL MLS_KERNEL0(ABS(YMYI_OA(I)),GWIN(2,II),CONT,PHIY,PHIY_Y,ISZERO)
./RK.f90:            CALL MLS_KERNEL0(ABS(ZMZI_OA(I)),GWIN(3,II),CONT,PHIZ,PHIZ_Z,ISZERO)
./RK.f90:            CALL MLS_KERNEL0(DIA(I),GWIN(1,II),CONT,PHI(I),PHIX_X,ISZERO)
./RK.f90:        !CALL DERIV_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_X,H_Y,H_Z)
./RK.f90:        CALL DERIV_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_X,H_Y,H_Z)
./RK.f90:        CALL FILL_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_FULL)
./RK.f90:        CALL FILL_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_FULL)
./RK.f90:        CALL FILL_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_FULL)
./RK.f90:        CALL FILL_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_FULL)
./RK.f90:        CALL FILL_H(XMXI_OA(I),YMYI_OA(I),ZMZI_OA(I),MSIZE,DEG,H_FULL_STAR)
./RK.f90:        CALL MLS_KERNEL0(ABS(XMXI_OA(I)),GWIN(1,II),CONT,PHIX,PHIX_X,ISZERO)
./RK.f90:        CALL MLS_KERNEL0(ABS(YMYI_OA(I)),GWIN(2,II),CONT,PHIY,PHIY_Y,ISZERO)
./RK.f90:        CALL MLS_KERNEL0(ABS(ZMZI_OA(I)),GWIN(3,II),CONT,PHIZ,PHIZ_Z,ISZERO)
./RK.f90:    !CALL TESTER(X,SHP,SHPD,LN,LSTACK,GCOO)
./RK.f90:    !CALL TESTERX(X,SHP,SHPD,LN,LSTACK,GCOO)
./RK.f90:    CALL INVERSE(K_MATX, MSIZE-1, INVK_MATX)
./RK.f90:    CALL INVERSE(M_FULL, MSIZE, MINV)
./RK.f90:    CALL M44INV(M_FULL, MINV)
./TIMERS.F90:            CALL CPU_TIME(REAL_TIME_1) 
./TIMERS.F90:            CALL CPU_TIME(REAL_TIME_2) !REAL_TIME_1,REAL_ TIME_2, REAL_TIME_TEMP
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(50)
./VTK_OUTPUT.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(50)
./VTK_OUTPUT.F90:          CALL START_DATA(50)
./VTK_OUTPUT.F90:          CALL START_DATA(50)
./VTK_OUTPUT.F90:          CALL START_DATA(50)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('init_velocity_x', MODEL_VINIT(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('init_velocity_y', MODEL_VINIT(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('init_velocity_z', MODEL_VINIT(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('initial_coordinate_x', MODEL_COO(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('initial_coordinate_y', MODEL_COO(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('initial_coordinate_z', MODEL_COO(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_x', MODEL_WIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_y', MODEL_WIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('physical_window_z', MODEL_WIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('pre_disp_force_x', LOCAL_PRFORCE(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('pre_disp_force_y', LOCAL_PRFORCE(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('pre_disp_force_z', LOCAL_PRFORCE(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_eq', LOCAL_STRAIN_EQ(:), MODEL_NUMP, 50)   
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_xx', LOCAL_STRAIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_xy', LOCAL_STRAIN(6,:), MODEL_NUMP, 50)   
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_xz', LOCAL_STRAIN(5,:), MODEL_NUMP, 50)         
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_yy', LOCAL_STRAIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_yz', LOCAL_STRAIN(4,:), MODEL_NUMP, 50)         
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('strain_zz', LOCAL_STRAIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_xx', LOCAL_STRESS(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_xy', LOCAL_STRESS(6,:), MODEL_NUMP, 50)         
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_xz', LOCAL_STRESS(5,:), MODEL_NUMP, 50)         
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_yy', LOCAL_STRESS(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_yz', LOCAL_STRESS(4,:), MODEL_NUMP, 50)         
./VTK_OUTPUT.F90:         CALL VTK_WRITE_DBL('stress_zz', LOCAL_STRESS(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:        CALL EXIT_PROGRAM('THERE WAS AN ERROR DURRING OUTPUT, OUT OF FILE INDICIES',-1)
./VTK_OUTPUT.F90:      CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT.F90:      CALL VTK_OUTPUT_HEADER(50)
./VTK_OUTPUT.F90:      CALL WRITE_OUT('CLEANING VTK FILES...')
./VTK_OUTPUT.F90:      IF(IJKspace_OUTPUT) CALL VTK_WRITE_INT_THREE('Ispace', 'Jspace','Kspace',LOCAL_IJKSPC, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(acceleration_OUTPUT) CALL VTK_WRITE_DBL_THREE('acceleration_x', 'acceleration_y', 'acceleration_z', MODEL_ACL, MODEL_NUMP, 50)  
./VTK_OUTPUT.F90:      IF(bodyid_OUTPUT) CALL VTK_WRITE_INT('bodyid', MODEL_BODY_ID, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(characteristic_distance_OUTPUT) CALL VTK_WRITE_DBL('characteristic_distance', LOCAL_CHAR_DIST, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(dam_OUTPUT) CALL VTK_WRITE_DBL('dam',             LOCAL_STATE(4,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(displacement_OUTPUT) CALL VTK_WRITE_DBL_THREE('displacement_x', 'displacement_y', 'displacement_z', MODEL_DSP_TOT, MODEL_NUMP, 50)  
./VTK_OUTPUT.F90:      IF(eps_OUTPUT) CALL VTK_WRITE_DBL('eps',             LOCAL_STATE(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(eps_shear_OUTPUT) CALL VTK_WRITE_DBL('eps_shear', LOCAL_STATE(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(eps_vol_OUTPUT) CALL VTK_WRITE_DBL('eps_vol',     LOCAL_STATE(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(fint_OUTPUT) CALL VTK_WRITE_DBL_THREE('fint_x', 'fint_y', 'fint_z', MODEL_FINT, MODEL_NUMP, 50)  
./VTK_OUTPUT.F90:      IF(fint_OUTPUT) CALL VTK_WRITE_INT_THREE('fixity_x', 'fixity_y', 'fixity_z', MODEL_EBC, MODEL_NUMP, 50) 
./VTK_OUTPUT.F90:      IF(material_type_OUTPUT) CALL VTK_WRITE_INT('material_type', MODEL_MAT_TYPE, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(material_type_OUTPUT) CALL VTK_WRITE_INT('material_type', MODEL_MAT_TYPE, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(max_wave_vel_OUTPUT) CALL VTK_WRITE_DBL('max_wave_vel', LOCAL_WAVE_VEL, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(nodal_volume_OUTPUT) CALL VTK_WRITE_DBL('nodal_volume', MODEL_VOL, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(node_id_OUTPUT) CALL VTK_WRITE_INT('node_id', MODEL_NODE_IDS, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(normalized_window_OUTPUT) CALL VTK_WRITE_DBL('normalized_window', MODEL_NORM_WIN, MODEL_NUMP, 50)
./VTK_OUTPUT.F90:      IF(velocity_OUTPUT) CALL VTK_WRITE_DBL_THREE('velocity_x', 'velocity_y', 'velocity_z', MODEL_VEL, MODEL_NUMP, 50)  
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(50)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:          CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('init_velocity_x', MODEL_VINIT(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('init_velocity_y', MODEL_VINIT(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('init_velocity_z', MODEL_VINIT(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('initial_coordinate_x', MODEL_COO(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('initial_coordinate_y', MODEL_COO(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('initial_coordinate_z', MODEL_COO(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_x', MODEL_WIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_y', MODEL_WIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('physical_window_z', MODEL_WIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('pre_disp_force_x', LOCAL_PRFORCE(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('pre_disp_force_y', LOCAL_PRFORCE(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('pre_disp_force_z', LOCAL_PRFORCE(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_eq', LOCAL_STRAIN_EQ(:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_xx', LOCAL_STRAIN(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_xy', LOCAL_STRAIN(6,:), MODEL_NUMP, 50)  
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_xz', LOCAL_STRAIN(5,:), MODEL_NUMP, 50)         
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_yy', LOCAL_STRAIN(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_yz', LOCAL_STRAIN(4,:), MODEL_NUMP, 50)         
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('strain_zz', LOCAL_STRAIN(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_xx', LOCAL_STRESS(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_xy', LOCAL_STRESS(6,:), MODEL_NUMP, 50)         
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_xz', LOCAL_STRESS(5,:), MODEL_NUMP, 50)         
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_yy', LOCAL_STRESS(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_yz', LOCAL_STRESS(4,:), MODEL_NUMP, 50)         
./VTK_OUTPUT_UNFORMATTED.F90:         CALL UNF_VTK_WRITE_DBL('stress_zz', LOCAL_STRESS(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:        CALL EXIT_PROGRAM('THERE WAS AN ERROR DURRING OUTPUT, OUT OF FILE INDICIES',-1)
./VTK_OUTPUT_UNFORMATTED.F90:      CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      CALL MID_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      CALL START_DATA(VTKIOUNIT)
./VTK_OUTPUT_UNFORMATTED.F90:      CALL VTK_OUTPUT_HEADER(50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(IJKspace_OUTPUT) CALL UNF_VTK_WRITE_INT_THREE('Ispace', 'Jspace','Kspace',LOCAL_IJKSPC, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(acceleration_OUTPUT) CALL UNF_VTK_WRITE_DBL_THREE('acceleration_x', 'acceleration_y', 'acceleration_z', MODEL_ACL, MODEL_NUMP, 50)  
./VTK_OUTPUT_UNFORMATTED.F90:      IF(bodyid_OUTPUT) CALL UNF_VTK_WRITE_INT('bodyid', MODEL_BODY_ID, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(characteristic_distance_OUTPUT) CALL UNF_VTK_WRITE_DBL('characteristic_distance', LOCAL_CHAR_DIST, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(dam_OUTPUT) CALL UNF_VTK_WRITE_DBL('dam',             LOCAL_STATE(4,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(displacement_OUTPUT) CALL UNF_VTK_WRITE_DBL_THREE('displacement_x', 'displacement_y', 'displacement_z', MODEL_DSP_TOT, MODEL_NUMP, 50)  
./VTK_OUTPUT_UNFORMATTED.F90:      IF(eps_OUTPUT) CALL UNF_VTK_WRITE_DBL('eps',             LOCAL_STATE(3,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(eps_shear_OUTPUT) CALL UNF_VTK_WRITE_DBL('eps_shear', LOCAL_STATE(1,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(eps_vol_OUTPUT) CALL UNF_VTK_WRITE_DBL('eps_vol',     LOCAL_STATE(2,:), MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(fint_OUTPUT) CALL UNF_VTK_WRITE_DBL_THREE('fint_x', 'fint_y', 'fint_z', MODEL_FINT, MODEL_NUMP, 50)  
./VTK_OUTPUT_UNFORMATTED.F90:      IF(fint_OUTPUT) CALL UNF_VTK_WRITE_INT_THREE('fixity_x', 'fixity_y', 'fixity_z', MODEL_EBC, MODEL_NUMP, 50) 
./VTK_OUTPUT_UNFORMATTED.F90:      IF(material_type_OUTPUT) CALL UNF_VTK_WRITE_INT('material_type', MODEL_MAT_TYPE, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(material_type_OUTPUT) CALL UNF_VTK_WRITE_INT('material_type', MODEL_MAT_TYPE, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(max_wave_vel_OUTPUT) CALL UNF_VTK_WRITE_DBL('max_wave_vel', LOCAL_WAVE_VEL, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(nodal_volume_OUTPUT) CALL UNF_VTK_WRITE_DBL('nodal_volume', MODEL_VOL, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(node_id_OUTPUT) CALL UNF_VTK_WRITE_INT('node_id', MODEL_NODE_IDS, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(normalized_window_OUTPUT) CALL UNF_VTK_WRITE_DBL('normalized_window', MODEL_NORM_WIN, MODEL_NUMP, 50)
./VTK_OUTPUT_UNFORMATTED.F90:      IF(velocity_OUTPUT) CALL UNF_VTK_WRITE_DBL_THREE('velocity_x', 'velocity_y', 'velocity_z', MODEL_VEL, MODEL_NUMP, 50)  
