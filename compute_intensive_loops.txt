./ASSEMBLER.F90-	  ! COMPUTE THE INTERNAL FORCE FOR ALL LOCALLY OWNED NODES
./ASSEMBLER.F90-	  ! COMPUTE THE INTERNAL FORCE FOR ALL LOCALLY OWNED NODES
./BIN_SEARCH.F90-    IF(SUM(NODES_IN_BIN).NE.NP)  THEN
./BIN_SEARCH.F90-        write(*,*)'MISS NODES',NP,SUM(NODES_IN_BIN)
./BIN_SEARCH.F90:                    END DO !LOOP OF SMOOTHING POINTS
./CONSTITUTE_DRUCKPRAG.F90-	  !LOOP INDEX VARIABLES
./CONSTITUTE_DRUCKPRAG.F90-	  ! COMPUTE AND ACCUMULATE DAMAGE
./CONSTITUTE_DRUCKPRAG.F90-	  ! DAMAGE HAS BEEN INICIATED, COMPUTE IT
./CONSTITUTE_VISCOELASTIC.F90-	  ! CALCULATE THE CORRECTED STRESS BY VISCO_ELASTIC MODEL
./CONSTITUTE_VONMISES.F90-	  !LOOP INDEX VARIABLES
./CONSTITUTE_VONMISES_DAM.F90-	  !LOOP INDEX VARIABLES
./CONSTITUTE_VONMISES_DAM.F90-	  ! COMPUTE AND ACCUMULATE DAMAGE
./CONSTITUTE_VONMISES_DAM.F90-	  ! DAMAGE HAS BEEN INICIATED, COMPUTE IT
./CONSTITUTION.F90-	  ! COMPUTE THE CAUCHY STRESS GIVEN THE ELASTIC PREDICTOR STRESS AND MATERIAL TYPE
./FINT.F90-    !LOOP OVER THE NODE STACK
./FINT.F90:    !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT.F90:                        END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-                    ! CALCULATE THE DEFORMATION GRADIENT
./FINT.F90-                ! COMPUTE SMOOTHED AREA OVER VOLUME
./FINT.F90-                !COMPUTE THE SHAPE FUNCTIONS AT GRADIENT SMOOTHING POINTS
./FINT.F90:                END DO !J = 1, 6 (COMPUTE THE SMOOTHED GRADIENTS)
./FINT.F90:                            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-        ! COMPUTE STRAIN MEASURES
./FINT.F90:                            ! END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-					! !COMPUTE GREEN'S STRAIN
./FINT.F90-            ! COMPUTE THE INCREMENTAL DEFORMATION GRADIENT WITH RESPECT TO THE CURRENT TIME STEP
./FINT.F90:            END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90-			! !COMPUTE THE CHANBGE IN LENGTHS OF SUPPORTS
./FINT.F90:                END DO !J = 1, LN (COMPUTE THE INCREMENTAL DEFORMATION GRADIENT)
./FINT.F90:    END DO !INTEGRATION POINT (NODE) LOOP
./FINT.F90-    GINT_WORK =  GINT_WORK+SUM(GINT_WORK_TEMP(1:NCORES_INPUT))
./FINT.F90-            FINT((I-1)*3+K) =  SUM(FINT_TEMP(1:NCORES_INPUT,K,I))
./FINT.F90-            FEXT((I-1)*3+K) =  SUM(FEXT_TEMP(1:NCORES_INPUT,K,I))
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE BULK MODULUS
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE SHEAR MODULUS
./FINT_FUNCTIONS.F90-	  ! GIVEN E AND V, COMPUTE SHEAR MODULUS
./FINT_PD.F90-	  !LOOP OVER THE NODE STACK
./FINT_PD.F90:	  !LET OPEN-MP DECIDE HOW TO DO THE DO-LOOP
./FINT_PD.F90:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90:	  END DO !INTEGRATION POINT (NODE) LOOP
./FINT_PD.F90-		    FINT((I-1)*3+K) =  SUM(FINT_TEMP(1:NCORES_INPUT,K,I)) 
./HUGHES_WINGET.F90-	  ! COMPUTE THE ROTATION AND STRAIN TENSORS USING
./HUGHES_WINGET.F90-	  ! COMPUTE THE ROTATION AND STRAIN TENSORS USING
./INVERSE.F90-	  ! COMPUTE THE INVERSE OF A 3X3 MATRIX
./INVERSE.F90-	  !!!! COMPUTE THE INVERSE OF A 3X3 MATRIX
./MAIN.F90-        !COMPUTE THE PREDICTED CURRENT COORD FOR SEMI-LAG SHP CACULATION
./MAIN.F90-        ! CALCULATE ENERGIES
./MAIN.F90:        ! NEED TO CALCULATE THE EXTERNAL ENERGY SO THAT THE ENERGIES ADD UP #TODO
./PRE_CONTROL.F90-          !LOOP OVER ALL NODES
./PRE_CONTROL.F90-          !FIND THE MATERIAL ID BY LOOPING OVER THE TABLE...
./PRE_MODEL_ADIAL.F90-    !LOOP OVER ELEMENTS AND CHECK THE MAX X, Y, Z DIMENSIONS
./PRE_MODEL_VOLUMES.F90-    !LOOP OVER ELEMENTS, COMPUTE VOLUMES
./PRE_MODEL_VOLUMES_HEX.F90-    !LOOP OVER ELEMENTS, COMPUTE VOLUMES
./RK.f90:    DOUBLE PRECISION:: PHI_SUM,QL_PTS(3,6), QLX(3)
./RK.f90-    PHI_SUM = 0.0d0
./RK.f90-            PHI_SUM = PHI_SUM + PHI(I)
./RK.f90-        M_FULL = M_FULL + M_FULL_STAR * PHI_SUM * QL_COEF
./RK.f90-    !IF(ABS(SUM(SHP(1:LN)-1.D0).GT. 1.0E-05)) THEN
./RK.f90-    !    WRITE(*,*) 'SHP ERROR: SUM = ', SUM(SHP(1:LN))
./RK.f90-    CX = SUM(SHPD(1,1:LN))
./RK.f90-    !IF(ABS(SUM(SHPD(1,1:LN)-0.D0).GT. 1.0E-03)) THEN
./RK.f90-    !WRITE(*,*) 'SHPD1 ERROR: SUM = ', SUM(SHPD(1,1:LN))
./RK.f90-    !IF(ABS(SUM(SHPD(2,1:LN)-0.D0).GT. 1.0E-03)) THEN
./RK.f90-    !WRITE(*,*) 'SHPD2 ERROR: SUM = ', SUM(SHPD(2,1:LN))
./RK.f90:    DOUBLE PRECISION:: PHI_SUM,QL_PTS(3,6), QLX(3)
./RK.f90-    PHI_SUM = 0.0d0
