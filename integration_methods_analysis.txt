102:	  !NSNI
106:                              MODEL_WIN,    MODEL_VOL,     MODEL_NSNI_FAC, MODEL_VINIT, MODEL_MAT_TYPE, &
109:                              LOCAL_WIN,    LOCAL_VOL,     LOCAL_NSNI_FAC, LOCAL_VINIT, LOCAL_MAT_TYPE, &
109:      ALLOCATE(MODEL_NSNI_FAC(3,MODEL_NUMP))
1120:        IF (ITYPE_INT.EQ.2) THEN !NSNI
1188:            ! CONTROL THE CONTRIBUTION TO FINT BY NSNI: SOME PARAMETERS ARE ESTIMATED AND
1212:                    !IT DOESNT LOOK LIKE X_MOM GETS ASSIGNED ANYTHING! FIX NSNI!
1222:        END IF !NSNI
135:      DOUBLE PRECISION, INTENT(IN):: MODEL_NSNI_FAC(3,MODEL_NUMP)
152:      DOUBLE PRECISION, INTENT(OUT):: LOCAL_NSNI_FAC(3,LOCAL_NUMP)
160:    ALLOCATE(LOCAL_WIN(3,LOCAL_NUMP),    LOCAL_VOL(LOCAL_NUMP),       LOCAL_NSNI_FAC(3,LOCAL_NUMP))
162:      !NSNI
170:    !NSNI
172:          LOCAL_NSNI_FAC(1:3,I) = MODEL_NSNI_FAC(1:3,II)
175:        MODEL_WIN,     MODEL_VOL,      MODEL_NSNI_FAC,  &
179:        LOCAL_VOL,     LOCAL_NSNI_FAC,                  &
17:	                               SHEAR, BULK,NSNI_FLAG)
17:                                GSM_LEN, GSM_AREA,   GSM_VOL,      GNSNI_FAC,      &   !FROM MAIN
17:                                NSNI_FAC) !OUT
17:                          GSM_LEN, GSM_AREA,  GSM_VOL,   GNSNI_FAC, GGHOST,       &   !FROM MAIN
17:    GSM_LEN, GSM_AREA,   GSM_VOL,      GNSNI_FAC,      &   !FROM MAIN
182:      LOGICAL:: NSNI_FLAG
189:    DEALLOCATE(MODEL_SM_LEN,MODEL_SM_AREA,MODEL_MAP,MODEL_SM_VOL,MODEL_WIN,MODEL_VOL,MODEL_NSNI_FAC,MODEL_MAT_TYPE, &
194:    LOGICAL:: FIRST,NSNI_FLAG
204:    IF (ITYPE_INT.EQ.0) THEN
20:                             MODEL_SM_LEN,MODEL_SM_AREA,MODEL_SM_VOL,MODEL_NSNI_FAC)
210:    DOUBLE PRECISION:: NSNI_LIMITER
234:      !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
250:    !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
267:                                MODEL_NSNI_FAC) !OUT
273:                             MODEL_SM_LEN,MODEL_SM_AREA,MODEL_SM_VOL,MODEL_NSNI_FAC)
27:       INTEGER, SAVE::RK_DEGREE, RK_CONT, RK_IMPL, ITYPE_INT
27:      DOUBLE PRECISION, INTENT(OUT):: NSNI_FAC(3,*)
286:                            GSM_LEN, GSM_AREA,    GSM_VOL,   GNSNI_FAC,          &   !FROM MAIN
296:      !$OMP                                       GCHAR_DIST,GMAX_WVEL, GMAXN, GGHOST, GEBC_NODES, GVOL, GNSNI_FAC, &
298:                          GSM_LEN, GSM_AREA,    GSM_VOL,   GNSNI_FAC,          &   !FROM MAIN
331:                LOCAL_SM_LEN,    LOCAL_SM_AREA,  LOCAL_SM_VOL,      LOCAL_NSNI_FAC, LOCAL_GHOST,       &
35:	  LOGICAL:: NOEST_SHEAR, NOEST_BULK, NSNI_FLAG
36:	  NSNI_FLAG = .FALSE.
372:            LOCAL_SM_LEN,    LOCAL_SM_AREA,  LOCAL_SM_VOL,      LOCAL_NSNI_FAC, LOCAL_GHOST,       &
39:	  DOUBLE PRECISION, INTENT(IN):: MODEL_NSNI_FAC(3,*)
400:            IF (ITYPE_INT.EQ.0) THEN
415:            LOCAL_SM_LEN,    LOCAL_SM_AREA,  LOCAL_SM_VOL,      LOCAL_NSNI_FAC, LOCAL_GHOST,       &
441:            ELSEIF ((ITYPE_INT.EQ.2).OR.(ITYPE_INT.EQ.1)) THEN
443:                ! NSNI
44:      DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
48:      DOUBLE PRECISION, ALLOCATABLE:: MODEL_NSNI_FAC(:,:)
498:                IF (ITYPE_INT.EQ.2) THEN
500:                    !NSNI CALCS
52:    DOUBLE PRECISION , ALLOCATABLE:: LOCAL_NSNI_FAC(:,:)    !
530:			     NSNI_FLAG=.FALSE.
531:	             CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK , NSNI_FLAG)
53:         NSNI_FAC(1,I) = (DIM_1*2.0d0)**2/12.0d0
54:         NSNI_FAC(2,I) = (DIM_2*2.0d0)**2/12.0d0
552:                    !TODO: GET RID OF THESE ARRAYS, WE DONT DO LAGRANGIAN NSNI, SO ITS
559:	      READ (10,*,iostat=IERROR) ITYPE_INT
55:         NSNI_FAC(3,I) = (DIM_3*2.0d0)**2/12.0d0
570:                ! STORE THE SHP FOR PHY DISPLACEMENT/VEL CACULATION FOR SNNI, DNI
61:			!IF (.NOT.NSNI_FLAG) THEN
61:         ! COMPUTE THE MOMENT FOR NSNI
62:    !NSNI
67:    DOUBLE PRECISION, ALLOCATABLE:: LOCAL_X_MOM(:), LOCAL_Y_MOM(:), LOCAL_Z_MOM(:) !NODAL MOMENTS FOR NSNI
684:        ITYPE_INT = 0
686:        CALL LOG_APPEND('ITYPE_INT = 0 (DNI)')
689:        WRITE(*,*) 'ITYPE_INT = 0 (DNI)'
707:            IF (ITYPE_INT.EQ.2) THEN
709:                !NSNI
76:      'X SMTH AREA','Y SMTH AREA','Z SMTH AREA',!'X NSNI FAC','Y NSNI FAC','Z NSNI FAC'
77:			!IF (.NOT.NSNI_FLAG) THEN
80:         MODEL_SM_VOL(I), MODEL_SM_LEN(:,I), MODEL_SM_AREA(:,I)!, MODEL_NSNI_FAC(:,I)
82:	  DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
84:    DOUBLE PRECISION:: GNSNI_FAC(3,GNUMP)
862:				NSNI_FLAG=.FALSE.
863:				CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK,NSNI_FLAG)
885:        IF (ITYPE_INT.EQ.2) THEN
906:                NSNI_FLAG=.TRUE.
907:                CALL ESTIMATE_MODULI(STRESS_INC, STRAIN_INC, SHEAR_TRIAL, BULK_TRIAL, SHEAR, BULK,NSNI_FLAG)
932:			NSNI_LIMITER = 1.0d0
945:                NSNI_LIMITER = 0.0d0
947:                NSNI_LIMITER = (1.0d0-2.0d0*LSTATE(4))
951:            ! UPDATE THE PSUEDO-STRESSES FOR NSNI
961:            ! SAVE WORK CONGUGATE STRESS DERIVATIVES FOR NSNI
965:                LOCAL_DX_STRESS(J,I) = LDX_STRESS(J)*NSNI_LIMITER
966:                LOCAL_DY_STRESS(J,I) = LDY_STRESS(J)*NSNI_LIMITER
967:                LOCAL_DZ_STRESS(J,I) = LDY_STRESS(J)*NSNI_LIMITER
979:        END IF !NSNI
